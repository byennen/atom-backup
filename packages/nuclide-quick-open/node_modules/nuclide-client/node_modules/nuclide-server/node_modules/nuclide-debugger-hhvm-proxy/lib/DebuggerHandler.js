
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _require = require('./utils');

var log = _require.log;
var logErrorAndThrow = _require.logErrorAndThrow;
var uriToPath = _require.uriToPath;

var Handler = require('./Handler');

var _require2 = require('./DbgpSocket');

var STATUS_STARTING = _require2.STATUS_STARTING;
var STATUS_STOPPING = _require2.STATUS_STOPPING;
var STATUS_STOPPED = _require2.STATUS_STOPPED;
var STATUS_RUNNING = _require2.STATUS_RUNNING;
var STATUS_BREAK = _require2.STATUS_BREAK;
var COMMAND_RUN = _require2.COMMAND_RUN;
var COMMAND_STEP_INTO = _require2.COMMAND_STEP_INTO;
var COMMAND_STEP_OVER = _require2.COMMAND_STEP_OVER;
var COMMAND_STEP_OUT = _require2.COMMAND_STEP_OUT;
var COMMAND_STOP = _require2.COMMAND_STOP;

var SESSION_END_EVENT = 'session-end-event';

// Handles all 'Debug.*' Chrome dev tools messages

var DebuggerHandler = (function (_Handler) {
  _inherits(DebuggerHandler, _Handler);

  function DebuggerHandler(callback, socket, dataCache) {
    _classCallCheck(this, DebuggerHandler);

    _get(Object.getPrototypeOf(DebuggerHandler.prototype), 'constructor', this).call(this, 'Debugger', callback);

    this._socket = socket;
    this._dataCache = dataCache;
    var FileCache = require('./FileCache');
    this._files = new FileCache(callback);

    var _require3 = require('events');

    var EventEmitter = _require3.EventEmitter;

    this._emitter = new EventEmitter();
  }

  _createClass(DebuggerHandler, [{
    key: 'onSessionEnd',
    value: function onSessionEnd(callback) {
      log('onSessionEnd');
      this._emitter.on(SESSION_END_EVENT, callback);
    }
  }, {
    key: 'handleMethod',
    value: _asyncToGenerator(function* (id, method, params) {

      switch (method) {

        // TODO: Add Console (aka logging) support
        case 'enable':
          yield this._debuggerEnable(id);
          break;

        case 'pause':
          yield this._sendBreakCommand(id);
          break;

        case 'stepInto':
          yield this._sendContinuationCommand(COMMAND_STEP_INTO);
          break;

        case 'stepOut':
          yield this._sendContinuationCommand(COMMAND_STEP_OUT);
          break;

        case 'stepOver':
          yield this._sendContinuationCommand(COMMAND_STEP_OVER);
          break;

        case 'resume':
          yield this._sendContinuationCommand(COMMAND_RUN);
          break;

        case 'setPauseOnExceptions':
          this.replyWithError(id, 'Not implemented');
          break;

        case 'setAsyncCallStackDepth':
        case 'skipStackFrames':
          this.replyWithError(id, 'Not implemented');
          break;

        case 'getScriptSource':
          // TODO: Handle file read errors.
          // TODO: Handle non-file scriptIds
          this.replyToCommand(id, { scriptSource: yield this._files.getFileSource(params.scriptId) });
          break;

        case 'setBreakpointByUrl':
          yield this._setBreakpointByUrl(id, params);
          break;

        case 'removeBreakpoint':
          yield this._removeBreakpoint(id, params);
          break;

        default:
          this.unknownMethod(id, method, params);
          break;
      }
    })
  }, {
    key: '_setBreakpointByUrl',
    value: _asyncToGenerator(function* (id, params) {
      var lineNumber = params.lineNumber;
      var url = params.url;
      var columnNumber = params.columnNumber;
      var condition = params.condition;

      if (!url || condition !== '' || columnNumber !== 0) {
        this.replyWithError(id, 'Invalid arguments to Debugger.setBreakpointByUrl: ' + JSON.stringify(params));
        return;
      }

      try {
        var path = uriToPath(url);
        this._files.registerFile(path);
        var breakpointId = yield this._socket.setBreakpoint(path, lineNumber + 1);
        this.replyToCommand(id, {
          breakpointId: breakpointId,
          locations: [{
            lineNumber: lineNumber,
            scriptId: path
          }] });
      } catch (e) {
        this.replyWithError(id, e.message);
      }
    })
  }, {
    key: '_removeBreakpoint',
    value: _asyncToGenerator(function* (id, params) {
      var breakpointId = params.breakpointId;

      yield this._socket.removeBreakpoint(breakpointId);
      this.replyToCommand(id, { id: breakpointId });
    })
  }, {
    key: '_debuggerEnable',
    value: _asyncToGenerator(function* (id) {
      yield this._sendStatus((yield this._getStatus()));
      this.replyToCommand(id, {});
    })
  }, {
    key: '_getStackFrames',
    value: _asyncToGenerator(function* () {
      var _this = this;

      var frames = yield this._socket.getStackFrames();
      return yield Promise.all(frames.stack.map(function (frame, frameIndex) {
        return _this._convertFrame(frame, frameIndex);
      }));
    })
  }, {
    key: '_convertFrame',
    value: _asyncToGenerator(function* (frame, frameIndex) {
      log('Converting frame: ' + JSON.stringify(frame));
      try {
        var _require4 = require('./frame');

        var idOfFrame = _require4.idOfFrame;
        var functionOfFrame = _require4.functionOfFrame;
        var fileOfFrame = _require4.fileOfFrame;
        var locationOfFrame = _require4.locationOfFrame;

        this._files.registerFile(fileOfFrame(frame));
        return {
          callFrameId: idOfFrame(frame),
          functionName: functionOfFrame(frame),
          location: locationOfFrame(frame),
          scopeChain: yield this._dataCache.getScopesForFrame(frameIndex)
        };
      } catch (e) {
        logErrorAndThrow('Exception converting frame: ' + e + ' ' + e.stack);
      }
    })

    // Returns one of:
    //  starting, stopping, stopped, running, break
  }, {
    key: '_getStatus',
    value: function _getStatus() {
      return this._socket.getStatus();
    }

    // Continuation commands get a response, but that response
    // is a status message which occurs after execution stops.
  }, {
    key: '_sendContinuationCommand',
    value: _asyncToGenerator(function* (command) {
      log('Sending continuation command: ' + command);
      this._dataCache.disable();
      var statusPromise = this._socket.sendContinuationCommand(command);
      this.sendMethod('Debugger.resumed');
      yield this._sendStatus((yield statusPromise));
    })
  }, {
    key: '_sendBreakCommand',
    value: _asyncToGenerator(function* (id) {
      var response = yield this._socket.sendBreakCommand();
      if (!response) {
        this.replyWithError(id, 'Unable to break');
      }
    })
  }, {
    key: '_sendStatus',
    value: _asyncToGenerator(function* (status) {
      log('Sending status: ' + status);
      switch (status) {
        case STATUS_STARTING:
          // Starting status has no stack.
          // step before reporting initial status to get to the first instruction.
          yield this._sendContinuationCommand(COMMAND_STEP_INTO);
          break;
        case STATUS_BREAK:
          this._dataCache.enable();
          yield this._sendPausedMessage();
          break;
        case STATUS_RUNNING:
          logErrorAndThrow('Unexpected running status');
          break;
        case STATUS_STOPPING:
          // TODO: May want to enable post-mortem features?
          yield this._sendContinuationCommand(COMMAND_STOP);
          break;
        case STATUS_STOPPED:
          this.sendMethod('Debugger.paused', {
            callFrames: [],
            reason: 'breakpoint', // TODO: better reason?
            data: {}
          });
          this._endSession();
          break;
        default:
          logErrorAndThrow('Unexpected status: ' + status);
      }
    })

    // May only call when in paused state.
  }, {
    key: '_sendPausedMessage',
    value: _asyncToGenerator(function* () {
      this.sendMethod('Debugger.paused', {
        callFrames: yield this._getStackFrames(),
        reason: 'breakpoint', // TODO: better reason?
        data: {}
      });
    })
  }, {
    key: '_endSession',
    value: function _endSession() {
      log('DebuggerHandler: Ending session');
      this._emitter.emit(SESSION_END_EVENT);
    }
  }]);

  return DebuggerHandler;
})(Handler);

module.exports = DebuggerHandler;
//# sourceMappingURL=data:application/json;base64,
