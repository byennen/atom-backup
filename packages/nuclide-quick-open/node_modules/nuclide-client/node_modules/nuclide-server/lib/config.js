
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */
/**
  * Currently we have two different ways to config a service in service-config.json:
  *   1. `{"useServiceFramework": false, "path": "path/to/service/file"}`, a old fashioned way
  *      to config a service and it is deprecated.
  *   2. `{"useServiceFramework": true,
  *        "definition": "path/to/service/defintion",
  *        "implementation": "path/to/local/implementation"}, use service framework to config
  *      a service definition and a local implementation.
  */

var fs = require('fs-plus');
var path = require('path');

var PACKAGE_ROOT = path.resolve(__dirname, '..');

// Custom services path is defined in "package.json", which is always in the root, so resolve
// the path to the custom services config from the root as well.
var CUSTOM_SERVICES_CONFIG_PATH = path.resolve(PACKAGE_ROOT, require(path.resolve(PACKAGE_ROOT, 'package.json'))['nuclide']['customServices']);
var SERVICE_FRAMEWORK_EVENT_CHANNEL = 'service_framework_event';
var SERVICE_FRAMEWORK_RPC_CHANNEL = 'service_framework_rpc';
var SERVICE_FRAMEWORK_RPC_TIMEOUT_MS = 60 * 1000;
var SERVICES_CONFIG_PATH = path.resolve(PACKAGE_ROOT, 'services-config.json');

function loadConfigs() {
  var configList = require(SERVICES_CONFIG_PATH);

  if (fs.isFileSync(CUSTOM_SERVICES_CONFIG_PATH)) {
    var customConfigs = require(CUSTOM_SERVICES_CONFIG_PATH);
    configList = configList.concat(customConfigs);
  }

  return configList;
}

function loadConfigsOfServiceWithServiceFramework() {
  return loadConfigs().filter(function (config) {
    return config.useServiceFramework;
  }).map(function (config) {
    return {
      name: config.name,
      definition: _resolveServiceConfigPath(config.definition),
      implementation: _resolveServiceConfigPath(config.implementation)
    };
  });
}

function loadConfigsOfServiceWithoutServiceFramework() {
  return loadConfigs().filter(function (config) {
    return !config.useServiceFramework;
  }).map(function (config) {
    return _resolveServiceConfigPath(config.path);
  });
}

/**
  * Resolve service path defined in service-config.json to absolute path. The service path could
  * be in one of following forms:
  *   1. A path relative to the folder contains `service-config.json`.
  *   2. An absolute path.
  *   3. A path in form of `$dependency_package/path/to/service`. For example,
  *      'nuclide-commons/lib/array.js'.
  */
function _resolveServiceConfigPath(serviceConfigPath) {
  try {
    return require.resolve(serviceConfigPath);
  } catch (e) {
    return path.resolve(path.dirname(SERVICES_CONFIG_PATH), serviceConfigPath);
  }
}

module.exports = {
  loadConfigsOfServiceWithoutServiceFramework: loadConfigsOfServiceWithoutServiceFramework,
  loadConfigsOfServiceWithServiceFramework: loadConfigsOfServiceWithServiceFramework,
  SERVICE_FRAMEWORK_EVENT_CHANNEL: SERVICE_FRAMEWORK_EVENT_CHANNEL,
  SERVICE_FRAMEWORK_RPC_CHANNEL: SERVICE_FRAMEWORK_RPC_CHANNEL,
  SERVICE_FRAMEWORK_RPC_TIMEOUT_MS: SERVICE_FRAMEWORK_RPC_TIMEOUT_MS
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXNlcnZlci9saWIvY29uZmlnLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFdBQVcsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW9CWixJQUFJLEVBQUUsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDNUIsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDOztBQUUzQixJQUFJLFlBQVksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQzs7OztBQUlqRCxJQUFJLDJCQUEyQixHQUFHLElBQUksQ0FBQyxPQUFPLENBQzVDLFlBQVksRUFDWixPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUNqRixDQUFDO0FBQ0YsSUFBSSwrQkFBK0IsR0FBRyx5QkFBeUIsQ0FBQztBQUNoRSxJQUFJLDZCQUE2QixHQUFHLHVCQUF1QixDQUFDO0FBQzVELElBQUksZ0NBQWdDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQztBQUNqRCxJQUFJLG9CQUFvQixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLHNCQUFzQixDQUFDLENBQUM7O0FBRTlFLFNBQVMsV0FBVyxHQUFlO0FBQ2pDLE1BQUksVUFBVSxHQUFHLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDOztBQUUvQyxNQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsMkJBQTJCLENBQUMsRUFBRTtBQUM5QyxRQUFJLGFBQWEsR0FBRyxPQUFPLENBQUMsMkJBQTJCLENBQUMsQ0FBQztBQUN6RCxjQUFVLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztHQUMvQzs7QUFFRCxTQUFPLFVBQVUsQ0FBQztDQUNuQjs7QUFFRCxTQUFTLHdDQUF3QyxHQUFlO0FBQzlELFNBQU8sV0FBVyxFQUFFLENBQ2pCLE1BQU0sQ0FBQyxVQUFBLE1BQU07V0FBSSxNQUFNLENBQUMsbUJBQW1CO0dBQUEsQ0FBQyxDQUM1QyxHQUFHLENBQUMsVUFBQSxNQUFNLEVBQUk7QUFDYixXQUFPO0FBQ0wsVUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJO0FBQ2pCLGdCQUFVLEVBQUUseUJBQXlCLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQztBQUN4RCxvQkFBYyxFQUFFLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUM7S0FDakUsQ0FBQztHQUNILENBQUMsQ0FBQztDQUNOOztBQUVELFNBQVMsMkNBQTJDLEdBQWtCO0FBQ3BFLFNBQU8sV0FBVyxFQUFFLENBQ2pCLE1BQU0sQ0FBQyxVQUFBLE1BQU07V0FBSSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUI7R0FBQSxDQUFDLENBQzdDLEdBQUcsQ0FBQyxVQUFBLE1BQU07V0FBSSx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO0dBQUEsQ0FBQyxDQUFDO0NBQzFEOzs7Ozs7Ozs7O0FBVUQsU0FBUyx5QkFBeUIsQ0FBQyxpQkFBeUIsRUFBVTtBQUNwRSxNQUFJO0FBQ0YsV0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUM7R0FDM0MsQ0FBQyxPQUFPLENBQUMsRUFBRTtBQUNWLFdBQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFDLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztHQUM1RTtDQUNGOztBQUVELE1BQU0sQ0FBQyxPQUFPLEdBQUc7QUFDZiw2Q0FBMkMsRUFBM0MsMkNBQTJDO0FBQzNDLDBDQUF3QyxFQUF4Qyx3Q0FBd0M7QUFDeEMsaUNBQStCLEVBQS9CLCtCQUErQjtBQUMvQiwrQkFBNkIsRUFBN0IsNkJBQTZCO0FBQzdCLGtDQUFnQyxFQUFoQyxnQ0FBZ0M7Q0FDakMsQ0FBQyIsImZpbGUiOiIvdmFyL2ZvbGRlcnMveGYvcnNwaDRfYzU3MzE1cnM1N3h4c2Rza3J4bnYzNnQwL1QvdG1wZW1tMkh1cHVibGlzaF9wYWNrYWdlcy9ucG0vbnVjbGlkZS1zZXJ2ZXIvbGliL2NvbmZpZy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4vKipcbiAgKiBDdXJyZW50bHkgd2UgaGF2ZSB0d28gZGlmZmVyZW50IHdheXMgdG8gY29uZmlnIGEgc2VydmljZSBpbiBzZXJ2aWNlLWNvbmZpZy5qc29uOlxuICAqICAgMS4gYHtcInVzZVNlcnZpY2VGcmFtZXdvcmtcIjogZmFsc2UsIFwicGF0aFwiOiBcInBhdGgvdG8vc2VydmljZS9maWxlXCJ9YCwgYSBvbGQgZmFzaGlvbmVkIHdheVxuICAqICAgICAgdG8gY29uZmlnIGEgc2VydmljZSBhbmQgaXQgaXMgZGVwcmVjYXRlZC5cbiAgKiAgIDIuIGB7XCJ1c2VTZXJ2aWNlRnJhbWV3b3JrXCI6IHRydWUsXG4gICogICAgICAgIFwiZGVmaW5pdGlvblwiOiBcInBhdGgvdG8vc2VydmljZS9kZWZpbnRpb25cIixcbiAgKiAgICAgICAgXCJpbXBsZW1lbnRhdGlvblwiOiBcInBhdGgvdG8vbG9jYWwvaW1wbGVtZW50YXRpb25cIn0sIHVzZSBzZXJ2aWNlIGZyYW1ld29yayB0byBjb25maWdcbiAgKiAgICAgIGEgc2VydmljZSBkZWZpbml0aW9uIGFuZCBhIGxvY2FsIGltcGxlbWVudGF0aW9uLlxuICAqL1xuXG52YXIgZnMgPSByZXF1aXJlKCdmcy1wbHVzJyk7XG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxudmFyIFBBQ0tBR0VfUk9PVCA9IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLicpO1xuXG4vLyBDdXN0b20gc2VydmljZXMgcGF0aCBpcyBkZWZpbmVkIGluIFwicGFja2FnZS5qc29uXCIsIHdoaWNoIGlzIGFsd2F5cyBpbiB0aGUgcm9vdCwgc28gcmVzb2x2ZVxuLy8gdGhlIHBhdGggdG8gdGhlIGN1c3RvbSBzZXJ2aWNlcyBjb25maWcgZnJvbSB0aGUgcm9vdCBhcyB3ZWxsLlxudmFyIENVU1RPTV9TRVJWSUNFU19DT05GSUdfUEFUSCA9IHBhdGgucmVzb2x2ZShcbiAgUEFDS0FHRV9ST09ULFxuICByZXF1aXJlKHBhdGgucmVzb2x2ZShQQUNLQUdFX1JPT1QsICdwYWNrYWdlLmpzb24nKSlbJ251Y2xpZGUnXVsnY3VzdG9tU2VydmljZXMnXVxuKTtcbnZhciBTRVJWSUNFX0ZSQU1FV09SS19FVkVOVF9DSEFOTkVMID0gJ3NlcnZpY2VfZnJhbWV3b3JrX2V2ZW50JztcbnZhciBTRVJWSUNFX0ZSQU1FV09SS19SUENfQ0hBTk5FTCA9ICdzZXJ2aWNlX2ZyYW1ld29ya19ycGMnO1xudmFyIFNFUlZJQ0VfRlJBTUVXT1JLX1JQQ19USU1FT1VUX01TID0gNjAgKiAxMDAwO1xudmFyIFNFUlZJQ0VTX0NPTkZJR19QQVRIID0gcGF0aC5yZXNvbHZlKFBBQ0tBR0VfUk9PVCwgJ3NlcnZpY2VzLWNvbmZpZy5qc29uJyk7XG5cbmZ1bmN0aW9uIGxvYWRDb25maWdzKCk6IEFycmF5PGFueT4ge1xuICB2YXIgY29uZmlnTGlzdCA9IHJlcXVpcmUoU0VSVklDRVNfQ09ORklHX1BBVEgpO1xuXG4gIGlmIChmcy5pc0ZpbGVTeW5jKENVU1RPTV9TRVJWSUNFU19DT05GSUdfUEFUSCkpIHtcbiAgICB2YXIgY3VzdG9tQ29uZmlncyA9IHJlcXVpcmUoQ1VTVE9NX1NFUlZJQ0VTX0NPTkZJR19QQVRIKTtcbiAgICBjb25maWdMaXN0ID0gY29uZmlnTGlzdC5jb25jYXQoY3VzdG9tQ29uZmlncyk7XG4gIH1cblxuICByZXR1cm4gY29uZmlnTGlzdDtcbn1cblxuZnVuY3Rpb24gbG9hZENvbmZpZ3NPZlNlcnZpY2VXaXRoU2VydmljZUZyYW1ld29yaygpOiBBcnJheTxhbnk+IHtcbiAgcmV0dXJuIGxvYWRDb25maWdzKClcbiAgICAuZmlsdGVyKGNvbmZpZyA9PiBjb25maWcudXNlU2VydmljZUZyYW1ld29yaylcbiAgICAubWFwKGNvbmZpZyA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBjb25maWcubmFtZSxcbiAgICAgICAgZGVmaW5pdGlvbjogX3Jlc29sdmVTZXJ2aWNlQ29uZmlnUGF0aChjb25maWcuZGVmaW5pdGlvbiksXG4gICAgICAgIGltcGxlbWVudGF0aW9uOiBfcmVzb2x2ZVNlcnZpY2VDb25maWdQYXRoKGNvbmZpZy5pbXBsZW1lbnRhdGlvbiksXG4gICAgICB9O1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBsb2FkQ29uZmlnc09mU2VydmljZVdpdGhvdXRTZXJ2aWNlRnJhbWV3b3JrKCk6IEFycmF5PHN0cmluZz4ge1xuICByZXR1cm4gbG9hZENvbmZpZ3MoKVxuICAgIC5maWx0ZXIoY29uZmlnID0+ICFjb25maWcudXNlU2VydmljZUZyYW1ld29yaylcbiAgICAubWFwKGNvbmZpZyA9PiBfcmVzb2x2ZVNlcnZpY2VDb25maWdQYXRoKGNvbmZpZy5wYXRoKSk7XG59XG5cbi8qKlxuICAqIFJlc29sdmUgc2VydmljZSBwYXRoIGRlZmluZWQgaW4gc2VydmljZS1jb25maWcuanNvbiB0byBhYnNvbHV0ZSBwYXRoLiBUaGUgc2VydmljZSBwYXRoIGNvdWxkXG4gICogYmUgaW4gb25lIG9mIGZvbGxvd2luZyBmb3JtczpcbiAgKiAgIDEuIEEgcGF0aCByZWxhdGl2ZSB0byB0aGUgZm9sZGVyIGNvbnRhaW5zIGBzZXJ2aWNlLWNvbmZpZy5qc29uYC5cbiAgKiAgIDIuIEFuIGFic29sdXRlIHBhdGguXG4gICogICAzLiBBIHBhdGggaW4gZm9ybSBvZiBgJGRlcGVuZGVuY3lfcGFja2FnZS9wYXRoL3RvL3NlcnZpY2VgLiBGb3IgZXhhbXBsZSxcbiAgKiAgICAgICdudWNsaWRlLWNvbW1vbnMvbGliL2FycmF5LmpzJy5cbiAgKi9cbmZ1bmN0aW9uIF9yZXNvbHZlU2VydmljZUNvbmZpZ1BhdGgoc2VydmljZUNvbmZpZ1BhdGg6IHN0cmluZyk6IHN0cmluZyB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHJlcXVpcmUucmVzb2x2ZShzZXJ2aWNlQ29uZmlnUGF0aCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gcGF0aC5yZXNvbHZlKHBhdGguZGlybmFtZShTRVJWSUNFU19DT05GSUdfUEFUSCksIHNlcnZpY2VDb25maWdQYXRoKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgbG9hZENvbmZpZ3NPZlNlcnZpY2VXaXRob3V0U2VydmljZUZyYW1ld29yayxcbiAgbG9hZENvbmZpZ3NPZlNlcnZpY2VXaXRoU2VydmljZUZyYW1ld29yayxcbiAgU0VSVklDRV9GUkFNRVdPUktfRVZFTlRfQ0hBTk5FTCxcbiAgU0VSVklDRV9GUkFNRVdPUktfUlBDX0NIQU5ORUwsXG4gIFNFUlZJQ0VfRlJBTUVXT1JLX1JQQ19USU1FT1VUX01TLFxufTtcbiJdfQ==
