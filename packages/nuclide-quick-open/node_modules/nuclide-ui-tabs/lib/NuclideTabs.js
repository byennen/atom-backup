
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react-for-atom');

var PropTypes = React.PropTypes;

var _require = require('nuclide-commons');

var array = _require.array;

var cx = require('react-classset');

var NuclideTabs = React.createClass({
  displayName: 'NuclideTabs',

  propTypes: {
    tabs: PropTypes.arrayOf(PropTypes.shape({
      name: PropTypes.string.isRequired,
      tabContent: PropTypes.node.isRequired
    })).isRequired,
    activeTabName: PropTypes.string.isRequired,
    onActiveTabChange: PropTypes.func,
    triggeringEvent: PropTypes.string.isRequired
  },

  getDefaultProps: function getDefaultProps() {
    return {
      triggeringEvent: 'onClick'
    };
  },

  _handleTabChange: function _handleTabChange(selectedTabName) {
    if (typeof this.props.onActiveTabChange === 'function') {
      this.props.onActiveTabChange(array.find(this.props.tabs, function (tab) {
        return tab.name === selectedTabName;
      }));
    }
  },

  _renderTabMenu: function _renderTabMenu() {
    var _this = this;

    var tabs = this.props.tabs.map(function (tab) {
      var handler = {};
      handler[_this.props.triggeringEvent] = _this._handleTabChange.bind(_this, tab.name);
      return React.createElement(
        'li',
        _extends({
          className: cx({
            tab: true,
            active: _this.props.activeTabName === tab.name
          }),
          key: tab.name
        }, handler),
        React.createElement(
          'div',
          { className: 'title' },
          tab.tabContent
        )
      );
    });
    return React.createElement(
      'ul',
      { className: 'tab-bar list-inline inset-panel' },
      tabs
    );
  },

  render: function render() {
    return React.createElement(
      'div',
      { className: 'nuclide-tabs' },
      this._renderTabMenu()
    );
  }
});

module.exports = NuclideTabs;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXVpLXRhYnMvbGliL051Y2xpZGVUYWJzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFdBQVcsQ0FBQzs7Ozs7Ozs7Ozs7O0FBV1osSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUM7O0lBRWpDLFNBQVMsR0FBSSxLQUFLLENBQWxCLFNBQVM7O2VBSVYsT0FBTyxDQUFDLGlCQUFpQixDQUFDOztJQUQ1QixLQUFLLFlBQUwsS0FBSzs7QUFFUCxJQUFJLEVBQUUsR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQzs7QUFFbkMsSUFBSSxXQUFXLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQzs7O0FBRWxDLFdBQVMsRUFBRTtBQUNULFFBQUksRUFBRSxTQUFTLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7QUFDdEMsVUFBSSxFQUFFLFNBQVMsQ0FBQyxNQUFNLENBQUMsVUFBVTtBQUNqQyxnQkFBVSxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVTtLQUN0QyxDQUFDLENBQUMsQ0FBQyxVQUFVO0FBQ2QsaUJBQWEsRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLFVBQVU7QUFDMUMscUJBQWlCLEVBQUUsU0FBUyxDQUFDLElBQUk7QUFDakMsbUJBQWUsRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLFVBQVU7R0FDN0M7O0FBRUQsaUJBQWUsRUFBQSwyQkFBUTtBQUNyQixXQUFPO0FBQ0wscUJBQWUsRUFBRSxTQUFTO0tBQzNCLENBQUM7R0FDSDs7QUFFRCxrQkFBZ0IsRUFBQSwwQkFBQyxlQUF1QixFQUFFO0FBQ3hDLFFBQUksT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLGlCQUFpQixLQUFLLFVBQVUsRUFBRTtBQUN0RCxVQUFJLENBQUMsS0FBSyxDQUFDLGlCQUFpQixDQUMxQixLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFVBQUEsR0FBRztlQUFJLEdBQUcsQ0FBQyxJQUFJLEtBQUssZUFBZTtPQUFBLENBQUMsQ0FDakUsQ0FBQztLQUNIO0dBQ0Y7O0FBRUQsZ0JBQWMsRUFBQSwwQkFBaUI7OztBQUM3QixRQUFJLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBQSxHQUFHLEVBQUk7QUFDcEMsVUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDO0FBQ2pCLGFBQU8sQ0FBQyxNQUFLLEtBQUssQ0FBQyxlQUFlLENBQUMsR0FBRyxNQUFLLGdCQUFnQixDQUFDLElBQUksUUFBTyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakYsYUFDRTs7O0FBQ0UsbUJBQVMsRUFBRSxFQUFFLENBQUM7QUFDWixlQUFHLEVBQUUsSUFBSTtBQUNULGtCQUFNLEVBQUUsTUFBSyxLQUFLLENBQUMsYUFBYSxLQUFLLEdBQUcsQ0FBQyxJQUFJO1dBQzlDLENBQUMsQUFBQztBQUNILGFBQUcsRUFBRSxHQUFHLENBQUMsSUFBSSxBQUFDO1dBQ1YsT0FBTztRQUNYOztZQUFLLFNBQVMsRUFBQyxPQUFPO1VBQ25CLEdBQUcsQ0FBQyxVQUFVO1NBQ1g7T0FDSCxDQUNMO0tBQ0gsQ0FBQyxDQUFDO0FBQ0gsV0FDRTs7UUFBSSxTQUFTLEVBQUMsaUNBQWlDO01BQzVDLElBQUk7S0FDRixDQUNMO0dBQ0g7O0FBRUQsUUFBTSxFQUFBLGtCQUFpQjtBQUNyQixXQUNFOztRQUFLLFNBQVMsRUFBQyxjQUFjO01BQzFCLElBQUksQ0FBQyxjQUFjLEVBQUU7S0FDbEIsQ0FDUDtHQUNGO0NBQ0YsQ0FBQyxDQUFDOztBQUVILE1BQU0sQ0FBQyxPQUFPLEdBQUcsV0FBVyxDQUFDIiwiZmlsZSI6Ii92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXVpLXRhYnMvbGliL051Y2xpZGVUYWJzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCc7XG4vKiBAZmxvdyAqL1xuXG4vKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpblxuICogdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QtZm9yLWF0b20nKTtcblxudmFyIHtQcm9wVHlwZXN9ID0gUmVhY3Q7XG5cbnZhciB7XG4gIGFycmF5XG59ID0gcmVxdWlyZSgnbnVjbGlkZS1jb21tb25zJyk7XG52YXIgY3ggPSByZXF1aXJlKCdyZWFjdC1jbGFzc3NldCcpO1xuXG52YXIgTnVjbGlkZVRhYnMgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgdGFiczogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgIHRhYkNvbnRlbnQ6IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG4gICAgfSkpLmlzUmVxdWlyZWQsXG4gICAgYWN0aXZlVGFiTmFtZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIG9uQWN0aXZlVGFiQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICB0cmlnZ2VyaW5nRXZlbnQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHMoKTogYW55IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHJpZ2dlcmluZ0V2ZW50OiAnb25DbGljaycsXG4gICAgfTtcbiAgfSxcblxuICBfaGFuZGxlVGFiQ2hhbmdlKHNlbGVjdGVkVGFiTmFtZTogc3RyaW5nKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLnByb3BzLm9uQWN0aXZlVGFiQ2hhbmdlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLnByb3BzLm9uQWN0aXZlVGFiQ2hhbmdlKFxuICAgICAgICBhcnJheS5maW5kKHRoaXMucHJvcHMudGFicywgdGFiID0+IHRhYi5uYW1lID09PSBzZWxlY3RlZFRhYk5hbWUpXG4gICAgICApO1xuICAgIH1cbiAgfSxcblxuICBfcmVuZGVyVGFiTWVudSgpOiBSZWFjdEVsZW1lbnQge1xuICAgIHZhciB0YWJzID0gdGhpcy5wcm9wcy50YWJzLm1hcCh0YWIgPT4ge1xuICAgICAgdmFyIGhhbmRsZXIgPSB7fTtcbiAgICAgIGhhbmRsZXJbdGhpcy5wcm9wcy50cmlnZ2VyaW5nRXZlbnRdID0gdGhpcy5faGFuZGxlVGFiQ2hhbmdlLmJpbmQodGhpcywgdGFiLm5hbWUpO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGxpXG4gICAgICAgICAgY2xhc3NOYW1lPXtjeCh7XG4gICAgICAgICAgICB0YWI6IHRydWUsXG4gICAgICAgICAgICBhY3RpdmU6IHRoaXMucHJvcHMuYWN0aXZlVGFiTmFtZSA9PT0gdGFiLm5hbWUsXG4gICAgICAgICAgfSl9XG4gICAgICAgICAga2V5PXt0YWIubmFtZX1cbiAgICAgICAgICB7Li4uaGFuZGxlcn0+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0aXRsZVwiPlxuICAgICAgICAgICAge3RhYi50YWJDb250ZW50fVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2xpPlxuICAgICAgKTtcbiAgICB9KTtcbiAgICByZXR1cm4gKFxuICAgICAgPHVsIGNsYXNzTmFtZT1cInRhYi1iYXIgbGlzdC1pbmxpbmUgaW5zZXQtcGFuZWxcIj5cbiAgICAgICAge3RhYnN9XG4gICAgICA8L3VsPlxuICAgICk7XG4gIH0sXG5cbiAgcmVuZGVyKCk6IFJlYWN0RWxlbWVudCB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwibnVjbGlkZS10YWJzXCI+XG4gICAgICAgIHt0aGlzLl9yZW5kZXJUYWJNZW51KCl9XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH0sXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBOdWNsaWRlVGFicztcbiJdfQ==
