
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _require = require('atom');

var CompositeDisposable = _require.CompositeDisposable;

var React = require('react-for-atom');

var PropTypes = React.PropTypes;

/**
 * An input field rendered as an <atom-text-editor mini />.
 */
var AtomInput = React.createClass({
  displayName: 'AtomInput',

  propTypes: {
    disabled: PropTypes.bool,
    initialValue: PropTypes.string.isRequired,
    placeholderText: PropTypes.string,
    onFocus: PropTypes.func,
    onClick: PropTypes.func,
    onBlur: PropTypes.func,
    size: PropTypes.oneOf(['xs', 'sm', 'lg'])
  },

  getDefaultProps: function getDefaultProps() {
    return {
      disabled: false,
      initialValue: '',
      placeholderText: null,
      onClick: function onClick() {},
      onFocus: function onFocus() {},
      onBlur: function onBlur() {}
    };
  },

  getInitialState: function getInitialState() {
    return {
      value: this.props.initialValue
    };
  },

  componentDidMount: function componentDidMount() {
    var _this = this;

    this._disposables = new CompositeDisposable();

    // There does not appear to be any sort of infinite loop where calling
    // setState({value}) in response to onDidChange() causes another change
    // event.
    var textEditor = this.getTextEditor();
    this._disposables.add(textEditor.onDidChange(function () {
      _this.setState({ value: textEditor.getText() });
    }));
    var placeholderText = this.props.placeholderText;
    if (placeholderText !== null) {
      textEditor.setPlaceholderText(placeholderText);
    }
    if (this.props.disabled) {
      this._updateDisabledState(true);
    }
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (nextProps.disabled !== this.props.disabled) {
      this._updateDisabledState(nextProps.disabled);
    }
  },

  componentWillUnmount: function componentWillUnmount() {
    // Note that destroy() is not part of TextEditor's public API.
    this.getTextEditor().destroy();

    if (this._disposables) {
      this._disposables.dispose();
      this._disposables = null;
    }
  },

  _updateDisabledState: function _updateDisabledState(isDisabled) {
    // Hack to set TextEditor to read-only mode, per https://github.com/atom/atom/issues/6880
    if (isDisabled) {
      this._getTextEditorElement().removeAttribute('tabindex');
    } else {
      this._getTextEditorElement().setAttribute('tabindex', '-1');
    }
  },

  render: function render() {
    var className;
    if (this.props.size) {
      className = 'atom-text-editor-' + this.props.size;
    }

    return React.createElement(
      'atom-text-editor',
      {
        className: className,
        mini: true,
        onClick: this.props.onClick,
        onFocus: this.props.onFocus,
        onBlur: this.props.onBlur },
      this.state.value
    );
  },

  getText: function getText() {
    return this.state.value;
  },

  setText: function setText(text) {
    this.getTextEditor().setText(text);
  },

  getTextEditor: function getTextEditor() {
    return this._getTextEditorElement().getModel();
  },

  onDidChange: function onDidChange(callback) {
    return this.getTextEditor().onDidChange(callback);
  },

  _getTextEditorElement: function _getTextEditorElement() {
    return React.findDOMNode(this);
  },

  focus: function focus() {
    this.getTextEditor().moveToEndOfLine();
    this._getTextEditorElement().focus();
  }
});

module.exports = AtomInput;
//# sourceMappingURL=data:application/json;base64,
