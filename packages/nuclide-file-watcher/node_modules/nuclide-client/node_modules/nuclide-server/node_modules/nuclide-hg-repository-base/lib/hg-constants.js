
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */
/* @providesModule HgConstants */

/**
 * These are status codes used by Mercurial's output.
 * Documented in http://selenic.com/hg/help/status.
 */
Object.defineProperty(exports, '__esModule', {
  value: true
});

var _StatusCodeIdToNumber;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var StatusCodeId = {
  ADDED: 'A',
  CLEAN: 'C',
  IGNORED: 'I',
  MODIFIED: 'M',
  MISSING: '!', // (deleted by non-hg command, but still tracked)
  REMOVED: 'R',
  UNTRACKED: '?'
};

/**
 * Internally, the HgRepository uses the string StatusCodeId to do bookkeeping.
 * However, GitRepository uses numbers to represent its statuses, and returns
 * statuses as numbers. In order to keep our status 'types' the same, we map the
 * string StatusCodeId to numbers.
 * The numbers themselves should not matter; they are meant to be passed
 * to ::isStatusNew/::isStatusModified to be interpreted.
 */

var StatusCodeNumber = {
  ADDED: 1,
  CLEAN: 2,
  IGNORED: 3,
  MODIFIED: 4,
  MISSING: 5,
  REMOVED: 6,
  UNTRACKED: 7
};

var StatusCodeIdToNumber = (_StatusCodeIdToNumber = {}, _defineProperty(_StatusCodeIdToNumber, StatusCodeId.ADDED, StatusCodeNumber.ADDED), _defineProperty(_StatusCodeIdToNumber, StatusCodeId.CLEAN, StatusCodeNumber.CLEAN), _defineProperty(_StatusCodeIdToNumber, StatusCodeId.IGNORED, StatusCodeNumber.IGNORED), _defineProperty(_StatusCodeIdToNumber, StatusCodeId.MODIFIED, StatusCodeNumber.MODIFIED), _defineProperty(_StatusCodeIdToNumber, StatusCodeId.MISSING, StatusCodeNumber.MISSING), _defineProperty(_StatusCodeIdToNumber, StatusCodeId.REMOVED, StatusCodeNumber.REMOVED), _defineProperty(_StatusCodeIdToNumber, StatusCodeId.UNTRACKED, StatusCodeNumber.UNTRACKED), _StatusCodeIdToNumber);

var HgStatusOption = {
  ONLY_NON_IGNORED: 1, // only the output of `hg status`
  ONLY_IGNORED: 2, // only the output of `hg status --ignored`
  ALL_STATUSES: 3 };

// the output of `hg status --all`

module.exports = {
  HgStatusOption: HgStatusOption,
  StatusCodeId: StatusCodeId,
  StatusCodeIdToNumber: StatusCodeIdToNumber,
  StatusCodeNumber: StatusCodeNumber
};

/** The origin URL of this repository. */

/** The working directory of this repository. */

/** The root directory that is opened in Atom, which this Repository serves. **/
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWhnLXJlcG9zaXRvcnktYmFzZS9saWIvaGctY29uc3RhbnRzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFdBQVcsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE0QlosSUFBSSxZQUEyQyxHQUFHO0FBQ2hELE9BQUssRUFBRSxHQUFHO0FBQ1YsT0FBSyxFQUFFLEdBQUc7QUFDVixTQUFPLEVBQUUsR0FBRztBQUNaLFVBQVEsRUFBRSxHQUFHO0FBQ2IsU0FBTyxFQUFFLEdBQUc7QUFDWixTQUFPLEVBQUUsR0FBRztBQUNaLFdBQVMsRUFBRSxHQUFHO0NBQ2YsQ0FBQzs7Ozs7Ozs7Ozs7QUFXRixJQUFJLGdCQUFtRCxHQUFHO0FBQ3hELE9BQUssRUFBRSxDQUFDO0FBQ1IsT0FBSyxFQUFFLENBQUM7QUFDUixTQUFPLEVBQUUsQ0FBQztBQUNWLFVBQVEsRUFBRSxDQUFDO0FBQ1gsU0FBTyxFQUFFLENBQUM7QUFDVixTQUFPLEVBQUUsQ0FBQztBQUNWLFdBQVMsRUFBRSxDQUFDO0NBQ2IsQ0FBQzs7QUFFRixJQUFJLG9CQUE2RCx1RUFDOUQsWUFBWSxDQUFDLEtBQUssRUFBRyxnQkFBZ0IsQ0FBQyxLQUFLLDBDQUMzQyxZQUFZLENBQUMsS0FBSyxFQUFHLGdCQUFnQixDQUFDLEtBQUssMENBQzNDLFlBQVksQ0FBQyxPQUFPLEVBQUcsZ0JBQWdCLENBQUMsT0FBTywwQ0FDL0MsWUFBWSxDQUFDLFFBQVEsRUFBRyxnQkFBZ0IsQ0FBQyxRQUFRLDBDQUNqRCxZQUFZLENBQUMsT0FBTyxFQUFHLGdCQUFnQixDQUFDLE9BQU8sMENBQy9DLFlBQVksQ0FBQyxPQUFPLEVBQUcsZ0JBQWdCLENBQUMsT0FBTywwQ0FDL0MsWUFBWSxDQUFDLFNBQVMsRUFBRyxnQkFBZ0IsQ0FBQyxTQUFTLHlCQUNyRCxDQUFDOztBQUdGLElBQUksY0FBK0MsR0FBRztBQUNwRCxrQkFBZ0IsRUFBRSxDQUFDO0FBQ25CLGNBQVksRUFBRSxDQUFDO0FBQ2YsY0FBWSxFQUFFLENBQUMsRUFDaEIsQ0FBQzs7OztBQTRCRixNQUFNLENBQUMsT0FBTyxHQUFHO0FBQ2YsZ0JBQWMsRUFBZCxjQUFjO0FBQ2QsY0FBWSxFQUFaLFlBQVk7QUFDWixzQkFBb0IsRUFBcEIsb0JBQW9CO0FBQ3BCLGtCQUFnQixFQUFoQixnQkFBZ0I7Q0FDakIsQ0FBQyIsImZpbGUiOiIvdmFyL2ZvbGRlcnMveGYvcnNwaDRfYzU3MzE1cnM1N3h4c2Rza3J4bnYzNnQwL1QvdG1wZW1tMkh1cHVibGlzaF9wYWNrYWdlcy9ucG0vbnVjbGlkZS1oZy1yZXBvc2l0b3J5LWJhc2UvbGliL2hnLWNvbnN0YW50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4vKiBAcHJvdmlkZXNNb2R1bGUgSGdDb25zdGFudHMgKi9cblxudHlwZSBIZ1JlcG9zaXRvcnlPcHRpb25zID0ge1xuICAvKiogVGhlIG9yaWdpbiBVUkwgb2YgdGhpcyByZXBvc2l0b3J5LiAqL1xuICBvcmlnaW5VUkw6IHN0cmluZztcblxuICAvKiogVGhlIHdvcmtpbmcgZGlyZWN0b3J5IG9mIHRoaXMgcmVwb3NpdG9yeS4gKi9cbiAgd29ya2luZ0RpcmVjdG9yeTogRGlyZWN0b3J5O1xuXG4gIC8qKiBUaGUgcm9vdCBkaXJlY3RvcnkgdGhhdCBpcyBvcGVuZWQgaW4gQXRvbSwgd2hpY2ggdGhpcyBSZXBvc2l0b3J5IHNlcnZlcy4gKiovXG4gIHByb2plY3RSb290RGlyZWN0b3J5OiBEaXJlY3Rvcnk7XG59O1xuXG4vKipcbiAqIFRoZXNlIGFyZSBzdGF0dXMgY29kZXMgdXNlZCBieSBNZXJjdXJpYWwncyBvdXRwdXQuXG4gKiBEb2N1bWVudGVkIGluIGh0dHA6Ly9zZWxlbmljLmNvbS9oZy9oZWxwL3N0YXR1cy5cbiAqL1xudHlwZSBTdGF0dXNDb2RlSWQgPSBzdHJpbmc7XG52YXIgU3RhdHVzQ29kZUlkOiB7W2tleTogc3RyaW5nXTogU3RhdHVzQ29kZUlkfSA9IHtcbiAgQURERUQ6ICdBJyxcbiAgQ0xFQU46ICdDJyxcbiAgSUdOT1JFRDogJ0knLFxuICBNT0RJRklFRDogJ00nLFxuICBNSVNTSU5HOiAnIScsIC8vIChkZWxldGVkIGJ5IG5vbi1oZyBjb21tYW5kLCBidXQgc3RpbGwgdHJhY2tlZClcbiAgUkVNT1ZFRDogJ1InLFxuICBVTlRSQUNLRUQ6ICc/Jyxcbn07XG5cbi8qKlxuICogSW50ZXJuYWxseSwgdGhlIEhnUmVwb3NpdG9yeSB1c2VzIHRoZSBzdHJpbmcgU3RhdHVzQ29kZUlkIHRvIGRvIGJvb2trZWVwaW5nLlxuICogSG93ZXZlciwgR2l0UmVwb3NpdG9yeSB1c2VzIG51bWJlcnMgdG8gcmVwcmVzZW50IGl0cyBzdGF0dXNlcywgYW5kIHJldHVybnNcbiAqIHN0YXR1c2VzIGFzIG51bWJlcnMuIEluIG9yZGVyIHRvIGtlZXAgb3VyIHN0YXR1cyAndHlwZXMnIHRoZSBzYW1lLCB3ZSBtYXAgdGhlXG4gKiBzdHJpbmcgU3RhdHVzQ29kZUlkIHRvIG51bWJlcnMuXG4gKiBUaGUgbnVtYmVycyB0aGVtc2VsdmVzIHNob3VsZCBub3QgbWF0dGVyOyB0aGV5IGFyZSBtZWFudCB0byBiZSBwYXNzZWRcbiAqIHRvIDo6aXNTdGF0dXNOZXcvOjppc1N0YXR1c01vZGlmaWVkIHRvIGJlIGludGVycHJldGVkLlxuICovXG50eXBlIFN0YXR1c0NvZGVOdW1iZXIgPSBudW1iZXI7XG52YXIgU3RhdHVzQ29kZU51bWJlcjoge1trZXk6IHN0cmluZ106IFN0YXR1c0NvZGVOdW1iZXJ9ID0ge1xuICBBRERFRDogMSxcbiAgQ0xFQU46IDIsXG4gIElHTk9SRUQ6IDMsXG4gIE1PRElGSUVEOiA0LFxuICBNSVNTSU5HOiA1LFxuICBSRU1PVkVEOiA2LFxuICBVTlRSQUNLRUQ6IDcsXG59O1xuXG52YXIgU3RhdHVzQ29kZUlkVG9OdW1iZXI6IHtba2V5OiBTdGF0dXNDb2RlSWRdOiBTdGF0dXNDb2RlTnVtYmVyfSA9IHtcbiAgW1N0YXR1c0NvZGVJZC5BRERFRF06IFN0YXR1c0NvZGVOdW1iZXIuQURERUQsXG4gIFtTdGF0dXNDb2RlSWQuQ0xFQU5dOiBTdGF0dXNDb2RlTnVtYmVyLkNMRUFOLFxuICBbU3RhdHVzQ29kZUlkLklHTk9SRURdOiBTdGF0dXNDb2RlTnVtYmVyLklHTk9SRUQsXG4gIFtTdGF0dXNDb2RlSWQuTU9ESUZJRURdOiBTdGF0dXNDb2RlTnVtYmVyLk1PRElGSUVELFxuICBbU3RhdHVzQ29kZUlkLk1JU1NJTkddOiBTdGF0dXNDb2RlTnVtYmVyLk1JU1NJTkcsXG4gIFtTdGF0dXNDb2RlSWQuUkVNT1ZFRF06IFN0YXR1c0NvZGVOdW1iZXIuUkVNT1ZFRCxcbiAgW1N0YXR1c0NvZGVJZC5VTlRSQUNLRURdOiBTdGF0dXNDb2RlTnVtYmVyLlVOVFJBQ0tFRCxcbn07XG5cbnR5cGUgSGdTdGF0dXNPcHRpb24gPSBudW1iZXI7XG52YXIgSGdTdGF0dXNPcHRpb246IHtba2V5OiBzdHJpbmddOiBIZ1N0YXR1c09wdGlvbn0gPSB7XG4gIE9OTFlfTk9OX0lHTk9SRUQ6IDEsICAvLyBvbmx5IHRoZSBvdXRwdXQgb2YgYGhnIHN0YXR1c2BcbiAgT05MWV9JR05PUkVEOiAyLCAgICAgIC8vIG9ubHkgdGhlIG91dHB1dCBvZiBgaGcgc3RhdHVzIC0taWdub3JlZGBcbiAgQUxMX1NUQVRVU0VTOiAzLCAgICAgIC8vIHRoZSBvdXRwdXQgb2YgYGhnIHN0YXR1cyAtLWFsbGBcbn07XG5cbnR5cGUgTGluZURpZmYgPSB7XG4gIG9sZFN0YXJ0OiBudW1iZXI7XG4gIG9sZExpbmVzOiBudW1iZXI7XG4gIG5ld1N0YXJ0OiBudW1iZXI7XG4gIG5ld0xpbmVzOiBudW1iZXI7XG59O1xuXG50eXBlIERpZmZJbmZvID0ge1xuICBhZGRlZDogbnVtYmVyO1xuICBkZWxldGVkOiBudW1iZXI7XG4gIGxpbmVEaWZmczogQXJyYXk8TGluZURpZmY+O1xufTtcblxudHlwZSBSZXZpc2lvbkZpbGVDb3B5ID0ge1xuICBmcm9tOiBzdHJpbmc7XG4gIHRvOiBzdHJpbmc7XG59O1xuXG5leHBvcnQgdHlwZSBSZXZpc2lvbkZpbGVDaGFuZ2VzID0ge1xuICBhbGw6IEFycmF5PHN0cmluZz47XG4gIGFkZGVkOiBBcnJheTxzdHJpbmc+O1xuICBkZWxldGVkOiBBcnJheTxzdHJpbmc+O1xuICBjb3BpZWQ6IEFycmF5PFJldmlzaW9uRmlsZUNvcHk+O1xuICBtb2RpZmllZDogQXJyYXk8c3RyaW5nPjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBIZ1N0YXR1c09wdGlvbixcbiAgU3RhdHVzQ29kZUlkLFxuICBTdGF0dXNDb2RlSWRUb051bWJlcixcbiAgU3RhdHVzQ29kZU51bWJlcixcbn07XG4iXX0=
