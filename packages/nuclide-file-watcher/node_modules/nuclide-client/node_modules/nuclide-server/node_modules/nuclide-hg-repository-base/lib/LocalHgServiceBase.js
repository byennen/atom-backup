var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

'use babel';

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */
/* @providesModule LocalHgServiceBase */

var _require = require('events');

var EventEmitter = _require.EventEmitter;

var HgService = require('./HgService');

var _require2 = require('./hg-constants');

var HgStatusOption = _require2.HgStatusOption;

var _require3 = require('./hg-output-helpers');

var parseHgDiffUnifiedOutput = _require3.parseHgDiffUnifiedOutput;

var _require4 = require('./hg-revision-expression-helpers');

var _fetchCommonAncestorOfHeadAndRevision = _require4.fetchCommonAncestorOfHeadAndRevision;
var _fetchRevisionNumbersBetweenRevisions = _require4.fetchRevisionNumbersBetweenRevisions;

var _require5 = require('./hg-revision-state-helpers');

var _fetchFileContentAtRevision = _require5.fetchFileContentAtRevision;
var _fetchFilesChangedAtRevision = _require5.fetchFilesChangedAtRevision;

var _require6 = require('nuclide-commons');

var asyncExecute = _require6.asyncExecute;

var path = require('path');

var isOsX = require('os').platform() === 'darwin';

var LocalHgServiceBase = (function (_HgService) {
  _inherits(LocalHgServiceBase, _HgService);

  function LocalHgServiceBase(options) {
    _classCallCheck(this, LocalHgServiceBase);

    _get(Object.getPrototypeOf(LocalHgServiceBase.prototype), 'constructor', this).call(this);
    this._emitter = new EventEmitter();
    this._workingDirectory = options.workingDirectory;
  }

  _createClass(LocalHgServiceBase, [{
    key: 'destroy',
    value: function destroy() {
      this._emitter.removeAllListeners();
      this._emitter = null;
    }
  }, {
    key: 'getWorkingDirectory',
    value: function getWorkingDirectory() {
      return this._workingDirectory;
    }

    /**
     * See HgService::fetchStatuses for details.
     */
  }, {
    key: 'fetchStatuses',
    value: _asyncToGenerator(function* (filePaths, options) {
      var _this = this;

      var statusMap = {};

      var args = ['status', '-Tjson'];
      if (options && 'hgStatusOption' in options) {
        if (options.hgStatusOption === HgStatusOption.ONLY_IGNORED) {
          args.push('--ignored');
        } else if (options.hgStatusOption === HgStatusOption.ALL_STATUSES) {
          args.push('--all');
        }
      }
      args = args.concat(filePaths);
      var execOptions = {
        cwd: this.getWorkingDirectory()
      };
      try {
        var output = yield this._hgAsyncExecute(args, execOptions);
      } catch (e) {
        return statusMap;
      }

      var statuses = JSON.parse(output.stdout);
      statuses.forEach(function (status) {
        statusMap[_this._absolutize(status.path)] = status.status;
      });
      return statusMap;
    })

    // Mercurial returns all paths relative to the repository's working directory.
    // This method transforms a path relative to the working direcotry into an
    // absolute path.
  }, {
    key: '_absolutize',
    value: function _absolutize(pathRelativeToWorkingDirectory) {
      return path.join(this._workingDirectory, pathRelativeToWorkingDirectory);
    }

    /**
     * See HgService::onFilesDidChange for details.
     */
  }, {
    key: 'onFilesDidChange',
    value: function onFilesDidChange(callback) {
      var _this2 = this;

      this._emitter.on('files-changed', callback);
      return {
        dispose: function dispose() {
          _this2._removeOnFilesDidChangeListener(callback);
        }
      };
    }

    /**
     * Removes a listener that was registered on ::onFilesDidChange.
     * Note: Does not fire on changes to .hgignore files. Use ::onHgIgnoreFileDidChange
     * if you need to observe changes on these types of files.
     */
  }, {
    key: '_removeOnFilesDidChangeListener',
    value: function _removeOnFilesDidChangeListener(callback) {
      this._emitter.removeListener('files-changed', callback);
    }

    /**
     * See HgService::onHgIgnoreFileDidChange for details.
     */
  }, {
    key: 'onHgIgnoreFileDidChange',
    value: function onHgIgnoreFileDidChange(callback) {
      var _this3 = this;

      this._emitter.on('hg-ignore-changed', callback);
      return {
        dispose: function dispose() {
          _this3._removeOnHgIgnoreFileDidChangeListener(callback);
        }
      };
    }

    /**
     * Removes a listener that was registered on ::onHgIgnoreFileDidChange.
     */
  }, {
    key: '_removeOnHgIgnoreFileDidChangeListener',
    value: function _removeOnHgIgnoreFileDidChangeListener(callback) {
      this._emitter.removeListener('hg-ignore-changed', callback);
    }

    /**
     * See HgService::onHgRepoStateDidChange for details.
     */
  }, {
    key: 'onHgRepoStateDidChange',
    value: function onHgRepoStateDidChange(callback) {
      var _this4 = this;

      this._emitter.on('hg-repo-state-changed', callback);
      return {
        dispose: function dispose() {
          _this4._removeOnHgRepoStateDidChangeListener(callback);
        }
      };
    }

    /**
     * Removes a listener that was registered on ::onHgRepoStateDidChange.
     */
  }, {
    key: '_removeOnHgRepoStateDidChangeListener',
    value: function _removeOnHgRepoStateDidChangeListener(callback) {
      this._emitter.removeListener('hg-repo-state-changed', callback);
    }

    /**
     * See HgService::fetchDiffInfo for details.
     */
  }, {
    key: 'fetchDiffInfo',
    value: _asyncToGenerator(function* (filePath) {
      var args = ['diff', '--unified', '0', filePath];
      var options = {
        cwd: this.getWorkingDirectory()
      };
      try {
        var output = yield this._hgAsyncExecute(args, options);
      } catch (e) {
        return null;
      }
      return parseHgDiffUnifiedOutput(output.stdout);
    })

    /**
     * Calls out to asyncExecute using the 'hg' command.
     * @param options as specified by http://nodejs.org/api/child_process.html. Additional options:
     *   - NO_HGPLAIN set if the $HGPLAIN environment variable should not be used.
     *   - TTY_OUTPUT set if the command should be run as if it were attached to a tty.
     */
  }, {
    key: '_hgAsyncExecute',
    value: function _hgAsyncExecute(args, options) {
      if (!options['NO_HGPLAIN']) {
        // Setting HGPLAIN=1 overrides any custom aliases a user has defined.
        if (options.env) {
          options.env['HGPLAIN'] = 1;
        } else {
          var assign = require('nuclide-commons').object.assign;

          var env = { 'HGPLAIN': 1 };
          assign(env, process.env);
          options.env = env;
        }
      }

      var cmd;
      if (options['TTY_OUTPUT']) {
        cmd = 'script';
        if (isOsX) {
          // On OS X, script takes the program to run and its arguments as varargs at the end.
          args = ['-q', '/dev/null', 'hg'].concat(args);
        } else {
          // On Linux, script takes the command to run as the -c parameter.
          var hgCommand = ['hg'].concat(args).join(' ');
          args = ['-q', '/dev/null', '-c', hgCommand];
        }
      } else {
        cmd = 'hg';
      }
      return asyncExecute(cmd, args, options);
    }
  }, {
    key: 'fetchCurrentBookmark',
    value: function fetchCurrentBookmark() {
      var _require7 = require('./hg-bookmark-helpers');

      var fetchCurrentBookmark = _require7.fetchCurrentBookmark;

      return fetchCurrentBookmark(path.join(this._workingDirectory, '.hg'));
    }

    /**
     * See HgService::onHgBookmarkDidChange for details.
     */
  }, {
    key: 'onHgBookmarkDidChange',
    value: function onHgBookmarkDidChange(callback) {
      this._emitter.on('hg-bookmark-changed', callback);
      return {
        dispose: this._removeOnHgBookmarkDidChangeListener.bind(this, callback)
      };
    }
  }, {
    key: '_removeOnHgBookmarkDidChangeListener',
    value: function _removeOnHgBookmarkDidChangeListener(callback) {
      this._emitter.removeListener('hg-bookmark-changed', callback);
    }

    /**
     * Section: Repository State at Specific Revisions
     */

  }, {
    key: 'fetchFileContentAtRevision',
    value: function fetchFileContentAtRevision(filePath, revision) {
      return _fetchFileContentAtRevision(filePath, revision, this._workingDirectory);
    }
  }, {
    key: 'fetchFilesChangedAtRevision',
    value: function fetchFilesChangedAtRevision(revision) {
      return _fetchFilesChangedAtRevision(revision, this._workingDirectory);
    }
  }, {
    key: 'fetchCommonAncestorOfHeadAndRevision',
    value: function fetchCommonAncestorOfHeadAndRevision(revision) {
      return _fetchCommonAncestorOfHeadAndRevision(revision, this._workingDirectory);
    }
  }, {
    key: 'fetchRevisionNumbersBetweenRevisions',
    value: function fetchRevisionNumbersBetweenRevisions(revisionFrom, revisionTo) {
      return _fetchRevisionNumbersBetweenRevisions(revisionFrom, revisionTo, this._workingDirectory);
    }
  }, {
    key: 'getSmartlog',
    value: _asyncToGenerator(function* (ttyOutput, concise) {
      var args = [concise ? 'sl' : 'smartlog'];
      var execOptions = {
        cwd: this.getWorkingDirectory(),
        NO_HGPLAIN: concise, // `hg sl` is likely user-defined.
        TTY_OUTPUT: ttyOutput
      };
      return yield this._hgAsyncExecute(args, execOptions);
    })
  }, {
    key: 'checkout',
    value: _asyncToGenerator(function* (revision, create) {
      var options = {
        cwd: this.getWorkingDirectory()
      };
      try {
        yield this._hgAsyncExecute(['checkout', revision], options);
      } catch (e) {
        return false;
      }
      return true;
    })
  }]);

  return LocalHgServiceBase;
})(HgService);

module.exports = LocalHgServiceBase;
//# sourceMappingURL=data:application/json;base64,
