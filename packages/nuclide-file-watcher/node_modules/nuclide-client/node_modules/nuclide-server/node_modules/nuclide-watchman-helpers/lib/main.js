
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var getWatchmanBinaryPath = _asyncToGenerator(function* () {
  try {
    var stats = yield fsPromise.stat(WATCHMAN_DEFAULT_PATH);
    // `stats` contains a `mode` property, a number which can be used to determine
    // whether this file is executable. However, the number is platform-dependent.
    if (stats && stats.isFile()) {
      return WATCHMAN_DEFAULT_PATH;
    }
  } catch (e) {}
  // Suppress the error.

  // Let the watchman Client find the watchman binary via the default env PATH.
  return 'watchman';
});

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

var _require = require('nuclide-commons');

var fsPromise = _require.fsPromise;

var WATCHMAN_DEFAULT_PATH = '/usr/local/bin/watchman';

module.exports = Object.defineProperties({
  getWatchmanBinaryPath: getWatchmanBinaryPath

}, {
  WatchmanClient: {
    get: function get() {
      return require('./WatchmanClient');
    },
    configurable: true,
    enumerable: true
  },
  WatchmanSubscription: {

    // Exposed for testing.

    get: function get() {
      return require('./WatchmanSubscription');
    },
    configurable: true,
    enumerable: true
  }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXdhdGNobWFuLWhlbHBlcnMvbGliL21haW4uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxDQUFDOzs7Ozs7Ozs7O0lBZUcscUJBQXFCLHFCQUFwQyxhQUF3RDtBQUN0RCxNQUFJO0FBQ0YsUUFBSSxLQUFLLEdBQUcsTUFBTSxTQUFTLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUM7OztBQUd4RCxRQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUU7QUFDM0IsYUFBTyxxQkFBcUIsQ0FBQztLQUM5QjtHQUNGLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFFWDs7OztBQUFBLEFBRUQsU0FBTyxVQUFVLENBQUM7Q0FDbkI7Ozs7ZUFqQmlCLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQzs7SUFBdkMsU0FBUyxZQUFULFNBQVM7O0FBRWQsSUFBSSxxQkFBcUIsR0FBRyx5QkFBeUIsQ0FBQzs7QUFpQnRELE1BQU0sQ0FBQyxPQUFPLDJCQUFHO0FBQ2YsdUJBQXFCLEVBQXJCLHFCQUFxQjs7Q0FVdEI7QUFSSyxnQkFBYztTQUFBLGVBQUc7QUFDbkIsYUFBTyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztLQUNwQzs7OztBQUdHLHNCQUFvQjs7OztTQUFBLGVBQUc7QUFDekIsYUFBTyxPQUFPLENBQUMsd0JBQXdCLENBQUMsQ0FBQztLQUMxQzs7OztFQUNGLENBQUMiLCJmaWxlIjoiL3Zhci9mb2xkZXJzL3hmL3JzcGg0X2M1NzMxNXJzNTd4eHNkc2tyeG52MzZ0MC9UL3RtcGVtbTJIdXB1Ymxpc2hfcGFja2FnZXMvbnBtL251Y2xpZGUtd2F0Y2htYW4taGVscGVycy9saWIvbWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciB7ZnNQcm9taXNlfSA9IHJlcXVpcmUoJ251Y2xpZGUtY29tbW9ucycpO1xuXG52YXIgV0FUQ0hNQU5fREVGQVVMVF9QQVRIID0gJy91c3IvbG9jYWwvYmluL3dhdGNobWFuJztcblxuYXN5bmMgZnVuY3Rpb24gZ2V0V2F0Y2htYW5CaW5hcnlQYXRoKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gIHRyeSB7XG4gICAgdmFyIHN0YXRzID0gYXdhaXQgZnNQcm9taXNlLnN0YXQoV0FUQ0hNQU5fREVGQVVMVF9QQVRIKTtcbiAgICAvLyBgc3RhdHNgIGNvbnRhaW5zIGEgYG1vZGVgIHByb3BlcnR5LCBhIG51bWJlciB3aGljaCBjYW4gYmUgdXNlZCB0byBkZXRlcm1pbmVcbiAgICAvLyB3aGV0aGVyIHRoaXMgZmlsZSBpcyBleGVjdXRhYmxlLiBIb3dldmVyLCB0aGUgbnVtYmVyIGlzIHBsYXRmb3JtLWRlcGVuZGVudC5cbiAgICBpZiAoc3RhdHMgJiYgc3RhdHMuaXNGaWxlKCkpIHtcbiAgICAgIHJldHVybiBXQVRDSE1BTl9ERUZBVUxUX1BBVEg7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gU3VwcHJlc3MgdGhlIGVycm9yLlxuICB9XG4gIC8vIExldCB0aGUgd2F0Y2htYW4gQ2xpZW50IGZpbmQgdGhlIHdhdGNobWFuIGJpbmFyeSB2aWEgdGhlIGRlZmF1bHQgZW52IFBBVEguXG4gIHJldHVybiAnd2F0Y2htYW4nO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0V2F0Y2htYW5CaW5hcnlQYXRoLFxuXG4gIGdldCBXYXRjaG1hbkNsaWVudCgpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9XYXRjaG1hbkNsaWVudCcpO1xuICB9LFxuXG4gIC8vIEV4cG9zZWQgZm9yIHRlc3RpbmcuXG4gIGdldCBXYXRjaG1hblN1YnNjcmlwdGlvbigpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9XYXRjaG1hblN1YnNjcmlwdGlvbicpO1xuICB9LFxufTtcbiJdfQ==
