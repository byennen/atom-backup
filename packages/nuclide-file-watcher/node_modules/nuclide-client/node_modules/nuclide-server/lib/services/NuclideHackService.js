

/**
 * Executes the hh_client on the remote connected dev box using the ExecClient passed
 */

var _callHHClient = _asyncToGenerator(function* (args, errorStream, outputJson, processInput, cwd) {
  // append args on the end of our commands
  var defaults = ['--retries', '0', '--retry-if-init', 'false', '--from', 'nuclide'];
  if (outputJson) {
    defaults.unshift('--json');
  }

  var allArgs = defaults.concat(args);
  allArgs.push(cwd);

  var execResult = yield checkOutput(PATH_TO_HH_CLIENT, allArgs, { stdin: processInput });

  var output = errorStream ? execResult.stderr : execResult.stdout;
  if (outputJson) {
    try {
      return JSON.parse(output);
    } catch (err) {
      logger.error('failed to parse hh_client output:', output);
      throw new Error('failed to parse hh_client output: ' + output);
    }
  } else {
    return output;
  }
}

/**
 * Gets the hh_client diagnistics for all files open
 */
);

/**
 * Gets the hh_client definition of the query with a given symbol type.
 */

var getDefinition = _asyncToGenerator(function* (query, symbolType) {
  var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

  var searchTypes = symbolTypeToSearchTypes(symbolType);
  var searchResults = [];
  try {
    searchResults = yield getSearchResults(query, searchTypes, undefined, options);
  } catch (e) {
    logger.warn('getSearchResults error:', e);
  }
  return searchResults.filter(function (result) {
    // If the request had a :: in it, it's a full name, so we should compare to
    // the name of the result in that format.
    var fullName = result.name;
    if (query.indexOf('::') !== -1 && result.scope) {
      fullName = result.scope + '::' + fullName;
    }
    return fullName === query;
  });
}

/**
 * Fetches the dependencies needed by the hack worker to cache for faster hack features response times.
 * Returnes a map of file paths to file contents.
 */
);

var getDependencies = _asyncToGenerator(function* (dependenciesInfo) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var dependencies = {};

  // hh_server currently is single threaded and processes one request at a time.
  // Hence, we fetch the dependencies one-by-one, without Promise.all for the hack search to unblock
  // user-requested hack language features and failry treat other usages of hh_client.
  for (var i = 0; i < dependenciesInfo.length; i++) {
    var _dependenciesInfo$i = dependenciesInfo[i];
    var dependencyName = _dependenciesInfo$i.name;
    var dependencyType = _dependenciesInfo$i.type;

    if (dependencyName.startsWith('\\')) {
      dependencyName = dependencyName.substring(1);
    }
    var filter;
    if (dependencyType === 'class') {
      filter = [SearchResultType.CLASS, SearchResultType.ABSTRACT_CLASS, SearchResultType.TRAIT, SearchResultType.TYPEDEF, SearchResultType.INTERFACE];
    } else {
      filter = [SearchResultType.FUNCTION];
    }

    var searchResults = yield getSearchResults(dependencyName, filter, undefined, options);

    yield Promise.all(searchResults.map(_asyncToGenerator(function* (location) {
      var name = location.name;
      var path = location.path;

      if (name !== dependencyName) {
        return;
      }
      var contents = yield fsPromise.readFile(path, 'utf8');
      if (!contents.startsWith('<?hh')) {
        return;
      }
      // This turns anything we're adding into decl mode, so that it uses less memory.
      // Ideally, hh_server should do this, and strip the method/function bodies.
      if (contents.startsWith(HH_NEWLINE)) {
        contents = '<?hh // decl\n' + contents.substring(HH_NEWLINE.length);
      } else if (contents.startsWith(HH_STRICT_NEWLINE)) {
        contents = '<?hh // decl\n' + contents.substring(HH_STRICT_NEWLINE.length);
      }
      dependencies[path] = contents;
    })));
  }

  return dependencies;
});

var getSearchResults = _asyncToGenerator(function* (search, filterTypes, searchPostfix) {
  var options = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];

  if (!search) {
    return [];
  }
  var response = yield _callHHClient(
  /*args*/['--search' + (searchPostfix || ''), search],
  /*errorStream*/false,
  /*outputJson*/true,
  /*processInput*/null,
  /*options*/options.cwd);
  var results = response.map(function (result) {
    return {
      line: result.line - 1,
      column: result.char_start - 1,
      name: result.name,
      path: result.filename,
      length: result.char_end - result.char_start + 1,
      scope: result.scope,
      additionalInfo: result.desc,
      action: 'OPEN_PATH'
    };
  });
  if (filterTypes) {
    results = filterSearchResults(results, filterTypes);
  }
  return results;
}

// Eventually this will happen on the hack side, but for now, this will do.
);

var getReferences = _asyncToGenerator(function* (symbolName) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  return yield _callHHClient(
  /*args*/['--find-refs', symbolName],
  /*errorStream*/false,
  /*outputJson*/true,
  /*processInput*/null,
  /*options*/options.cwd);
});

var isClientAvailable = _asyncToGenerator(function* () {
  var _ref = yield checkOutput('which', [PATH_TO_HH_CLIENT]);

  var stdout = _ref.stdout;

  // The `stdout` would be empty if there is no such command.
  return stdout.trim().length > 0;
});

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

'use babel';

var logger = require('nuclide-logging').getLogger();

var _require = require('nuclide-hack-common/lib/constants');

var SearchResultType = _require.SearchResultType;
var SymbolType = _require.SymbolType;

var _require2 = require('nuclide-commons');

var checkOutput = _require2.checkOutput;
var fsPromise = _require2.fsPromise;

var extend = require('util')._extend;

var HH_NEWLINE = '<?hh\n';
var HH_STRICT_NEWLINE = '<?hh // strict\n';
var PATH_TO_HH_CLIENT = 'hh_client';function getDiagnostics() {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  return _callHHClient(
  /*args*/[],
  /*errorStream*/true,
  /*outputJson*/true,
  /*processInput*/null,
  /*options*/options.cwd);
}

/**
 * Gets the hh_client autocompletions for the passed query string (file contents with a marker).
 */
function getCompletions(query, options) {
  return _callHHClient(
  /*args*/['--auto-complete'],
  /*errorStream*/false,
  /*outputJson*/true,
  /*processInput*/query,
  /*options*/options.cwd);
}function filterSearchResults(results, filter) {

  return results.filter(function (result) {
    var info = result.additionalInfo;
    var searchType = getSearchType(info);
    return filter.indexOf(searchType) !== -1;
  });
}

function getSearchType(info) {
  switch (info) {
    case 'typedef':
      return SearchResultType.TYPEDEF;
    case 'function':
      return SearchResultType.FUNCTION;
    case 'constant':
      return SearchResultType.CONSTANT;
    case 'trait':
      return SearchResultType.TRAIT;
    case 'interface':
      return SearchResultType.INTERFACE;
    case 'abstract class':
      return SearchResultType.ABSTRACT_CLASS;
    default:
      {
        if (info.startsWith('method') || info.startsWith('static method')) {
          return SearchResultType.METHOD;
        }
        if (info.startsWith('class var') || info.startsWith('static class var')) {
          return SearchResultType.CLASS_VAR;
        }
        return SearchResultType.CLASS;
      }
  }
}

function symbolTypeToSearchTypes(symbolType) {
  switch (symbolType) {
    case SymbolType.CLASS:
      return [SearchResultType.CLASS, SearchResultType.ABSTRACT_CLASS, SearchResultType.TRAIT, SearchResultType.TYPEDEF, SearchResultType.INTERFACE];
    case SymbolType.METHOD:
      return [SearchResultType.METHOD];
    case SymbolType.FUNCTION:
      return [SearchResultType.FUNCTION];
    default:
      return null;
  }
}

module.exports = {
  services: {
    '/hack/getDiagnostics': { handler: getDiagnostics, method: 'post' },
    '/hack/getCompletions': { handler: getCompletions, method: 'post' },
    '/hack/getDefinition': { handler: getDefinition, method: 'post' },
    '/hack/getDependencies': { handler: getDependencies, method: 'post' },
    '/hack/getSearchResults': { handler: getSearchResults, method: 'post' },
    '/hack/getReferences': { handler: getReferences, method: 'post' },
    '/hack/isClientAvailable': { handler: isClientAvailable, method: 'post' }
  }
};
//# sourceMappingURL=data:application/json;base64,
