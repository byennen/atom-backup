
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

/**
 * This designed for logging on both Nuclide client and Nuclide server. It is based on [log4js]
 * (https://www.npmjs.com/package/log4js) with the ability to lazy initialize and update config
 * after initialized.
 * To make sure we only have one instance of log4js logger initialized globally, we save the logger
 * to `global` object.
 */

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

var LOGGER_CATEGORY = 'nuclide';
var LOGGER_LEVELS = ['trace', 'debug', 'info', 'warn', 'error', 'fatal'];
var LOG4JS_INSTANCE_KEY = '_nuclide_log4js_logger';

var lazyLogger;

/**
 * Create the log4js logger. Note we could call this function more than once to update the config.
 * params `config` and `options` are configurations used by log4js, refer
 * https://www.npmjs.com/package/log4js#configuration for more information.
 */
function configLog4jsLogger(config, options) {
  var log4js = require('log4js');
  log4js.configure(config, options);
  global[LOG4JS_INSTANCE_KEY] = log4js.getLogger(LOGGER_CATEGORY);
}

// Create a lazy logger, who won't initialize log4js logger until `lazyLogger.$level(...)` is called.
// In this way other package could depends on this upon activate without worrying initialization of
// logger taking too much time.
function createLazyLogger() {
  lazyLogger = {};

  LOGGER_LEVELS.forEach(function (level) {
    lazyLogger[level] = _asyncToGenerator(function* () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      if (global[LOG4JS_INSTANCE_KEY] === undefined) {
        var defaultConfig = yield require('./config').getDefaultConfig();
        configLog4jsLogger(defaultConfig, {});
      }
      global[LOG4JS_INSTANCE_KEY][level].apply(global[LOG4JS_INSTANCE_KEY], args);
    });
  });

  return lazyLogger;
}

function getLogger() {
  return lazyLogger ? lazyLogger : createLazyLogger();
}

module.exports = {
  getLogger: getLogger,
  updateConfig: configLog4jsLogger
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWxvZ2dpbmcvbGliL21haW4uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1CWixJQUFNLGVBQWUsR0FBRyxTQUFTLENBQUM7QUFDbEMsSUFBTSxhQUFhLEdBQUcsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzNFLElBQU0sbUJBQW1CLEdBQUcsd0JBQXdCLENBQUM7O0FBRXJELElBQUksVUFBVSxDQUFDOzs7Ozs7O0FBT2YsU0FBUyxrQkFBa0IsQ0FBQyxNQUFXLEVBQUUsT0FBWSxFQUFRO0FBQzNELE1BQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMvQixRQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztBQUNsQyxRQUFNLENBQUMsbUJBQW1CLENBQUMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0NBQ2pFOzs7OztBQUtELFNBQVMsZ0JBQWdCLEdBQVE7QUFDL0IsWUFBVSxHQUFHLEVBQUUsQ0FBQzs7QUFFaEIsZUFBYSxDQUFDLE9BQU8sQ0FBQyxVQUFDLEtBQUssRUFBSztBQUMvQixjQUFVLENBQUMsS0FBSyxDQUFDLHFCQUFHLGFBQStCO3dDQUFyQixJQUFJO0FBQUosWUFBSTs7O0FBQ2hDLFVBQUksTUFBTSxDQUFDLG1CQUFtQixDQUFDLEtBQUssU0FBUyxFQUFFO0FBQzdDLFlBQUksYUFBYSxHQUFHLE1BQU0sT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7QUFDakUsMEJBQWtCLENBQUMsYUFBYSxFQUFFLEVBQUUsQ0FBQyxDQUFDO09BQ3ZDO0FBQ0QsWUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQzdFLENBQUEsQ0FBQztHQUNILENBQUMsQ0FBQzs7QUFFSCxTQUFPLFVBQVUsQ0FBQztDQUNuQjs7QUFFRCxTQUFTLFNBQVMsR0FBRztBQUNuQixTQUFPLFVBQVUsR0FBRyxVQUFVLEdBQUcsZ0JBQWdCLEVBQUUsQ0FBQztDQUNyRDs7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHO0FBQ2YsV0FBUyxFQUFULFNBQVM7QUFDVCxjQUFZLEVBQUUsa0JBQWtCO0NBQ2pDLENBQUMiLCJmaWxlIjoiL3Zhci9mb2xkZXJzL3hmL3JzcGg0X2M1NzMxNXJzNTd4eHNkc2tyeG52MzZ0MC9UL3RtcGVtbTJIdXB1Ymxpc2hfcGFja2FnZXMvbnBtL251Y2xpZGUtbG9nZ2luZy9saWIvbWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qKlxuICogVGhpcyBkZXNpZ25lZCBmb3IgbG9nZ2luZyBvbiBib3RoIE51Y2xpZGUgY2xpZW50IGFuZCBOdWNsaWRlIHNlcnZlci4gSXQgaXMgYmFzZWQgb24gW2xvZzRqc11cbiAqIChodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9sb2c0anMpIHdpdGggdGhlIGFiaWxpdHkgdG8gbGF6eSBpbml0aWFsaXplIGFuZCB1cGRhdGUgY29uZmlnXG4gKiBhZnRlciBpbml0aWFsaXplZC5cbiAqIFRvIG1ha2Ugc3VyZSB3ZSBvbmx5IGhhdmUgb25lIGluc3RhbmNlIG9mIGxvZzRqcyBsb2dnZXIgaW5pdGlhbGl6ZWQgZ2xvYmFsbHksIHdlIHNhdmUgdGhlIGxvZ2dlclxuICogdG8gYGdsb2JhbGAgb2JqZWN0LlxuICovXG5cbmNvbnN0IExPR0dFUl9DQVRFR09SWSA9ICdudWNsaWRlJztcbmNvbnN0IExPR0dFUl9MRVZFTFMgPSBbJ3RyYWNlJywgJ2RlYnVnJywgJ2luZm8nLCAnd2FybicsICdlcnJvcicsICdmYXRhbCddO1xuY29uc3QgTE9HNEpTX0lOU1RBTkNFX0tFWSA9ICdfbnVjbGlkZV9sb2c0anNfbG9nZ2VyJztcblxudmFyIGxhenlMb2dnZXI7XG5cbi8qKlxuICogQ3JlYXRlIHRoZSBsb2c0anMgbG9nZ2VyLiBOb3RlIHdlIGNvdWxkIGNhbGwgdGhpcyBmdW5jdGlvbiBtb3JlIHRoYW4gb25jZSB0byB1cGRhdGUgdGhlIGNvbmZpZy5cbiAqIHBhcmFtcyBgY29uZmlnYCBhbmQgYG9wdGlvbnNgIGFyZSBjb25maWd1cmF0aW9ucyB1c2VkIGJ5IGxvZzRqcywgcmVmZXJcbiAqIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2xvZzRqcyNjb25maWd1cmF0aW9uIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICovXG5mdW5jdGlvbiBjb25maWdMb2c0anNMb2dnZXIoY29uZmlnOiBhbnksIG9wdGlvbnM6IGFueSk6IHZvaWQge1xuICB2YXIgbG9nNGpzID0gcmVxdWlyZSgnbG9nNGpzJyk7XG4gIGxvZzRqcy5jb25maWd1cmUoY29uZmlnLCBvcHRpb25zKTtcbiAgZ2xvYmFsW0xPRzRKU19JTlNUQU5DRV9LRVldID0gbG9nNGpzLmdldExvZ2dlcihMT0dHRVJfQ0FURUdPUlkpO1xufVxuXG4vLyBDcmVhdGUgYSBsYXp5IGxvZ2dlciwgd2hvIHdvbid0IGluaXRpYWxpemUgbG9nNGpzIGxvZ2dlciB1bnRpbCBgbGF6eUxvZ2dlci4kbGV2ZWwoLi4uKWAgaXMgY2FsbGVkLlxuLy8gSW4gdGhpcyB3YXkgb3RoZXIgcGFja2FnZSBjb3VsZCBkZXBlbmRzIG9uIHRoaXMgdXBvbiBhY3RpdmF0ZSB3aXRob3V0IHdvcnJ5aW5nIGluaXRpYWxpemF0aW9uIG9mXG4vLyBsb2dnZXIgdGFraW5nIHRvbyBtdWNoIHRpbWUuXG5mdW5jdGlvbiBjcmVhdGVMYXp5TG9nZ2VyKCk6IGFueSB7XG4gIGxhenlMb2dnZXIgPSB7fTtcblxuICBMT0dHRVJfTEVWRUxTLmZvckVhY2goKGxldmVsKSA9PiB7XG4gICAgbGF6eUxvZ2dlcltsZXZlbF0gPSBhc3luYyAoLi4uYXJnczogQXJyYXk8YW55PikgPT4ge1xuICAgICAgaWYgKGdsb2JhbFtMT0c0SlNfSU5TVEFOQ0VfS0VZXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhciBkZWZhdWx0Q29uZmlnID0gYXdhaXQgcmVxdWlyZSgnLi9jb25maWcnKS5nZXREZWZhdWx0Q29uZmlnKCk7XG4gICAgICAgIGNvbmZpZ0xvZzRqc0xvZ2dlcihkZWZhdWx0Q29uZmlnLCB7fSk7XG4gICAgICB9XG4gICAgICBnbG9iYWxbTE9HNEpTX0lOU1RBTkNFX0tFWV1bbGV2ZWxdLmFwcGx5KGdsb2JhbFtMT0c0SlNfSU5TVEFOQ0VfS0VZXSwgYXJncyk7XG4gICAgfTtcbiAgfSk7XG5cbiAgcmV0dXJuIGxhenlMb2dnZXI7XG59XG5cbmZ1bmN0aW9uIGdldExvZ2dlcigpIHtcbiAgcmV0dXJuIGxhenlMb2dnZXIgPyBsYXp5TG9nZ2VyIDogY3JlYXRlTGF6eUxvZ2dlcigpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0TG9nZ2VyLFxuICB1cGRhdGVDb25maWc6IGNvbmZpZ0xvZzRqc0xvZ2dlcixcbn07XG4iXX0=
