

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

'use babel';

var _require = require('atom');

var Disposable = _require.Disposable;
var CompositeDisposable = _require.CompositeDisposable;

var legacyLinterSetting = 'nuclide-diagnostics-store.consumeLegacyLinters';

var legacyLintOnTheFlySetting = 'nuclide-diagnostics-store.legacyLintOnTheFly';

var disposables = null;
var diagnosticStore = null;
var diagnosticUpdater = null;

function addDisposable(disposable) {
  if (disposables) {
    disposables.add(disposable);
  } else {
    var logger = require('nuclide-logging').getLogger();
    logger.error('disposables is null');
  }
}

function getDiagnosticStore() {
  if (!diagnosticStore) {
    var _require2 = require('nuclide-diagnostics-base');

    var DiagnosticStore = _require2.DiagnosticStore;

    diagnosticStore = new DiagnosticStore();
  }
  return diagnosticStore;
}

/**
 * @return A wrapper around the methods on DiagnosticStore that allow reading data.
 */
function getDiagnosticUpdater() {
  if (!diagnosticUpdater) {
    var store = getDiagnosticStore();
    diagnosticUpdater = {
      onFileMessagesDidUpdate: store.onFileMessagesDidUpdate.bind(store),
      onProjectMessagesDidUpdate: store.onProjectMessagesDidUpdate.bind(store),
      onAllMessagesDidUpdate: store.onAllMessagesDidUpdate.bind(store)
    };
  }
  return diagnosticUpdater;
}

var consumeLegacyLinters = false;
var lintOnTheFly = false;
var adapters = new Set();

module.exports = {
  config: {
    consumeLegacyLinters: {
      type: 'boolean',
      'default': false
    },
    legacyLintOnTheFly: {
      type: 'boolean',
      'default': false,
      description: 'Used only for legacy linters'
    }
  },

  activate: function activate(state) {
    if (!disposables) {
      disposables = new CompositeDisposable();
    }

    consumeLegacyLinters = atom.config.get(legacyLinterSetting); // returns mixed so a cast is necessary
    atom.config.observe(legacyLinterSetting, function (newValue) {
      // To make this really solid, we should also probably trigger the linter
      // for the active text editor. Possibly more trouble than it's worth,
      // though, since this may be a temporary option.
      consumeLegacyLinters = newValue;
      adapters.forEach(function (adapter) {
        return adapter.setEnabled(newValue);
      });
    });

    lintOnTheFly = atom.config.get(legacyLintOnTheFlySetting);
    atom.config.observe(legacyLintOnTheFlySetting, function (newValue) {
      lintOnTheFly = newValue;
      adapters.forEach(function (adapter) {
        return adapter.setLintOnFly(newValue);
      });
    });
  },

  consumeLinterProvider: function consumeLinterProvider(provider) {
    var LinterAdapter = require('./LinterAdapter');
    var adapter = new LinterAdapter(provider);
    adapter.setEnabled(consumeLegacyLinters);
    adapter.setLintOnFly(lintOnTheFly);
    adapters.add(adapter);
    var diagnosticDisposable = this.consumeDiagnosticProvider(adapter);
    var adapterDisposable = new Disposable(function () {
      diagnosticDisposable.dispose();
      adapter.dispose();
      adapters['delete'](adapter);
    });
    addDisposable(adapter);
    return adapterDisposable;
  },

  consumeDiagnosticProvider: function consumeDiagnosticProvider(provider) {
    var store = getDiagnosticStore();
    // Register the diagnostic store for updates from the new provider.
    var compositeDisposable = new CompositeDisposable();
    compositeDisposable.add(provider.onMessageUpdate(function (update) {
      store.updateMessages(provider, update);
    }));
    compositeDisposable.add(provider.onMessageInvalidation(function (invalidationMessage) {
      store.invalidateMessages(provider, invalidationMessage);
    }));
    addDisposable(compositeDisposable);
    return compositeDisposable;
  },

  provideDiagnosticUpdates: function provideDiagnosticUpdates() {
    return getDiagnosticUpdater();
  },

  deactivate: function deactivate() {
    if (disposables) {
      disposables.dispose();
      disposables = null;
    }
    if (diagnosticStore) {
      diagnosticStore.dispose();
      diagnosticStore = null;
    }
    diagnosticUpdater = null;
  }
};
//# sourceMappingURL=data:application/json;base64,
