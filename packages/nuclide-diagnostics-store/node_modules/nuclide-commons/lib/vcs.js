
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var findVcsHelper = _asyncToGenerator(function* (src) {
  var options = {
    'cwd': path.dirname(src)
  };
  try {
    var hgResult = yield asyncExecute('hg', ['root'], options);
  } catch (e) {
    hgResult = e;
  }

  if (hgResult.exitCode === 0) {
    return {
      vcs: 'hg',
      root: hgResult.stdout.trim()
    };
  }

  var gitResult;
  try {
    gitResult = yield asyncExecute('git', ['rev-parse', '--show-toplevel'], options);
  } catch (e) {
    gitResult = e;
  }

  if (gitResult.exitCode === 0) {
    return {
      vcs: 'git',
      root: gitResult.stdout.trim()
    };
  }

  throw new Error('Could not find VCS for: ' + src);
});

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

var _require = require('./process');

var asyncExecute = _require.asyncExecute;

var path = require('path');

var vcsInfoCache = {};

module.exports = {
  /**
   * For the given source file, find the type of vcs that is managing it as well
   * as the root directory for the VCS.
   */
  findVcs: _asyncToGenerator(function* (src) {
    var vcsInfo = vcsInfoCache[src];
    if (vcsInfo) {
      return vcsInfo;
    }

    vcsInfo = yield findVcsHelper(src);
    vcsInfoCache[src] = vcsInfo;
    return vcsInfo;
  })

};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWNvbW1vbnMvbGliL3Zjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLENBQUM7Ozs7Ozs7Ozs7SUFlRyxhQUFhLHFCQUE1QixXQUE2QixHQUFHLEVBQUU7QUFDaEMsTUFBSSxPQUFPLEdBQUc7QUFDWixTQUFLLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUM7R0FDekIsQ0FBQztBQUNGLE1BQUk7QUFDRixRQUFJLFFBQVEsR0FBRyxNQUFNLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztHQUM1RCxDQUFDLE9BQU8sQ0FBQyxFQUFFO0FBQ1YsWUFBUSxHQUFHLENBQUMsQ0FBQztHQUNkOztBQUVELE1BQUksUUFBUSxDQUFDLFFBQVEsS0FBSyxDQUFDLEVBQUU7QUFDM0IsV0FBTztBQUNMLFNBQUcsRUFBRSxJQUFJO0FBQ1QsVUFBSSxFQUFFLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFO0tBQzdCLENBQUM7R0FDSDs7QUFFRCxNQUFJLFNBQVMsQ0FBQztBQUNkLE1BQUk7QUFDRixhQUFTLEdBQUcsTUFBTSxZQUFZLENBQUMsS0FBSyxFQUFFLENBQUMsV0FBVyxFQUFFLGlCQUFpQixDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7R0FDbEYsQ0FBQyxPQUFPLENBQUMsRUFBRTtBQUNWLGFBQVMsR0FBRyxDQUFDLENBQUM7R0FDZjs7QUFFRCxNQUFJLFNBQVMsQ0FBQyxRQUFRLEtBQUssQ0FBQyxFQUFFO0FBQzVCLFdBQU87QUFDTCxTQUFHLEVBQUUsS0FBSztBQUNWLFVBQUksRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRTtLQUM5QixDQUFDO0dBQ0g7O0FBRUQsUUFBTSxJQUFJLEtBQUssQ0FBQywwQkFBMEIsR0FBRyxHQUFHLENBQUMsQ0FBQztDQUNuRDs7OztlQXJDb0IsT0FBTyxDQUFDLFdBQVcsQ0FBQzs7SUFBcEMsWUFBWSxZQUFaLFlBQVk7O0FBQ2pCLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQzs7QUFFM0IsSUFBSSxZQUFZLEdBQUcsRUFBRSxDQUFDOztBQW9DdEIsTUFBTSxDQUFDLE9BQU8sR0FBRzs7Ozs7QUFLZixBQUFNLFNBQU8sb0JBQUEsV0FBQyxHQUFHLEVBQUU7QUFDakIsUUFBSSxPQUFPLEdBQUcsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2hDLFFBQUksT0FBTyxFQUFFO0FBQ1gsYUFBTyxPQUFPLENBQUM7S0FDaEI7O0FBRUQsV0FBTyxHQUFHLE1BQU0sYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ25DLGdCQUFZLENBQUMsR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFDO0FBQzVCLFdBQU8sT0FBTyxDQUFDO0dBQ2hCLENBQUE7O0NBRUYsQ0FBQyIsImZpbGUiOiIvdmFyL2ZvbGRlcnMveGYvcnNwaDRfYzU3MzE1cnM1N3h4c2Rza3J4bnYzNnQwL1QvdG1wZW1tMkh1cHVibGlzaF9wYWNrYWdlcy9ucG0vbnVjbGlkZS1jb21tb25zL2xpYi92Y3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xudmFyIHthc3luY0V4ZWN1dGV9ID0gcmVxdWlyZSgnLi9wcm9jZXNzJyk7XG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxudmFyIHZjc0luZm9DYWNoZSA9IHt9O1xuXG5hc3luYyBmdW5jdGlvbiBmaW5kVmNzSGVscGVyKHNyYykge1xuICB2YXIgb3B0aW9ucyA9IHtcbiAgICAnY3dkJzogcGF0aC5kaXJuYW1lKHNyYyksXG4gIH07XG4gIHRyeSB7XG4gICAgdmFyIGhnUmVzdWx0ID0gYXdhaXQgYXN5bmNFeGVjdXRlKCdoZycsIFsncm9vdCddLCBvcHRpb25zKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGhnUmVzdWx0ID0gZTtcbiAgfVxuXG4gIGlmIChoZ1Jlc3VsdC5leGl0Q29kZSA9PT0gMCkge1xuICAgIHJldHVybiB7XG4gICAgICB2Y3M6ICdoZycsXG4gICAgICByb290OiBoZ1Jlc3VsdC5zdGRvdXQudHJpbSgpLFxuICAgIH07XG4gIH1cblxuICB2YXIgZ2l0UmVzdWx0O1xuICB0cnkge1xuICAgIGdpdFJlc3VsdCA9IGF3YWl0IGFzeW5jRXhlY3V0ZSgnZ2l0JywgWydyZXYtcGFyc2UnLCAnLS1zaG93LXRvcGxldmVsJ10sIG9wdGlvbnMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgZ2l0UmVzdWx0ID0gZTtcbiAgfVxuXG4gIGlmIChnaXRSZXN1bHQuZXhpdENvZGUgPT09IDApIHtcbiAgICByZXR1cm4ge1xuICAgICAgdmNzOiAnZ2l0JyxcbiAgICAgIHJvb3Q6IGdpdFJlc3VsdC5zdGRvdXQudHJpbSgpLFxuICAgIH07XG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBmaW5kIFZDUyBmb3I6ICcgKyBzcmMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLyoqXG4gICAqIEZvciB0aGUgZ2l2ZW4gc291cmNlIGZpbGUsIGZpbmQgdGhlIHR5cGUgb2YgdmNzIHRoYXQgaXMgbWFuYWdpbmcgaXQgYXMgd2VsbFxuICAgKiBhcyB0aGUgcm9vdCBkaXJlY3RvcnkgZm9yIHRoZSBWQ1MuXG4gICAqL1xuICBhc3luYyBmaW5kVmNzKHNyYykge1xuICAgIHZhciB2Y3NJbmZvID0gdmNzSW5mb0NhY2hlW3NyY107XG4gICAgaWYgKHZjc0luZm8pIHtcbiAgICAgIHJldHVybiB2Y3NJbmZvO1xuICAgIH1cblxuICAgIHZjc0luZm8gPSBhd2FpdCBmaW5kVmNzSGVscGVyKHNyYyk7XG4gICAgdmNzSW5mb0NhY2hlW3NyY10gPSB2Y3NJbmZvO1xuICAgIHJldHVybiB2Y3NJbmZvO1xuICB9LFxuXG59O1xuIl19
