
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

/**
 * @param repoPath The full path to the repository directory (.hg).
 * @return A promise that resolves to the current bookmark name, if it exists,
 *   or else an empty string.
 */

var fetchCurrentBookmark = _asyncToGenerator(function* (repoPath) {
  var bookmarkFile = path.join(repoPath, 'bookmarks.current');
  var result;
  try {
    result = yield fsPromise.readFile(bookmarkFile, 'utf-8');
  } catch (e) {
    if (!(e.code === 'ENOENT')) {
      // We expect an error if the bookmark file doesn't exist. Otherwise, the
      // error is unexpected, so log it.
      var logger = require('nuclide-logging').getLogger();
      logger.error(e);
    }
    result = '';
  }
  return result;
});

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

var _require = require('nuclide-commons');

var fsPromise = _require.fsPromise;

var path = require('path');

module.exports = {
  fetchCurrentBookmark: fetchCurrentBookmark
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWhnLXJlcG9zaXRvcnktYmFzZS9saWIvaGctYm9va21hcmstaGVscGVycy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7SUFvQkcsb0JBQW9CLHFCQUFuQyxXQUFvQyxRQUFnQixFQUFtQjtBQUNyRSxNQUFJLFlBQVksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO0FBQzVELE1BQUksTUFBTSxDQUFDO0FBQ1gsTUFBSTtBQUNGLFVBQU0sR0FBRyxNQUFNLFNBQVMsQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0dBQzFELENBQUMsT0FBTyxDQUFDLEVBQUU7QUFDVixRQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksS0FBSyxRQUFRLENBQUEsQUFBQyxFQUFFOzs7QUFHMUIsVUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7QUFDcEQsWUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNqQjtBQUNELFVBQU0sR0FBRyxFQUFFLENBQUM7R0FDYjtBQUNELFNBQU8sTUFBTSxDQUFDO0NBQ2Y7Ozs7ZUF4QmlCLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQzs7SUFBdkMsU0FBUyxZQUFULFNBQVM7O0FBQ2QsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDOztBQXlCM0IsTUFBTSxDQUFDLE9BQU8sR0FBRztBQUNmLHNCQUFvQixFQUFwQixvQkFBb0I7Q0FDckIsQ0FBQyIsImZpbGUiOiIvdmFyL2ZvbGRlcnMveGYvcnNwaDRfYzU3MzE1cnM1N3h4c2Rza3J4bnYzNnQwL1QvdG1wZW1tMkh1cHVibGlzaF9wYWNrYWdlcy9ucG0vbnVjbGlkZS1oZy1yZXBvc2l0b3J5LWJhc2UvbGliL2hnLWJvb2ttYXJrLWhlbHBlcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG52YXIge2ZzUHJvbWlzZX0gPSByZXF1aXJlKCdudWNsaWRlLWNvbW1vbnMnKTtcbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuXG5cbi8qKlxuICogQHBhcmFtIHJlcG9QYXRoIFRoZSBmdWxsIHBhdGggdG8gdGhlIHJlcG9zaXRvcnkgZGlyZWN0b3J5ICguaGcpLlxuICogQHJldHVybiBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgY3VycmVudCBib29rbWFyayBuYW1lLCBpZiBpdCBleGlzdHMsXG4gKiAgIG9yIGVsc2UgYW4gZW1wdHkgc3RyaW5nLlxuICovXG5hc3luYyBmdW5jdGlvbiBmZXRjaEN1cnJlbnRCb29rbWFyayhyZXBvUGF0aDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgdmFyIGJvb2ttYXJrRmlsZSA9IHBhdGguam9pbihyZXBvUGF0aCwgJ2Jvb2ttYXJrcy5jdXJyZW50Jyk7XG4gIHZhciByZXN1bHQ7XG4gIHRyeSB7XG4gICAgcmVzdWx0ID0gYXdhaXQgZnNQcm9taXNlLnJlYWRGaWxlKGJvb2ttYXJrRmlsZSwgJ3V0Zi04Jyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoIShlLmNvZGUgPT09ICdFTk9FTlQnKSkge1xuICAgICAgLy8gV2UgZXhwZWN0IGFuIGVycm9yIGlmIHRoZSBib29rbWFyayBmaWxlIGRvZXNuJ3QgZXhpc3QuIE90aGVyd2lzZSwgdGhlXG4gICAgICAvLyBlcnJvciBpcyB1bmV4cGVjdGVkLCBzbyBsb2cgaXQuXG4gICAgICB2YXIgbG9nZ2VyID0gcmVxdWlyZSgnbnVjbGlkZS1sb2dnaW5nJykuZ2V0TG9nZ2VyKCk7XG4gICAgICBsb2dnZXIuZXJyb3IoZSk7XG4gICAgfVxuICAgIHJlc3VsdCA9ICcnO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBmZXRjaEN1cnJlbnRCb29rbWFyayxcbn07XG4iXX0=
