

/**
 * String comparator that lists the capitalized verson of a string before the lowercase version.
 *
 * Apparently String.prototype.localeCompare() is not i18n-aware in Node 0.10.x. There's a ton of
 * debate on this:
 *
 *   https://github.com/joyent/node/issues/6371
 *   https://github.com/joyent/node/issues/7676
 *
 * It appears the version of io.js bundled with Atom has proper i18n support, but it lists
 * lowercase strings before uppercase strings, so we also need this custom function in Atom.
 *
 * @return <0 if a should appear before b in a list; >0 if b should appear before a in a list
 */
'use babel';

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

function valueComparator(a, b) {
  var len = Math.min(a.length, b.length);
  for (var i = 0; i < len; i++) {
    var charA = a.charAt(i);
    var charB = b.charAt(i);
    if (charA === charB) {
      continue;
    }

    var aUpper = charA.toUpperCase();
    var bUpper = charB.toUpperCase();

    var caseInsensitiveCompare = aUpper.localeCompare(bUpper);
    if (caseInsensitiveCompare !== 0) {
      return caseInsensitiveCompare;
    }

    // If we have reached this point, charA and charB are different, but only one of them is
    // uppercase. The uppercase one should be returned first.
    return charA === aUpper ? -1 : 1;
  }

  return a.length - b.length;
}

/**
 * @return >0 if a is the greater Score; <0 if b is the greater Score.
 */
function scoreComparator(a, b) {
  var cmp = a.score - b.score;
  if (cmp !== 0) {
    return cmp;
  } else {
    return valueComparator(b.value, a.value);
  }
}

/**
 * @return <0 if a is the greater Score; >0 if b is the greater Score.
 */
function inverseScoreComparator(a, b) {
  return -scoreComparator(a, b);
}

module.exports = {
  scoreComparator: scoreComparator,
  inverseScoreComparator: inverseScoreComparator,
  valueComparator: valueComparator
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXBhdGgtc2VhcmNoL2xpYi91dGlscy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsV0FBVyxDQUFDOzs7Ozs7Ozs7O0FBMkJaLFNBQVMsZUFBZSxDQUFDLENBQVMsRUFBRSxDQUFTLEVBQVU7QUFDckQsTUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN2QyxPQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQzVCLFFBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDeEIsUUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN4QixRQUFJLEtBQUssS0FBSyxLQUFLLEVBQUU7QUFDbkIsZUFBUztLQUNWOztBQUVELFFBQUksTUFBTSxHQUFHLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUNqQyxRQUFJLE1BQU0sR0FBRyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUM7O0FBRWpDLFFBQUksc0JBQXNCLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMxRCxRQUFJLHNCQUFzQixLQUFLLENBQUMsRUFBRTtBQUNoQyxhQUFPLHNCQUFzQixDQUFDO0tBQy9COzs7O0FBSUQsV0FBTyxLQUFLLEtBQUssTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztHQUNsQzs7QUFFRCxTQUFPLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQztDQUM1Qjs7Ozs7QUFLRCxTQUFTLGVBQWUsQ0FBQyxDQUFRLEVBQUUsQ0FBUSxFQUFVO0FBQ25ELE1BQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUM1QixNQUFJLEdBQUcsS0FBSyxDQUFDLEVBQUU7QUFDYixXQUFPLEdBQUcsQ0FBQztHQUNaLE1BQU07QUFDTCxXQUFPLGVBQWUsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUMxQztDQUNGOzs7OztBQUtELFNBQVMsc0JBQXNCLENBQUMsQ0FBUSxFQUFFLENBQVEsRUFBVTtBQUMxRCxTQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztDQUMvQjs7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHO0FBQ2YsaUJBQWUsRUFBZixlQUFlO0FBQ2Ysd0JBQXNCLEVBQXRCLHNCQUFzQjtBQUN0QixpQkFBZSxFQUFmLGVBQWU7Q0FDaEIsQ0FBQyIsImZpbGUiOiIvdmFyL2ZvbGRlcnMveGYvcnNwaDRfYzU3MzE1cnM1N3h4c2Rza3J4bnYzNnQwL1QvdG1wZW1tMkh1cHVibGlzaF9wYWNrYWdlcy9ucG0vbnVjbGlkZS1wYXRoLXNlYXJjaC9saWIvdXRpbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pbXBvcnQgdHlwZSB7U2NvcmV9IGZyb20gJy4vU2NvcmUnO1xuXG4vKipcbiAqIFN0cmluZyBjb21wYXJhdG9yIHRoYXQgbGlzdHMgdGhlIGNhcGl0YWxpemVkIHZlcnNvbiBvZiBhIHN0cmluZyBiZWZvcmUgdGhlIGxvd2VyY2FzZSB2ZXJzaW9uLlxuICpcbiAqIEFwcGFyZW50bHkgU3RyaW5nLnByb3RvdHlwZS5sb2NhbGVDb21wYXJlKCkgaXMgbm90IGkxOG4tYXdhcmUgaW4gTm9kZSAwLjEwLnguIFRoZXJlJ3MgYSB0b24gb2ZcbiAqIGRlYmF0ZSBvbiB0aGlzOlxuICpcbiAqICAgaHR0cHM6Ly9naXRodWIuY29tL2pveWVudC9ub2RlL2lzc3Vlcy82MzcxXG4gKiAgIGh0dHBzOi8vZ2l0aHViLmNvbS9qb3llbnQvbm9kZS9pc3N1ZXMvNzY3NlxuICpcbiAqIEl0IGFwcGVhcnMgdGhlIHZlcnNpb24gb2YgaW8uanMgYnVuZGxlZCB3aXRoIEF0b20gaGFzIHByb3BlciBpMThuIHN1cHBvcnQsIGJ1dCBpdCBsaXN0c1xuICogbG93ZXJjYXNlIHN0cmluZ3MgYmVmb3JlIHVwcGVyY2FzZSBzdHJpbmdzLCBzbyB3ZSBhbHNvIG5lZWQgdGhpcyBjdXN0b20gZnVuY3Rpb24gaW4gQXRvbS5cbiAqXG4gKiBAcmV0dXJuIDwwIGlmIGEgc2hvdWxkIGFwcGVhciBiZWZvcmUgYiBpbiBhIGxpc3Q7ID4wIGlmIGIgc2hvdWxkIGFwcGVhciBiZWZvcmUgYSBpbiBhIGxpc3RcbiAqL1xuZnVuY3Rpb24gdmFsdWVDb21wYXJhdG9yKGE6IHN0cmluZywgYjogc3RyaW5nKTogbnVtYmVyIHtcbiAgdmFyIGxlbiA9IE1hdGgubWluKGEubGVuZ3RoLCBiLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICB2YXIgY2hhckEgPSBhLmNoYXJBdChpKTtcbiAgICB2YXIgY2hhckIgPSBiLmNoYXJBdChpKTtcbiAgICBpZiAoY2hhckEgPT09IGNoYXJCKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB2YXIgYVVwcGVyID0gY2hhckEudG9VcHBlckNhc2UoKTtcbiAgICB2YXIgYlVwcGVyID0gY2hhckIudG9VcHBlckNhc2UoKTtcblxuICAgIHZhciBjYXNlSW5zZW5zaXRpdmVDb21wYXJlID0gYVVwcGVyLmxvY2FsZUNvbXBhcmUoYlVwcGVyKTtcbiAgICBpZiAoY2FzZUluc2Vuc2l0aXZlQ29tcGFyZSAhPT0gMCkge1xuICAgICAgcmV0dXJuIGNhc2VJbnNlbnNpdGl2ZUNvbXBhcmU7XG4gICAgfVxuXG4gICAgLy8gSWYgd2UgaGF2ZSByZWFjaGVkIHRoaXMgcG9pbnQsIGNoYXJBIGFuZCBjaGFyQiBhcmUgZGlmZmVyZW50LCBidXQgb25seSBvbmUgb2YgdGhlbSBpc1xuICAgIC8vIHVwcGVyY2FzZS4gVGhlIHVwcGVyY2FzZSBvbmUgc2hvdWxkIGJlIHJldHVybmVkIGZpcnN0LlxuICAgIHJldHVybiBjaGFyQSA9PT0gYVVwcGVyID8gLTEgOiAxO1xuICB9XG5cbiAgcmV0dXJuIGEubGVuZ3RoIC0gYi5sZW5ndGg7XG59XG5cbi8qKlxuICogQHJldHVybiA+MCBpZiBhIGlzIHRoZSBncmVhdGVyIFNjb3JlOyA8MCBpZiBiIGlzIHRoZSBncmVhdGVyIFNjb3JlLlxuICovXG5mdW5jdGlvbiBzY29yZUNvbXBhcmF0b3IoYTogU2NvcmUsIGI6IFNjb3JlKTogbnVtYmVyIHtcbiAgdmFyIGNtcCA9IGEuc2NvcmUgLSBiLnNjb3JlO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdmFsdWVDb21wYXJhdG9yKGIudmFsdWUsIGEudmFsdWUpO1xuICB9XG59XG5cbi8qKlxuICogQHJldHVybiA8MCBpZiBhIGlzIHRoZSBncmVhdGVyIFNjb3JlOyA+MCBpZiBiIGlzIHRoZSBncmVhdGVyIFNjb3JlLlxuICovXG5mdW5jdGlvbiBpbnZlcnNlU2NvcmVDb21wYXJhdG9yKGE6IFNjb3JlLCBiOiBTY29yZSk6IG51bWJlciB7XG4gIHJldHVybiAtc2NvcmVDb21wYXJhdG9yKGEsIGIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2NvcmVDb21wYXJhdG9yLFxuICBpbnZlcnNlU2NvcmVDb21wYXJhdG9yLFxuICB2YWx1ZUNvbXBhcmF0b3IsXG59O1xuIl19
