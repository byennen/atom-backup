
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _require = require('nuclide-commons');

var asyncExecute = _require.asyncExecute;

var _require2 = require('nuclide-commons');

var fsPromise = _require2.fsPromise;

var logger = require('nuclide-logging').getLogger();
var path = require('path');
var BuckProject = require('./BuckProject');

/**
 * As defined in com.facebook.buck.cli.Command, some of Buck's subcommands are
 * read-only. The read-only commands can be executed in parallel, but the rest
 * must be executed serially.
 *
 * TODO(mbolin): This does not account for the case where the user runs
 * `buck build` from the command line while Nuclide is also trying to build.
 */
var BLOCKING_BUCK_COMMAND_QUEUE_PREFIX = 'buck';

/**
 * Represents a Buck project on disk. All Buck commands for a project should be
 * done through an instance of this class.
 */

var LocalBuckProject = (function (_BuckProject) {
  _inherits(LocalBuckProject, _BuckProject);

  /**
   * @param options.rootPath Absolute path to the directory that contains the
   *     .buckconfig file to configure the project.
   */

  function LocalBuckProject(options) {
    _classCallCheck(this, LocalBuckProject);

    _get(Object.getPrototypeOf(LocalBuckProject.prototype), 'constructor', this).call(this);
    this._rootPath = options.rootPath;
    this._serialQueueName = BLOCKING_BUCK_COMMAND_QUEUE_PREFIX + this._rootPath;
  }

  _createClass(LocalBuckProject, [{
    key: 'getPath',
    value: function getPath() {
      return Promise.resolve(this._rootPath);
    }

    /**
     * This syntax is not supported yet, but the return type is:
     * Promise<{stdout: string; stderr: string; exitCode: number}>
     *
     * @param args Do not include 'buck' as the first argument: it will be added
     *     automatically.
     */
  }, {
    key: '_runBuckCommandFromProjectRoot',
    value: _asyncToGenerator(function* (args) {
      if (global.atom) {
        var pathToBuck = atom.config.get('buck.pathToBuck');
      } else {
        var pathToBuck = 'buck';
      }
      var options = {
        cwd: this._rootPath,
        queueName: this._serialQueueName
      };
      logger.debug('Buck command:', pathToBuck, args, options);
      return asyncExecute(pathToBuck, args, options);
    })
  }, {
    key: 'getOwner',
    value: _asyncToGenerator(function* (filePath) {
      var args = ['audit', 'owner', filePath];
      var result = yield this._runBuckCommandFromProjectRoot(args);
      var stdout = result.stdout;
      var targets = stdout.trim().split('\n');
      return targets;
    })
  }, {
    key: 'build',
    value: function build(buildTargets) {
      return this._build(buildTargets, { install: false, run: false, debug: false });
    }
  }, {
    key: 'install',
    value: function install(buildTargets, run, debug, simulator) {
      return this._build(buildTargets, { install: true, run: run, debug: debug, simulator: simulator });
    }
  }, {
    key: '_build',
    value: _asyncToGenerator(function* (buildTargets, options) {
      if (typeof buildTargets === 'string') {
        buildTargets = [buildTargets];
      }
      var install = options.install;
      var run = options.run;
      var debug = options.debug;
      var simulator = options.simulator;

      var report = yield fsPromise.tempfile({ suffix: '.json' });
      var args = install ? ['install'] : ['build'];
      args = args.concat(['--keep-going', '--build-report', report]);
      if (install) {
        if (run) {
          args.push('--run');
        }
        if (debug) {
          args.push('--wait-for-debugger');
        }
        if (simulator) {
          args.push('--udid');
          args.push(simulator);
        }
      }
      buildTargets.forEach(function (target) {
        return args.push(target);
      });

      try {
        yield this._runBuckCommandFromProjectRoot(args);
      } catch (e) {
        // The build failed. However, because --keep-going was specified, the
        // build report should have still been written unless any of the target
        // args were invalid. We check the existence of the report file to be sure.
        var fileWasWritten = yield fsPromise.exists(report);
        if (!fileWasWritten) {
          throw e;
        }
      }

      try {
        var json = yield fsPromise.readFile(report, { encoding: 'UTF-8' });
        if (!json) {
          throw Error('Report file ' + report + ' for ' + buildTargets + ' was opened, ' + 'but nothing was written.');
        }

        try {
          return JSON.parse(json);
        } catch (e) {
          throw Error('Failed to parse:\n' + json);
        }
      } finally {
        fsPromise.unlink(report);
      }
    })

    /**
     * @param filePath absolute path.
     */
  }, {
    key: 'findTargetsWithReferencedFile',
    value: _asyncToGenerator(function* (filePath, options) {
      var args = ['targets', '--referenced_file', filePath];

      var type = options['type'];
      if (type) {
        args.push('--type');
        type.forEach(function (buildRuleType) {
          return args.push(buildRuleType);
        });
      }

      args.push('--json');

      var result = yield this._runBuckCommandFromProjectRoot(args);

      result.json = JSON.parse(result.stdout || '[]');
      // TODO(mbolin): The target should be a field in the JSON.
      result.targets = result.json.map(function (targetData) {
        return '//' + targetData['buck.base_path'] + ':' + targetData['name'];
      });

      return result;
    })
  }, {
    key: 'listAliases',
    value: _asyncToGenerator(function* () {
      var args = ['audit', 'alias', '--list'];
      var result = yield this._runBuckCommandFromProjectRoot(args);
      var stdout = result.stdout.trim();
      return stdout ? stdout.split('\n') : [];
    })

    /**
     * Currently, if `aliasOrTarget` contains a flavor, this will fail.
     */
  }, {
    key: 'resolveAlias',
    value: _asyncToGenerator(function* (aliasOrTarget) {
      var args = ['targets', '--resolve-alias', aliasOrTarget];
      var result = yield this._runBuckCommandFromProjectRoot(args);
      return result.stdout.trim();
    })

    /**
     * Currently, if `aliasOrTarget` contains a flavor, this will fail.
     *
     * @return Promise resolves to absolute path to output file
     */
  }, {
    key: 'outputFileFor',
    value: _asyncToGenerator(function* (aliasOrTarget) {
      var args = ['targets', '--show-output', aliasOrTarget];
      var result = yield this._runBuckCommandFromProjectRoot(args);
      var stdout = result.stdout.trim();
      if (stdout.indexOf(' ') !== -1) {
        var relativePath = stdout.split(' ')[1];
        return path.resolve(this._rootPath, relativePath);
      } else {
        return null;
      }
    })

    /**
     * Currently, if `aliasOrTarget` contains a flavor, this will fail.
     */
  }, {
    key: 'buildRuleTypeFor',
    value: _asyncToGenerator(function* (aliasOrTarget) {
      var args = ['targets', '--json', aliasOrTarget];
      var result = yield this._runBuckCommandFromProjectRoot(args);
      var json = JSON.parse(result.stdout.trim());
      return json[0]['buck.type'];
    })
  }, {
    key: 'getServerPort',
    value: _asyncToGenerator(function* () {
      var args = ['server', 'status', '--json', '--http-port'];
      var result = yield this._runBuckCommandFromProjectRoot(args);
      var json = JSON.parse(result.stdout);
      return json['http.port'];
    })
  }]);

  return LocalBuckProject;
})(BuckProject);

module.exports = LocalBuckProject;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWJ1Y2stYmFzZS9saWIvTG9jYWxCdWNrUHJvamVjdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2VBV1MsT0FBTyxDQUFDLGlCQUFpQixDQUFDOztJQUExQyxZQUFZLFlBQVosWUFBWTs7Z0JBQ0MsT0FBTyxDQUFDLGlCQUFpQixDQUFDOztJQUF2QyxTQUFTLGFBQVQsU0FBUzs7QUFDZCxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUNwRCxJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDM0IsSUFBSSxXQUFXLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDOzs7Ozs7Ozs7O0FBVTNDLElBQUksa0NBQWtDLEdBQUcsTUFBTSxDQUFDOzs7Ozs7O0lBTTFDLGdCQUFnQjtZQUFoQixnQkFBZ0I7Ozs7Ozs7QUFTVCxXQVRQLGdCQUFnQixDQVNSLE9BQTJCLEVBQUU7MEJBVHJDLGdCQUFnQjs7QUFVbEIsK0JBVkUsZ0JBQWdCLDZDQVVWO0FBQ1IsUUFBSSxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDO0FBQ2xDLFFBQUksQ0FBQyxnQkFBZ0IsR0FBRyxrQ0FBa0MsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO0dBQzdFOztlQWJHLGdCQUFnQjs7V0FlYixtQkFBRztBQUNSLGFBQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7S0FDeEM7Ozs7Ozs7Ozs7OzZCQVNtQyxXQUFDLElBQW1CLEVBQ1c7QUFDakUsVUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFO0FBQ2YsWUFBSSxVQUFVLEdBQUcsSUFBSSxD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QVcsQ0FBQyxDQUFDO0tBQzFCOzs7U0EzTEcsZ0JBQWdCO0dBQVMsV0FBVzs7QUE4TDFDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsZ0JBQWdCLENBQUMiLCJmaWxlIjoiL3Zhci9mb2xkZXJzL3hmL3JzcGg0X2M1NzMxNXJzNTd4eHNkc2tyeG52MzZ0MC9UL3RtcGVtbTJIdXB1Ymxpc2hfcGFja2FnZXMvbnBtL251Y2xpZGUtYnVjay1iYXNlL2xpYi9Mb2NhbEJ1Y2tQcm9qZWN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCc7XG4vKiBAZmxvdyAqL1xuXG4vKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpblxuICogdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxudmFyIHthc3luY0V4ZWN1dGV9ID0gcmVxdWlyZSgnbnVjbGlkZS1jb21tb25zJyk7XG52YXIge2ZzUHJvbWlzZX0gPSByZXF1aXJlKCdudWNsaWRlLWNvbW1vbnMnKTtcbnZhciBsb2dnZXIgPSByZXF1aXJlKCdudWNsaWRlLWxvZ2dpbmcnKS5nZXRMb2dnZXIoKTtcbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xudmFyIEJ1Y2tQcm9qZWN0ID0gcmVxdWlyZSgnLi9CdWNrUHJvamVjdCcpO1xuXG4vKipcbiAqIEFzIGRlZmluZWQgaW4gY29tLmZhY2Vib29rLmJ1Y2suY2xpLkNvbW1hbmQsIHNvbWUgb2YgQnVjaydzIHN1YmNvbW1hbmRzIGFyZVxuICogcmVhZC1vbmx5LiBUaGUgcmVhZC1vbmx5IGNvbW1hbmRzIGNhbiBiZSBleGVjdXRlZCBpbiBwYXJhbGxlbCwgYnV0IHRoZSByZXN0XG4gKiBtdXN0IGJlIGV4ZWN1dGVkIHNlcmlhbGx5LlxuICpcbiAqIFRPRE8obWJvbGluKTogVGhpcyBkb2VzIG5vdCBhY2NvdW50IGZvciB0aGUgY2FzZSB3aGVyZSB0aGUgdXNlciBydW5zXG4gKiBgYnVjayBidWlsZGAgZnJvbSB0aGUgY29tbWFuZCBsaW5lIHdoaWxlIE51Y2xpZGUgaXMgYWxzbyB0cnlpbmcgdG8gYnVpbGQuXG4gKi9cbnZhciBCTE9DS0lOR19CVUNLX0NPTU1BTkRfUVVFVUVfUFJFRklYID0gJ2J1Y2snO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBCdWNrIHByb2plY3Qgb24gZGlzay4gQWxsIEJ1Y2sgY29tbWFuZHMgZm9yIGEgcHJvamVjdCBzaG91bGQgYmVcbiAqIGRvbmUgdGhyb3VnaCBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICovXG5jbGFzcyBMb2NhbEJ1Y2tQcm9qZWN0IGV4dGVuZHMgQnVja1Byb2plY3Qge1xuXG4gIF9yb290UGF0aDogc3RyaW5nO1xuICBfc2VyaWFsUXVldWVOYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSBvcHRpb25zLnJvb3RQYXRoIEFic29sdXRlIHBhdGggdG8gdGhlIGRpcmVjdG9yeSB0aGF0IGNvbnRhaW5zIHRoZVxuICAgKiAgICAgLmJ1Y2tjb25maWcgZmlsZSB0byBjb25maWd1cmUgdGhlIHByb2plY3QuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRpb25zOiB7cm9vdFBhdGg6IHN0cmluZ30pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3Jvb3RQYXRoID0gb3B0aW9ucy5yb290UGF0aDtcbiAgICB0aGlzLl9zZXJpYWxRdWV1ZU5hbWUgPSBCTE9DS0lOR19CVUNLX0NPTU1BTkRfUVVFVUVfUFJFRklYICsgdGhpcy5fcm9vdFBhdGg7XG4gIH1cblxuICBnZXRQYXRoKCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fcm9vdFBhdGgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgc3ludGF4IGlzIG5vdCBzdXBwb3J0ZWQgeWV0LCBidXQgdGhlIHJldHVybiB0eXBlIGlzOlxuICAgKiBQcm9taXNlPHtzdGRvdXQ6IHN0cmluZzsgc3RkZXJyOiBzdHJpbmc7IGV4aXRDb2RlOiBudW1iZXJ9PlxuICAgKlxuICAgKiBAcGFyYW0gYXJncyBEbyBub3QgaW5jbHVkZSAnYnVjaycgYXMgdGhlIGZpcnN0IGFyZ3VtZW50OiBpdCB3aWxsIGJlIGFkZGVkXG4gICAqICAgICBhdXRvbWF0aWNhbGx5LlxuICAgKi9cbiAgYXN5bmMgX3J1bkJ1Y2tDb21tYW5kRnJvbVByb2plY3RSb290KGFyZ3M6IGFycmF5PHN0cmluZz5cbiAgICAgICk6IFByb21pc2U8e3N0ZG91dDogc3RyaW5nOyBzdGRlcnI6IHN0cmluZzsgZXhpdENvZGU6IG51bWJlcn0+IHtcbiAgICBpZiAoZ2xvYmFsLmF0b20pIHtcbiAgICAgIHZhciBwYXRoVG9CdWNrID0gYXRvbS5jb25maWcuZ2V0KCdidWNrLnBhdGhUb0J1Y2snKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHBhdGhUb0J1Y2sgPSAnYnVjayc7XG4gICAgfVxuICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgY3dkOiB0aGlzLl9yb290UGF0aCxcbiAgICAgIHF1ZXVlTmFtZTogdGhpcy5fc2VyaWFsUXVldWVOYW1lLFxuICAgIH07XG4gICAgbG9nZ2VyLmRlYnVnKCdCdWNrIGNvbW1hbmQ6JywgcGF0aFRvQnVjaywgYXJncywgb3B0aW9ucyk7XG4gICAgcmV0dXJuIGFzeW5jRXhlY3V0ZShwYXRoVG9CdWNrLCBhcmdzLCBvcHRpb25zKTtcbiAgfVxuXG4gIGFzeW5jIGdldE93bmVyKGZpbGVQYXRoOiBzdHJpbmcpOiBQcm9taXNlPEFycmF5PHN0cmluZz4+IHtcbiAgICB2YXIgYXJncyA9IFsnYXVkaXQnLCAnb3duZXInLCBmaWxlUGF0aF07XG4gICAgdmFyIHJlc3VsdCA9IGF3YWl0IHRoaXMuX3J1bkJ1Y2tDb21tYW5kRnJvbVByb2plY3RSb290KGFyZ3MpO1xuICAgIHZhciBzdGRvdXQgPSByZXN1bHQuc3Rkb3V0O1xuICAgIHZhciB0YXJnZXRzID0gc3Rkb3V0LnRyaW0oKS5zcGxpdCgnXFxuJyk7XG4gICAgcmV0dXJuIHRhcmdldHM7XG4gIH1cblxuICBidWlsZChidWlsZFRhcmdldHM6IEFycmF5PHN0cmluZz4gfCBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLl9idWlsZChidWlsZFRhcmdldHMsIHtpbnN0YWxsOiBmYWxzZSwgcnVuOiBmYWxzZSwgZGVidWc6IGZhbHNlfSk7XG4gIH1cblxuICBpbnN0YWxsKGJ1aWxkVGFyZ2V0czogQXJyYXk8c3RyaW5nPiB8IHN0cmluZywgcnVuOiBib29sZWFuLCBkZWJ1ZzogYm9vbGVhbiwgc2ltdWxhdG9yOiA/c3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5fYnVpbGQoYnVpbGRUYXJnZXRzLCB7aW5zdGFsbDogdHJ1ZSwgcnVuLCBkZWJ1Zywgc2ltdWxhdG9yfSk7XG4gIH1cblxuICBhc3luYyBfYnVpbGQoYnVpbGRUYXJnZXRzOiBBcnJheTxzdHJpbmc+IHwgc3RyaW5nLCBvcHRpb25zOiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIGlmICh0eXBlb2YgYnVpbGRUYXJnZXRzID09PSAnc3RyaW5nJykge1xuICAgICAgYnVpbGRUYXJnZXRzID0gW2J1aWxkVGFyZ2V0c107XG4gICAgfVxuICAgIHZhciB7XG4gICAgICBpbnN0YWxsLFxuICAgICAgcnVuLFxuICAgICAgZGVidWcsXG4gICAgICBzaW11bGF0b3JcbiAgICB9ID0gb3B0aW9ucztcblxuICAgIHZhciByZXBvcnQgPSBhd2FpdCBmc1Byb21pc2UudGVtcGZpbGUoe3N1ZmZpeDogJy5qc29uJ30pO1xuICAgIHZhciBhcmdzID0gaW5zdGFsbCA/IFsnaW5zdGFsbCddIDogWydidWlsZCddO1xuICAgIGFyZ3MgPSBhcmdzLmNvbmNhdChbJy0ta2VlcC1nb2luZycsICctLWJ1aWxkLXJlcG9ydCcsIHJlcG9ydF0pO1xuICAgIGlmIChpbnN0YWxsKSB7XG4gICAgICBpZiAocnVuKSB7XG4gICAgICAgIGFyZ3MucHVzaCgnLS1ydW4nKTtcbiAgICAgIH1cbiAgICAgIGlmIChkZWJ1Zykge1xuICAgICAgICBhcmdzLnB1c2goJy0td2FpdC1mb3ItZGVidWdnZXInKTtcbiAgICAgIH1cbiAgICAgIGlmIChzaW11bGF0b3IpIHtcbiAgICAgICAgYXJncy5wdXNoKCctLXVkaWQnKTtcbiAgICAgICAgYXJncy5wdXNoKHNpbXVsYXRvcik7XG4gICAgICB9XG4gICAgfVxuICAgIGJ1aWxkVGFyZ2V0cy5mb3JFYWNoKHRhcmdldCA9PiBhcmdzLnB1c2godGFyZ2V0KSk7XG5cbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy5fcnVuQnVja0NvbW1hbmRGcm9tUHJvamVjdFJvb3QoYXJncyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gVGhlIGJ1aWxkIGZhaWxlZC4gSG93ZXZlciwgYmVjYXVzZSAtLWtlZXAtZ29pbmcgd2FzIHNwZWNpZmllZCwgdGhlXG4gICAgICAvLyBidWlsZCByZXBvcnQgc2hvdWxkIGhhdmUgc3RpbGwgYmVlbiB3cml0dGVuIHVubGVzcyBhbnkgb2YgdGhlIHRhcmdldFxuICAgICAgLy8gYXJncyB3ZXJlIGludmFsaWQuIFdlIGNoZWNrIHRoZSBleGlzdGVuY2Ugb2YgdGhlIHJlcG9ydCBmaWxlIHRvIGJlIHN1cmUuXG4gICAgICB2YXIgZmlsZVdhc1dyaXR0ZW4gPSBhd2FpdCBmc1Byb21pc2UuZXhpc3RzKHJlcG9ydCk7XG4gICAgICBpZiAoIWZpbGVXYXNXcml0dGVuKSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHZhciBqc29uOiBzdHJpbmcgPSBhd2FpdCBmc1Byb21pc2UucmVhZEZpbGUocmVwb3J0LCB7ZW5jb2Rpbmc6ICdVVEYtOCd9KTtcbiAgICAgIGlmICghanNvbikge1xuICAgICAgICB0aHJvdyBFcnJvcihgUmVwb3J0IGZpbGUgJHtyZXBvcnR9IGZvciAke2J1aWxkVGFyZ2V0c30gd2FzIG9wZW5lZCwgYCArXG4gICAgICAgICAgICBgYnV0IG5vdGhpbmcgd2FzIHdyaXR0ZW4uYCk7XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGpzb24pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0aHJvdyBFcnJvcihgRmFpbGVkIHRvIHBhcnNlOlxcbiR7anNvbn1gKTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgZnNQcm9taXNlLnVubGluayhyZXBvcnQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0gZmlsZVBhdGggYWJzb2x1dGUgcGF0aC5cbiAgICovXG4gIGFzeW5jIGZpbmRUYXJnZXRzV2l0aFJlZmVyZW5jZWRGaWxlKGZpbGVQYXRoOiBzdHJpbmcsIG9wdGlvbnM6IGFueSk6IFByb21pc2Uge1xuICAgIHZhciBhcmdzID0gWyd0YXJnZXRzJywgJy0tcmVmZXJlbmNlZF9maWxlJywgZmlsZVBhdGhdO1xuXG4gICAgdmFyIHR5cGUgPSBvcHRpb25zWyd0eXBlJ107XG4gICAgaWYgKHR5cGUpIHtcbiAgICAgIGFyZ3MucHVzaCgnLS10eXBlJyk7XG4gICAgICB0eXBlLmZvckVhY2goKGJ1aWxkUnVsZVR5cGUpID0+IGFyZ3MucHVzaChidWlsZFJ1bGVUeXBlKSk7XG4gICAgfVxuXG4gICAgYXJncy5wdXNoKCctLWpzb24nKTtcblxuICAgIHZhciByZXN1bHQgPSBhd2FpdCB0aGlzLl9ydW5CdWNrQ29tbWFuZEZyb21Qcm9qZWN0Um9vdChhcmdzKTtcblxuICAgIHJlc3VsdC5qc29uID0gSlNPTi5wYXJzZShyZXN1bHQuc3Rkb3V0IHx8ICdbXScpO1xuICAgIC8vIFRPRE8obWJvbGluKTogVGhlIHRhcmdldCBzaG91bGQgYmUgYSBmaWVsZCBpbiB0aGUgSlNPTi5cbiAgICByZXN1bHQudGFyZ2V0cyA9IHJlc3VsdC5qc29uLm1hcCgodGFyZ2V0RGF0YSkgPT4ge1xuICAgICAgcmV0dXJuICcvLycgKyB0YXJnZXREYXRhWydidWNrLmJhc2VfcGF0aCddICsgJzonICsgdGFyZ2V0RGF0YVsnbmFtZSddO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGFzeW5jIGxpc3RBbGlhc2VzKCk6IFByb21pc2U8QXJyYXk8c3RyaW5nPj4ge1xuICAgIHZhciBhcmdzID0gWydhdWRpdCcsICdhbGlhcycsICctLWxpc3QnXTtcbiAgICB2YXIgcmVzdWx0ID0gYXdhaXQgdGhpcy5fcnVuQnVja0NvbW1hbmRGcm9tUHJvamVjdFJvb3QoYXJncyk7XG4gICAgdmFyIHN0ZG91dCA9IHJlc3VsdC5zdGRvdXQudHJpbSgpO1xuICAgIHJldHVybiBzdGRvdXQgPyBzdGRvdXQuc3BsaXQoJ1xcbicpIDogW107XG4gIH1cblxuICAvKipcbiAgICogQ3VycmVudGx5LCBpZiBgYWxpYXNPclRhcmdldGAgY29udGFpbnMgYSBmbGF2b3IsIHRoaXMgd2lsbCBmYWlsLlxuICAgKi9cbiAgYXN5bmMgcmVzb2x2ZUFsaWFzKGFsaWFzT3JUYXJnZXQ6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgdmFyIGFyZ3MgPSBbJ3RhcmdldHMnLCAnLS1yZXNvbHZlLWFsaWFzJywgYWxpYXNPclRhcmdldF07XG4gICAgdmFyIHJlc3VsdCA9IGF3YWl0IHRoaXMuX3J1bkJ1Y2tDb21tYW5kRnJvbVByb2plY3RSb290KGFyZ3MpO1xuICAgIHJldHVybiByZXN1bHQuc3Rkb3V0LnRyaW0oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDdXJyZW50bHksIGlmIGBhbGlhc09yVGFyZ2V0YCBjb250YWlucyBhIGZsYXZvciwgdGhpcyB3aWxsIGZhaWwuXG4gICAqXG4gICAqIEByZXR1cm4gUHJvbWlzZSByZXNvbHZlcyB0byBhYnNvbHV0ZSBwYXRoIHRvIG91dHB1dCBmaWxlXG4gICAqL1xuICBhc3luYyBvdXRwdXRGaWxlRm9yKGFsaWFzT3JUYXJnZXQ6IHN0cmluZyk6IFByb21pc2U8P3N0cmluZz4ge1xuICAgIHZhciBhcmdzID0gWyd0YXJnZXRzJywgJy0tc2hvdy1vdXRwdXQnLCBhbGlhc09yVGFyZ2V0XTtcbiAgICB2YXIgcmVzdWx0ID0gYXdhaXQgdGhpcy5fcnVuQnVja0NvbW1hbmRGcm9tUHJvamVjdFJvb3QoYXJncyk7XG4gICAgdmFyIHN0ZG91dCA9IHJlc3VsdC5zdGRvdXQudHJpbSgpO1xuICAgIGlmIChzdGRvdXQuaW5kZXhPZignICcpICE9PSAtMSkge1xuICAgICAgdmFyIHJlbGF0aXZlUGF0aCA9IHN0ZG91dC5zcGxpdCgnICcpWzFdO1xuICAgICAgcmV0dXJuIHBhdGgucmVzb2x2ZSh0aGlzLl9yb290UGF0aCwgcmVsYXRpdmVQYXRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEN1cnJlbnRseSwgaWYgYGFsaWFzT3JUYXJnZXRgIGNvbnRhaW5zIGEgZmxhdm9yLCB0aGlzIHdpbGwgZmFpbC5cbiAgICovXG4gIGFzeW5jIGJ1aWxkUnVsZVR5cGVGb3IoYWxpYXNPclRhcmdldDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICB2YXIgYXJncyA9IFsndGFyZ2V0cycsICctLWpzb24nLCBhbGlhc09yVGFyZ2V0XTtcbiAgICB2YXIgcmVzdWx0ID0gYXdhaXQgdGhpcy5fcnVuQnVja0NvbW1hbmRGcm9tUHJvamVjdFJvb3QoYXJncyk7XG4gICAgdmFyIGpzb246IEFycmF5PE9iamVjdD4gPSBKU09OLnBhcnNlKHJlc3VsdC5zdGRvdXQudHJpbSgpKTtcbiAgICByZXR1cm4ganNvblswXVsnYnVjay50eXBlJ107XG4gIH1cblxuICBhc3luYyBnZXRTZXJ2ZXJQb3J0KCk6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgdmFyIGFyZ3MgPSBbJ3NlcnZlcicsICdzdGF0dXMnLCAnLS1qc29uJywgJy0taHR0cC1wb3J0J107XG4gICAgdmFyIHJlc3VsdCA9IGF3YWl0IHRoaXMuX3J1bkJ1Y2tDb21tYW5kRnJvbVByb2plY3RSb290KGFyZ3MpO1xuICAgIHZhciBqc29uOiBPYmplY3QgPSBKU09OLnBhcnNlKHJlc3VsdC5zdGRvdXQpO1xuICAgIHJldHVybiBqc29uWydodHRwLnBvcnQnXTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IExvY2FsQnVja1Byb2plY3Q7XG4iXX0=
