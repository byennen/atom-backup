var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

// TODO(most): dispose the language/worker on project close.

var createHackLanguageIfNotExisting = _asyncToGenerator(function* (client, filePath) {
  var clientId = client.getID();
  if (clientToHackLanguage[clientId]) {
    return clientToHackLanguage[clientId];
  }
  var hackClient;

  var _ref = yield Promise.all([client.isHackClientAvailable(), client.findNearestFile('.hhconfig', pathUtil.dirname(filePath))]);

  var _ref2 = _slicedToArray(_ref, 2);

  var isHackClientAvailable = _ref2[0];
  var nearestPath = _ref2[1];

  // If multiple calls, were done asynchronously, make sure to return the single-created HackLanguage.
  if (clientToHackLanguage[clientId]) {
    return clientToHackLanguage[clientId];
  }
  if (isHackClientAvailable && nearestPath) {
    hackClient = client;
  } else {
    hackClient = new NullHackClient();
  }
  clientToHackLanguage[clientId] = new HackLanguage(hackClient, nearestPath);
  return clientToHackLanguage[clientId];
});

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

'use babel';

var invariant = require('assert');

var _require = require('nuclide-client');

var getClient = _require.getClient;

var _require2 = require('nuclide-atom-helpers');

var extractWordAtPosition = _require2.extractWordAtPosition;

var HackLanguage = require('./HackLanguage');
var NullHackClient = require('./NullHackClient');
var logger = require('nuclide-logging').getLogger();

var _require3 = require('nuclide-remote-uri');

var parse = _require3.parse;
var getPath = _require3.getPath;

var pathUtil = require('path');

var NULL_CONNECTION_ID = 'null';
var HACK_WORD_REGEX = /[a-zA-Z0-9_$]+/g;

/**
 * This is responsible for managing (creating/disposing) multiple HackLanguage instances,
 * creating the designated HackService instances with the NuclideClient it needs per remote project.
 * Also, it deelegates the language feature request to the correct HackLanguage instance.
 */
var clientToHackLanguage = {};
/**
 * Map of project id to an array of Hack Service diagnostics
 */
var clientToHackLinterCache = {};

module.exports = {

  findDiagnostics: _asyncToGenerator(function* (editor) {
    var buffer = editor.getBuffer();
    var hackLanguage = yield getHackLanguageForBuffer(buffer);
    if (!hackLanguage) {
      return [];
    }

    var editorPath = editor.getPath();
    var path = getPath(editorPath);
    var contents = editor.getText();
    var errors = yield hackLanguage.getDiagnostics(path, contents);
    var mixedErrors = errors;
    var clientId = getClientId(buffer);
    if (clientToHackLinterCache[clientId]) {
      mixedErrors = errors.concat(clientToHackLinterCache[clientId]);
    }

    mixedErrors.forEach(function (error) {
      // Preserve original Nuclide URI so remote files return with a "nuclide://" prefix and are
      // associated with the correct TextEditor and tab.
      error.filePath = editorPath;
    });

    return mixedErrors;
  }),

  fetchCompletionsForEditor: _asyncToGenerator(function* (editor, prefix) {
    var hackLanguage = yield getHackLanguageForBuffer(editor.getBuffer());
    if (!hackLanguage) {
      return [];
    }

    var path = getPath(editor.getPath());
    var contents = editor.getText();
    var cursor = editor.getLastCursor();
    var offset = editor.getBuffer().characterIndexForPosition(cursor.getBufferPosition());
    // The returned completions may have unrelated results, even though the offset is set on the end of the prefix.
    var completions = yield hackLanguage.getCompletions(path, contents, offset);
    // Filter out the completions that do not contain the prefix as a token in the match text case insentively.
    var tokenLowerCase = prefix.toLowerCase();

    var _require4 = require('./utils');

    var compareHackCompletions = _require4.compareHackCompletions;

    var hackCompletionsCompartor = compareHackCompletions(prefix);

    return completions.filter(function (completion) {
      return completion.matchText.toLowerCase().indexOf(tokenLowerCase) >= 0;
    })
    // Sort the auto-completions based on a scoring function considering:
    // case sensitivity, position in the completion, private functions and alphabetical order.
    .sort(function (completion1, completion2) {
      return hackCompletionsCompartor(completion1.matchText, completion2.matchText);
    });
  }),

  formatSourceFromEditor: _asyncToGenerator(function* (editor, range) {
    var buffer = editor.getBuffer();
    var hackLanguage = yield getHackLanguageForBuffer(buffer);
    if (!hackLanguage) {
      return buffer.getTextInRange(range);
    }

    var startPosition = buffer.characterIndexForPosition(range.start);
    var endPosition = buffer.characterIndexForPosition(range.end);
    return yield hackLanguage.formatSource(buffer.getText(), startPosition + 1, endPosition + 1);
  }),

  typeHintFromEditor: _asyncToGenerator(function* (editor, position) {
    var hackLanguage = yield getHackLanguageForBuffer(editor.getBuffer());
    if (!hackLanguage) {
      return null;
    }

    var matchData = extractWordAtPosition(editor, position, HACK_WORD_REGEX);
    if (!matchData) {
      return null;
    }

    var path = getPath(editor.getPath());
    var contents = editor.getText();

    var type = yield hackLanguage.getType(path, contents, matchData.wordMatch[0], position.row + 1, position.column + 1);
    if (!type) {
      return null;
    } else {
      return {
        hint: type,
        range: matchData.range
      };
    }
  }),

  /**
   * If a location can be found for the declaration, the return value will
   * resolve to an object with these fields: file, line, column.
   */
  findDefinition: _asyncToGenerator(function* (editor, line, column) {
    var hackLanguage = yield getHackLanguageForBuffer(editor.getBuffer());
    if (!hackLanguage) {
      return null;
    }

    var _parse = parse(editor.getPath());

    var path = _parse.path;
    var protocol = _parse.protocol;
    var host = _parse.host;

    var contents = editor.getText();
    var buffer = editor.getBuffer();
    var lineText = buffer.lineForRow(line);
    var result = yield hackLanguage.getDefinition(path, contents, line + 1, column + 1, lineText);
    if (!result || !result.length) {
      return null;
    }
    var pos = result[0];
    var range = null;
    // If the search string was expanded to include more than a valid regex php word.
    // e.g. in case of XHP tags, the start and end column are provided to underline the full range
    // to visit its definition.
    if (pos.searchStartColumn && pos.searchEndColumn) {
      var _require5 = require('atom');

      var Range = _require5.Range;

      range = new Range([line, pos.searchStartColumn], [line, pos.searchEndColumn]);
    }
    return {
      file: getFilePath(pos.path, protocol, host),
      line: pos.line,
      column: pos.column,
      range: range
    };
  }),

  findReferences: _asyncToGenerator(function* (editor, line, column) {
    var hackLanguage = yield getHackLanguageForBuffer(editor.getBuffer());
    if (!hackLanguage) {
      return null;
    }

    var _parse2 = parse(editor.getPath());

    var path = _parse2.path;
    var protocol = _parse2.protocol;
    var host = _parse2.host;

    var contents = editor.getText();
    var symbol = yield hackLanguage.getSymbolNameAtPosition(path, contents, line + 1, column + 1);
    if (!symbol) {
      return null;
    }
    var references = yield hackLanguage.getReferences(contents, symbol.name);
    if (!references) {
      return null;
    }
    // Transform filenames back to Nuclide URIs.
    references.forEach(function (ref) {
      ref.filename = getFilePath(ref.filename, protocol, host);
    });
    var baseUri = getFilePath(hackLanguage.getBasePath(), protocol, host);
    return { baseUri: baseUri, symbolName: symbol.name, references: references };
  }),

  isFinishedLoadingDependencies: _asyncToGenerator(function* (editor) {
    var hackLanguage = yield getHackLanguageForBuffer(editor.getBuffer());
    return hackLanguage.isFinishedLoadingDependencies();
  }),

  onDidSave: _asyncToGenerator(function* (editor) {
    var path = getPath(editor.getPath());
    var contents = editor.getText();
    var buffer = editor.getBuffer();
    var hackLanguage = yield getHackLanguageForBuffer(buffer);
    if (!hackLanguage) {
      return;
    }

    // Update the HackWorker model with the contents of the file opened or saved.
    yield hackLanguage.updateFile(path, contents);

    var diagnostics = [];
    try {
      diagnostics = yield hackLanguage.getServerDiagnostics();
    } catch (err) {
      logger.error('Hack: getServerDiagnostics failed', err);
    }
    clientToHackLinterCache[getClientId(buffer)] = diagnostics;
    // Trigger the linter to catch the new diagnostics.
    atom.commands.dispatch(atom.views.getView(editor), 'linter:lint');
  })
};

function getFilePath(filePath, protocol, host) {
  if (!protocol || !host) {
    return filePath;
  }
  return protocol + '//' + host + filePath;
}

function getClientId(buffer) {
  // A client id is needed when a client is verified to exist for that buffer and a HackLanguage exists.
  var client = getClient(buffer.getUri());
  invariant(client);
  return client.getID();
}

function getHackLanguageForBuffer(buffer) {
  var uri = buffer.getUri();
  var filePath = getPath(uri);
  // `getClient` can return null if a file path doesn't have a root directory in the tree.
  // Also, returns null when reloading Atom with open files, while the RemoteConnection creation is pending.
  var client = getClient(uri);
  if (!client) {
    return null;
  }
  return createHackLanguageIfNotExisting(client, filePath);
}
//# sourceMappingURL=data:application/json;base64,
