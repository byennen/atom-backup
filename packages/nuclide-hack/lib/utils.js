
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var MATCH_PREFIX_CASE_SENSITIVE_SCORE = 6;
var MATCH_PREFIX_CASE_INSENSITIVE_SCORE = 4;
var MATCH_TOKEN_CASE_SENSITIVE_SCORE = 2;
var MATCH_TOKEN_CASE_INSENSITIVE_SCORE = 0;
var MATCH_PRIVATE_FUNCTION_PENALTY = -4;
var MATCH_APLHABETICAL_SCORE = 1;

function compareHackCompletions(token) {
  var tokenLowerCase = token.toLowerCase();

  return function (matchText1, matchText2) {
    var matchTexts = [matchText1, matchText2];
    var scores = matchTexts.map(function (matchText, i) {
      if (matchText.startsWith(token)) {
        // Matches starting with the prefix gets the highest score.
        return MATCH_PREFIX_CASE_SENSITIVE_SCORE;
      } else if (matchText.toLowerCase().startsWith(tokenLowerCase)) {
        // Ignore case score matches gets a good score.
        return MATCH_PREFIX_CASE_INSENSITIVE_SCORE;
      }

      var score;
      if (matchText.indexOf(token) !== -1) {
        // Small score for a match that contains the token case-sensitive.
        score = MATCH_TOKEN_CASE_SENSITIVE_SCORE;
      } else {
        // Zero score for a match that contains the token without case-sensitive matching.
        score = MATCH_TOKEN_CASE_INSENSITIVE_SCORE;
      }

      // Private functions gets negative score.
      if (matchText.startsWith('_')) {
        score += MATCH_PRIVATE_FUNCTION_PENALTY;
      }
      return score;
    });
    // Finally, consider the alphabetical order, but not higher than any other score.
    if (matchTexts[0] < matchTexts[1]) {
      scores[0] += MATCH_APLHABETICAL_SCORE;
    } else {
      scores[1] += MATCH_APLHABETICAL_SCORE;
    }
    return scores[1] - scores[0];
  };
}

module.exports = {
  compareHackCompletions: compareHackCompletions
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL2FwbS9udWNsaWRlLWhhY2svbGliL3V0aWxzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFdBQVcsQ0FBQzs7Ozs7Ozs7OztBQVdaLElBQU0saUNBQWlDLEdBQUcsQ0FBQyxDQUFDO0FBQzVDLElBQU0sbUNBQW1DLEdBQUcsQ0FBQyxDQUFDO0FBQzlDLElBQU0sZ0NBQWdDLEdBQUcsQ0FBQyxDQUFDO0FBQzNDLElBQU0sa0NBQWtDLEdBQUcsQ0FBQyxDQUFDO0FBQzdDLElBQU0sOEJBQThCLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDMUMsSUFBTSx3QkFBd0IsR0FBRyxDQUFDLENBQUM7O0FBRW5DLFNBQVMsc0JBQXNCLENBQUMsS0FBYSxFQUFzRDtBQUNqRyxNQUFJLGNBQWMsR0FBRyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUM7O0FBRXpDLFNBQU8sVUFBQyxVQUFVLEVBQVUsVUFBVSxFQUFhO0FBQ2pELFFBQUksVUFBVSxHQUFHLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQzFDLFFBQUksTUFBTSxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsVUFBQyxTQUFTLEVBQUUsQ0FBQyxFQUFLO0FBQzVDLFVBQUksU0FBUyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRTs7QUFFL0IsZUFBTyxpQ0FBaUMsQ0FBQztPQUMxQyxNQUFNLElBQUksU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsRUFBRTs7QUFFN0QsZUFBTyxtQ0FBbUMsQ0FBQztPQUM1Qzs7QUFFRCxVQUFJLEtBQUssQ0FBQztBQUNWLFVBQUksU0FBUyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTs7QUFFbkMsYUFBSyxHQUFHLGdDQUFnQyxDQUFDO09BQzFDLE1BQU07O0FBRUwsYUFBSyxHQUFHLGtDQUFrQyxDQUFDO09BQzVDOzs7QUFHRCxVQUFJLFNBQVMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUU7QUFDN0IsYUFBSyxJQUFJLDhCQUE4QixDQUFDO09BQ3pDO0FBQ0QsYUFBTyxLQUFLLENBQUM7S0FDZCxDQUFDLENBQUM7O0FBRUgsUUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFO0FBQ2pDLFlBQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSx3QkFBd0IsQ0FBQztLQUN2QyxNQUFNO0FBQ0wsWUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLHdCQUF3QixDQUFDO0tBQ3ZDO0FBQ0QsV0FBTyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0dBQzlCLENBQUM7Q0FDSDs7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHO0FBQ2Ysd0JBQXNCLEVBQXRCLHNCQUFzQjtDQUN2QixDQUFDIiwiZmlsZSI6Ii92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL2FwbS9udWNsaWRlLWhhY2svbGliL3V0aWxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCc7XG4vKiBAZmxvdyAqL1xuXG4vKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpblxuICogdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuY29uc3QgTUFUQ0hfUFJFRklYX0NBU0VfU0VOU0lUSVZFX1NDT1JFID0gNjtcbmNvbnN0IE1BVENIX1BSRUZJWF9DQVNFX0lOU0VOU0lUSVZFX1NDT1JFID0gNDtcbmNvbnN0IE1BVENIX1RPS0VOX0NBU0VfU0VOU0lUSVZFX1NDT1JFID0gMjtcbmNvbnN0IE1BVENIX1RPS0VOX0NBU0VfSU5TRU5TSVRJVkVfU0NPUkUgPSAwO1xuY29uc3QgTUFUQ0hfUFJJVkFURV9GVU5DVElPTl9QRU5BTFRZID0gLTQ7XG5jb25zdCBNQVRDSF9BUExIQUJFVElDQUxfU0NPUkUgPSAxO1xuXG5mdW5jdGlvbiBjb21wYXJlSGFja0NvbXBsZXRpb25zKHRva2VuOiBzdHJpbmcpOiAobWF0Y2hUZXh0MTogc3RyaW5nLCBtYXRjaFRleHQyOiBzdHJpbmcpID0+IG51bWJlciB7XG4gIHZhciB0b2tlbkxvd2VyQ2FzZSA9IHRva2VuLnRvTG93ZXJDYXNlKCk7XG5cbiAgcmV0dXJuIChtYXRjaFRleHQxOiBzdHJpbmcsIG1hdGNoVGV4dDI6IHN0cmluZykgPT4ge1xuICAgIHZhciBtYXRjaFRleHRzID0gW21hdGNoVGV4dDEsIG1hdGNoVGV4dDJdO1xuICAgIHZhciBzY29yZXMgPSBtYXRjaFRleHRzLm1hcCgobWF0Y2hUZXh0LCBpKSA9PiB7XG4gICAgICBpZiAobWF0Y2hUZXh0LnN0YXJ0c1dpdGgodG9rZW4pKSB7XG4gICAgICAgIC8vIE1hdGNoZXMgc3RhcnRpbmcgd2l0aCB0aGUgcHJlZml4IGdldHMgdGhlIGhpZ2hlc3Qgc2NvcmUuXG4gICAgICAgIHJldHVybiBNQVRDSF9QUkVGSVhfQ0FTRV9TRU5TSVRJVkVfU0NPUkU7XG4gICAgICB9IGVsc2UgaWYgKG1hdGNoVGV4dC50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgodG9rZW5Mb3dlckNhc2UpKSB7XG4gICAgICAgIC8vIElnbm9yZSBjYXNlIHNjb3JlIG1hdGNoZXMgZ2V0cyBhIGdvb2Qgc2NvcmUuXG4gICAgICAgIHJldHVybiBNQVRDSF9QUkVGSVhfQ0FTRV9JTlNFTlNJVElWRV9TQ09SRTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNjb3JlO1xuICAgICAgaWYgKG1hdGNoVGV4dC5pbmRleE9mKHRva2VuKSAhPT0gLTEpIHtcbiAgICAgICAgLy8gU21hbGwgc2NvcmUgZm9yIGEgbWF0Y2ggdGhhdCBjb250YWlucyB0aGUgdG9rZW4gY2FzZS1zZW5zaXRpdmUuXG4gICAgICAgIHNjb3JlID0gTUFUQ0hfVE9LRU5fQ0FTRV9TRU5TSVRJVkVfU0NPUkU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBaZXJvIHNjb3JlIGZvciBhIG1hdGNoIHRoYXQgY29udGFpbnMgdGhlIHRva2VuIHdpdGhvdXQgY2FzZS1zZW5zaXRpdmUgbWF0Y2hpbmcuXG4gICAgICAgIHNjb3JlID0gTUFUQ0hfVE9LRU5fQ0FTRV9JTlNFTlNJVElWRV9TQ09SRTtcbiAgICAgIH1cblxuICAgICAgLy8gUHJpdmF0ZSBmdW5jdGlvbnMgZ2V0cyBuZWdhdGl2ZSBzY29yZS5cbiAgICAgIGlmIChtYXRjaFRleHQuc3RhcnRzV2l0aCgnXycpKSB7XG4gICAgICAgIHNjb3JlICs9IE1BVENIX1BSSVZBVEVfRlVOQ1RJT05fUEVOQUxUWTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzY29yZTtcbiAgICB9KTtcbiAgICAvLyBGaW5hbGx5LCBjb25zaWRlciB0aGUgYWxwaGFiZXRpY2FsIG9yZGVyLCBidXQgbm90IGhpZ2hlciB0aGFuIGFueSBvdGhlciBzY29yZS5cbiAgICBpZiAobWF0Y2hUZXh0c1swXSA8IG1hdGNoVGV4dHNbMV0pIHtcbiAgICAgIHNjb3Jlc1swXSArPSBNQVRDSF9BUExIQUJFVElDQUxfU0NPUkU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjb3Jlc1sxXSArPSBNQVRDSF9BUExIQUJFVElDQUxfU0NPUkU7XG4gICAgfVxuICAgIHJldHVybiBzY29yZXNbMV0gLSBzY29yZXNbMF07XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjb21wYXJlSGFja0NvbXBsZXRpb25zLFxufTtcbiJdfQ==
