
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _require = require('./utils');

var log = _require.log;
var logError = _require.logError;

// Sends chrome dev tools JSON messages to a callback.
// The Chrome dev tools protocol is detailed at:
//   https://developer.chrome.com/devtools/docs/protocol/1.1/index

var ChromeCallback = (function () {
  function ChromeCallback(callback) {
    _classCallCheck(this, ChromeCallback);

    this._callback = callback;
  }

  _createClass(ChromeCallback, [{
    key: 'replyWithError',
    value: function replyWithError(id, error) {
      this.replyToCommand(id, {}, error);
    }
  }, {
    key: 'replyToCommand',
    value: function replyToCommand(id, result, error) {
      var value = { id: id, result: result };
      if (error) {
        value.error = error;
      }
      this._sendJsonObject(value);
    }
  }, {
    key: 'sendMethod',
    value: function sendMethod(method, params) {
      this._sendJsonObject(createMessage(method, params));
    }
  }, {
    key: '_sendJsonObject',
    value: function _sendJsonObject(value) {
      var message = JSON.stringify(value);
      if (this._callback) {
        log('Sending JSON: ' + message);
        this._callback(message);
      } else {
        logError('Attempt to send json after dispose: ' + message);
      }
    }
  }, {
    key: 'dispose',
    value: function dispose() {
      this._callback = null;
    }
  }]);

  return ChromeCallback;
})();

function createMessage(method, params) {
  var result = { method: method };
  if (params) {
    result.params = params;
  }
  return result;
}

module.exports = ChromeCallback;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWRlYnVnZ2VyLWhodm0tcHJveHkvbGliL0Nocm9tZUNhbGxiYWNrLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFdBQVcsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7ZUFZVSxPQUFPLENBQUMsU0FBUyxDQUFDOztJQUFuQyxHQUFHLFlBQUgsR0FBRztJQUFFLFFBQVEsWUFBUixRQUFROzs7Ozs7SUFLWixjQUFjO0FBR1AsV0FIUCxjQUFjLENBR04sUUFBbUMsRUFBRTswQkFIN0MsY0FBYzs7QUFJaEIsUUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7R0FDM0I7O2VBTEcsY0FBYzs7V0FPSix3QkFBQyxFQUFVLEVBQUUsS0FBYSxFQUFRO0FBQzlDLFVBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztLQUNwQzs7O1dBRWEsd0JBQUMsRUFBVSxFQUFFLE1BQWMsRUFBRSxLQUFjLEVBQVE7QUFDL0QsVUFBSSxLQUFLLEdBQUcsRUFBQyxFQUFFLEVBQUYsRUFBRSxFQUFFLE1BQU0sRUFBTixNQUFNLEVBQUMsQ0FBQztBQUN6QixVQUFJLEtBQUssRUFBRTtBQUNULGFBQUssQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO09BQ3JCO0FBQ0QsVUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUM3Qjs7O1dBRVMsb0JBQUMsTUFBYyxFQUFFLE1BQWUsRUFBRTtBQUMxQyxVQUFJLENBQUMsZUFBZSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztLQUNyRDs7O1dBRWMseUJBQUMsS0FBYSxFQUFRO0FBQ25DLFVBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDcEMsVUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO0FBQ2xCLFdBQUcsQ0FBQyxnQkFBZ0IsR0FBRyxPQUFPLENBQUMsQ0FBQztBQUNoQyxZQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO09BQ3pCLE1BQU07QUFDTCxnQkFBUSxDQUFDLHNDQUFzQyxHQUFHLE9BQU8sQ0FBQyxDQUFDO09BQzVEO0tBQ0Y7OztXQUVNLG1CQUFTO0FBQ2QsVUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7S0FDdkI7OztTQW5DRyxjQUFjOzs7QUFzQ3BCLFNBQVMsYUFBYSxDQUFDLE1BQWMsRUFBRSxNQUFlLEVBQVU7QUFDOUQsTUFBSSxNQUFNLEdBQUcsRUFBQyxNQUFNLEVBQU4sTUFBTSxFQUFDLENBQUM7QUFDdEIsTUFBSSxNQUFNLEVBQUU7QUFDVixVQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztHQUN4QjtBQUNELFNBQU8sTUFBTSxDQUFDO0NBQ2Y7O0FBRUQsTUFBTSxDQUFDLE9BQU8sR0FBRyxjQUFjLENBQUMiLCJmaWxlIjoiL3Zhci9mb2xkZXJzL3hmL3JzcGg0X2M1NzMxNXJzNTd4eHNkc2tyeG52MzZ0MC9UL3RtcGVtbTJIdXB1Ymxpc2hfcGFja2FnZXMvbnBtL251Y2xpZGUtZGVidWdnZXItaGh2bS1wcm94eS9saWIvQ2hyb21lQ2FsbGJhY2suanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5cbnZhciB7bG9nLCBsb2dFcnJvcn0gPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbi8vIFNlbmRzIGNocm9tZSBkZXYgdG9vbHMgSlNPTiBtZXNzYWdlcyB0byBhIGNhbGxiYWNrLlxuLy8gVGhlIENocm9tZSBkZXYgdG9vbHMgcHJvdG9jb2wgaXMgZGV0YWlsZWQgYXQ6XG4vLyAgIGh0dHBzOi8vZGV2ZWxvcGVyLmNocm9tZS5jb20vZGV2dG9vbHMvZG9jcy9wcm90b2NvbC8xLjEvaW5kZXhcbmNsYXNzIENocm9tZUNhbGxiYWNrIHtcbiAgX2NhbGxiYWNrOiA/KG1lc3NhZ2U6IHN0cmluZykgPT4gdm9pZDtcblxuICBjb25zdHJ1Y3RvcihjYWxsYmFjazogKG1lc3NhZ2U6IHN0cmluZykgPT4gdm9pZCkge1xuICAgIHRoaXMuX2NhbGxiYWNrID0gY2FsbGJhY2s7XG4gIH1cblxuICByZXBseVdpdGhFcnJvcihpZDogbnVtYmVyLCBlcnJvcjogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5yZXBseVRvQ29tbWFuZChpZCwge30sIGVycm9yKTtcbiAgfVxuXG4gIHJlcGx5VG9Db21tYW5kKGlkOiBudW1iZXIsIHJlc3VsdDogT2JqZWN0LCBlcnJvcjogP3N0cmluZyk6IHZvaWQge1xuICAgIHZhciB2YWx1ZSA9IHtpZCwgcmVzdWx0fTtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIHZhbHVlLmVycm9yID0gZXJyb3I7XG4gICAgfVxuICAgIHRoaXMuX3NlbmRKc29uT2JqZWN0KHZhbHVlKTtcbiAgfVxuXG4gIHNlbmRNZXRob2QobWV0aG9kOiBzdHJpbmcsIHBhcmFtczogP09iamVjdCkge1xuICAgIHRoaXMuX3NlbmRKc29uT2JqZWN0KGNyZWF0ZU1lc3NhZ2UobWV0aG9kLCBwYXJhbXMpKTtcbiAgfVxuXG4gIF9zZW5kSnNvbk9iamVjdCh2YWx1ZTogT2JqZWN0KTogdm9pZCB7XG4gICAgdmFyIG1lc3NhZ2UgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgaWYgKHRoaXMuX2NhbGxiYWNrKSB7XG4gICAgICBsb2coJ1NlbmRpbmcgSlNPTjogJyArIG1lc3NhZ2UpO1xuICAgICAgdGhpcy5fY2FsbGJhY2sobWVzc2FnZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZ0Vycm9yKCdBdHRlbXB0IHRvIHNlbmQganNvbiBhZnRlciBkaXNwb3NlOiAnICsgbWVzc2FnZSk7XG4gICAgfVxuICB9XG5cbiAgZGlzcG9zZSgpOiB2b2lkIHtcbiAgICB0aGlzLl9jYWxsYmFjayA9IG51bGw7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlTWVzc2FnZShtZXRob2Q6IHN0cmluZywgcGFyYW1zOiA/T2JqZWN0KTogT2JqZWN0IHtcbiAgdmFyIHJlc3VsdCA9IHttZXRob2R9O1xuICBpZiAocGFyYW1zKSB7XG4gICAgcmVzdWx0LnBhcmFtcyA9IHBhcmFtcztcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENocm9tZUNhbGxiYWNrO1xuIl19
