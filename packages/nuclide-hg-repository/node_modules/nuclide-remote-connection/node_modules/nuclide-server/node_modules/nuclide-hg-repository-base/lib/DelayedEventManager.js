
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

/**
 * This class manages creating and canceling delayed events.
 */

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var DelayedEventManager = (function () {
  function DelayedEventManager(setTimeoutFunc, clearTimeoutFunc) {
    _classCallCheck(this, DelayedEventManager);

    // These functions are passed from above to facilitate testing.
    this._setTimeoutFunction = setTimeoutFunc;
    this._clearTimeoutFunction = clearTimeoutFunc;

    this._canAcceptEvents = true;
    this._ids = new Set();
  }

  _createClass(DelayedEventManager, [{
    key: 'dispose',
    value: function dispose() {
      this.cancelAllEvents();
    }

    /**
     * Sets whether the DelayedEventManager can currently accept more events.
     * If set to true, it can. If set to false, ::addEvent becomes a no-op.
     */
  }, {
    key: 'setCanAcceptEvents',
    value: function setCanAcceptEvents(canAcceptEvents) {
      this._canAcceptEvents = canAcceptEvents;
    }

    /**
     * Creates an event and returns an identifier that can be used to cancel it,
     * or null if the manager cannot accept events.
     */
  }, {
    key: 'addEvent',
    value: function addEvent(callback, delayInMilliseconds) {
      if (!this._canAcceptEvents) {
        return null;
      }
      // Prevent 'this' from being bound to DelayedEventManager.
      var setTimeoutFunction = this._setTimeoutFunction;
      var eventId = setTimeoutFunction(callback, delayInMilliseconds);
      this._ids.add(eventId);
      return eventId;
    }

    /**
     * Cancel the event with the given identifier.
     */
  }, {
    key: 'cancelEvent',
    value: function cancelEvent(identifier) {
      var hadId = this._ids['delete'](identifier);
      if (hadId) {
        // Prevent 'this' from being bound to DelayedEventManager.
        var clearTimeoutFunction = this._clearTimeoutFunction;
        clearTimeoutFunction(identifier);
      }
    }

    /**
     * Clears all pending events.
     */
  }, {
    key: 'cancelAllEvents',
    value: function cancelAllEvents() {
      // Prevent 'this' from being bound to DelayedEventManager.
      var clearTimeoutFunction = this._clearTimeoutFunction;
      this._ids.forEach(clearTimeoutFunction);
      this._ids.clear();
    }
  }]);

  return DelayedEventManager;
})();

module.exports = DelayedEventManager;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWhnLXJlcG9zaXRvcnktYmFzZS9saWIvRGVsYXllZEV2ZW50TWFuYWdlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQWVOLG1CQUFtQjtBQUNaLFdBRFAsbUJBQW1CLENBRXJCLGNBQXFELEVBQ3JELGdCQUEyQyxFQUMzQzswQkFKRSxtQkFBbUI7OztBQU1yQixRQUFJLENBQUMsbUJBQW1CLEdBQUcsY0FBYyxDQUFDO0FBQzFDLFFBQUksQ0FBQyxxQkFBcUIsR0FBRyxnQkFBZ0IsQ0FBQzs7QUFFOUMsUUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQztBQUM3QixRQUFJLENBQUMsSUFBSSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7R0FDdkI7O2VBWEcsbUJBQW1COztXQWFoQixtQkFBUztBQUNkLFVBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztLQUN4Qjs7Ozs7Ozs7V0FNaUIsNEJBQUMsZUFBd0IsRUFBUTtBQUNqRCxVQUFJLENBQUMsZ0JBQWdCLEdBQUcsZUFBZSxDQUFDO0tBQ3pDOzs7Ozs7OztXQU1PLGtCQUFDLFFBQW9CLEVBQUUsbUJBQTJCLEVBQVE7QUFDaEUsVUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtBQUMxQixlQUFPLElBQUksQ0FBQztPQUNiOztBQUVELFVBQUksa0JBQWtCLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDO0FBQ2xELFVBQUksT0FBTyxHQUFHLGtCQUFrQixDQUFDLFFBQVEsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO0FBQ2hFLFVBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3ZCLGFBQU8sT0FBTyxDQUFDO0tBQ2hCOzs7Ozs7O1dBS1UscUJBQUMsVUFBZSxFQUFRO0FBQ2pDLFVBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLFVBQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUN6QyxVQUFJLEtBQUssRUFBRTs7QUFFVCxZQUFJLG9CQUFvQixHQUFHLElBQUksQ0FBQyxxQkFBcUIsQ0FBQztBQUN0RCw0QkFBb0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztPQUNsQztLQUNGOzs7Ozs7O1dBS2MsMkJBQVM7O0FBRXRCLFVBQUksb0JBQW9CLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDO0FBQ3RELFVBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFDeEMsVUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztLQUNuQjs7O1NBNURHLG1CQUFtQjs7O0FBK0R6QixNQUFNLENBQUMsT0FBTyxHQUFHLG1CQUFtQixDQUFDIiwiZmlsZSI6Ii92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWhnLXJlcG9zaXRvcnktYmFzZS9saWIvRGVsYXllZEV2ZW50TWFuYWdlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cblxuLyoqXG4gKiBUaGlzIGNsYXNzIG1hbmFnZXMgY3JlYXRpbmcgYW5kIGNhbmNlbGluZyBkZWxheWVkIGV2ZW50cy5cbiAqL1xuY2xhc3MgRGVsYXllZEV2ZW50TWFuYWdlciB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHNldFRpbWVvdXRGdW5jOiAoY2FsbGJhY2s6IGFueSwgZGVsYXk6IG51bWJlcikgPT4gYW55LFxuICAgIGNsZWFyVGltZW91dEZ1bmM6IChpZGVudGlmaWVyOiBhbnkpID0+IHZvaWRcbiAgKSB7XG4gICAgLy8gVGhlc2UgZnVuY3Rpb25zIGFyZSBwYXNzZWQgZnJvbSBhYm92ZSB0byBmYWNpbGl0YXRlIHRlc3RpbmcuXG4gICAgdGhpcy5fc2V0VGltZW91dEZ1bmN0aW9uID0gc2V0VGltZW91dEZ1bmM7XG4gICAgdGhpcy5fY2xlYXJUaW1lb3V0RnVuY3Rpb24gPSBjbGVhclRpbWVvdXRGdW5jO1xuXG4gICAgdGhpcy5fY2FuQWNjZXB0RXZlbnRzID0gdHJ1ZTtcbiAgICB0aGlzLl9pZHMgPSBuZXcgU2V0KCk7XG4gIH1cblxuICBkaXNwb3NlKCk6IHZvaWQge1xuICAgIHRoaXMuY2FuY2VsQWxsRXZlbnRzKCk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB3aGV0aGVyIHRoZSBEZWxheWVkRXZlbnRNYW5hZ2VyIGNhbiBjdXJyZW50bHkgYWNjZXB0IG1vcmUgZXZlbnRzLlxuICAgKiBJZiBzZXQgdG8gdHJ1ZSwgaXQgY2FuLiBJZiBzZXQgdG8gZmFsc2UsIDo6YWRkRXZlbnQgYmVjb21lcyBhIG5vLW9wLlxuICAgKi9cbiAgc2V0Q2FuQWNjZXB0RXZlbnRzKGNhbkFjY2VwdEV2ZW50czogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuX2NhbkFjY2VwdEV2ZW50cyA9IGNhbkFjY2VwdEV2ZW50cztcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGV2ZW50IGFuZCByZXR1cm5zIGFuIGlkZW50aWZpZXIgdGhhdCBjYW4gYmUgdXNlZCB0byBjYW5jZWwgaXQsXG4gICAqIG9yIG51bGwgaWYgdGhlIG1hbmFnZXIgY2Fubm90IGFjY2VwdCBldmVudHMuXG4gICAqL1xuICBhZGRFdmVudChjYWxsYmFjazogKCkgPT4gdm9pZCwgZGVsYXlJbk1pbGxpc2Vjb25kczogbnVtYmVyKTogP2FueSB7XG4gICAgaWYgKCF0aGlzLl9jYW5BY2NlcHRFdmVudHMpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvLyBQcmV2ZW50ICd0aGlzJyBmcm9tIGJlaW5nIGJvdW5kIHRvIERlbGF5ZWRFdmVudE1hbmFnZXIuXG4gICAgdmFyIHNldFRpbWVvdXRGdW5jdGlvbiA9IHRoaXMuX3NldFRpbWVvdXRGdW5jdGlvbjtcbiAgICB2YXIgZXZlbnRJZCA9IHNldFRpbWVvdXRGdW5jdGlvbihjYWxsYmFjaywgZGVsYXlJbk1pbGxpc2Vjb25kcyk7XG4gICAgdGhpcy5faWRzLmFkZChldmVudElkKTtcbiAgICByZXR1cm4gZXZlbnRJZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYW5jZWwgdGhlIGV2ZW50IHdpdGggdGhlIGdpdmVuIGlkZW50aWZpZXIuXG4gICAqL1xuICBjYW5jZWxFdmVudChpZGVudGlmaWVyOiBhbnkpOiB2b2lkIHtcbiAgICB2YXIgaGFkSWQgPSB0aGlzLl9pZHMuZGVsZXRlKGlkZW50aWZpZXIpO1xuICAgIGlmIChoYWRJZCkge1xuICAgICAgLy8gUHJldmVudCAndGhpcycgZnJvbSBiZWluZyBib3VuZCB0byBEZWxheWVkRXZlbnRNYW5hZ2VyLlxuICAgICAgdmFyIGNsZWFyVGltZW91dEZ1bmN0aW9uID0gdGhpcy5fY2xlYXJUaW1lb3V0RnVuY3Rpb247XG4gICAgICBjbGVhclRpbWVvdXRGdW5jdGlvbihpZGVudGlmaWVyKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXJzIGFsbCBwZW5kaW5nIGV2ZW50cy5cbiAgICovXG4gIGNhbmNlbEFsbEV2ZW50cygpOiB2b2lkIHtcbiAgICAvLyBQcmV2ZW50ICd0aGlzJyBmcm9tIGJlaW5nIGJvdW5kIHRvIERlbGF5ZWRFdmVudE1hbmFnZXIuXG4gICAgdmFyIGNsZWFyVGltZW91dEZ1bmN0aW9uID0gdGhpcy5fY2xlYXJUaW1lb3V0RnVuY3Rpb247XG4gICAgdGhpcy5faWRzLmZvckVhY2goY2xlYXJUaW1lb3V0RnVuY3Rpb24pO1xuICAgIHRoaXMuX2lkcy5jbGVhcigpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRGVsYXllZEV2ZW50TWFuYWdlcjtcbiJdfQ==
