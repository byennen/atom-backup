
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var main = _asyncToGenerator(function* (args) {
  try {
    var port = args.port;
    var key = args.key;
    var cert = args.cert;
    var ca = args.ca;

    if (key && cert && ca) {
      key = fs.readFileSync(key);
      cert = fs.readFileSync(cert);
      ca = fs.readFileSync(ca);
    }
    var server = new NuclideServer({
      port: port,
      serverKey: key,
      serverCertificate: cert,
      certificateAuthorityCertificate: ca,
      trackEventLoop: true
    });
    yield server.connect();
    logger.info('NuclideServer started on port ' + port + '.');
  } catch (e) {
    logger.error(e);
    process.exit(1);
  }
}

// This should never happen because the server must be started with stderr redirected to a log file.
);

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

var fs = require('fs');
var logger = require('nuclide-logging').getLogger();
var NuclideServer = require('./NuclideServer');

var DEFAULT_PORT = 9090;

process.stderr.on('error', function (error) {
  throw new Error('Can not write to stderr! :' + error);
});

process.on('uncaughtException', function (err) {
  // Log the error and continue the server crash.
  logger.error('uncaughtException:', err);
  // According to the docs, we need to close our server when this happens once we logged or handled it:
  // https://nodejs.org/api/process.html#process_event_uncaughtexception
  process.exit(1);
});

// This works in io.js as of v2.4.0 (possibly earlier versions, as well). Support for this was
// introduced by https://github.com/nodejs/io.js/pull/758 in io.js.
//
// Unfortunately, the analogous change was rejected in Node v0.12.x:
// https://github.com/joyent/node/issues/8997.
//
// We include this code here in anticipation of the Node/io.js merger.
process.on('unhandledRejection', function (error, promise) {
  logger.error('Unhandled promise rejection ' + promise + '. Error:', error);
});

var argv = require('yargs')['default']('port', DEFAULT_PORT).argv;

main(argv);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXNlcnZlci9saWIvbWFpbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLENBQUM7Ozs7Ozs7Ozs7SUFpQkcsSUFBSSxxQkFBbkIsV0FBb0IsSUFBSSxFQUFFO0FBQ3hCLE1BQUk7UUFDRyxJQUFJLEdBQW1CLElBQUksQ0FBM0IsSUFBSTtRQUFFLEdBQUcsR0FBYyxJQUFJLENBQXJCLEdBQUc7UUFBRSxJQUFJLEdBQVEsSUFBSSxDQUFoQixJQUFJO1FBQUUsRUFBRSxHQUFJLElBQUksQ0FBVixFQUFFOztBQUN4QixRQUFJLEdBQUcsSUFBSSxJQUFJLElBQUksRUFBRSxFQUFFO0FBQ3JCLFNBQUcsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzNCLFVBQUksR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzdCLFFBQUUsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQzFCO0FBQ0QsUUFBSSxNQUFNLEdBQUcsSUFBSSxhQUFhLENBQUM7QUFDN0IsVUFBSSxFQUFKLElBQUk7QUFDSixlQUFTLEVBQUUsR0FBRztBQUNkLHVCQUFpQixFQUFFLElBQUk7QUFDdkIscUNBQStCLEVBQUUsRUFBRTtBQUNuQyxvQkFBYyxFQUFFLElBQUk7S0FDckIsQ0FBQyxDQUFDO0FBQ0gsVUFBTSxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDdkIsVUFBTSxDQUFDLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUM7R0FDNUQsQ0FBQyxPQUFPLENBQUMsRUFBRTtBQUNWLFVBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEIsV0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztHQUNqQjtDQUNGOzs7Ozs7O0FBM0JELElBQUksRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN2QixJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUNwRCxJQUFJLGFBQWEsR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQzs7QUFFL0MsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDOztBQTBCeEIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLFVBQUMsS0FBSyxFQUFLO0FBQ3BDLFFBQU0sSUFBSSxLQUFLLENBQUMsNEJBQTRCLEdBQUcsS0FBSyxDQUFDLENBQUM7Q0FDdkQsQ0FBQyxDQUFDOztBQUVILE9BQU8sQ0FBQyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsVUFBQyxHQUFHLEVBQUs7O0FBRXZDLFFBQU0sQ0FBQyxLQUFLLENBQUMsb0JBQW9CLEVBQUUsR0FBRyxDQUFDLENBQUM7OztBQUd4QyxTQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ2pCLENBQUMsQ0FBQzs7Ozs7Ozs7O0FBU0gsT0FBTyxDQUFDLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSxVQUFDLEtBQUssRUFBRSxPQUFPLEVBQUs7QUFDbkQsUUFBTSxDQUFDLEtBQUssa0NBQWdDLE9BQU8sZUFBWSxLQUFLLENBQUMsQ0FBQztDQUN2RSxDQUFDLENBQUM7O0FBRUgsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxXQUNmLENBQUMsTUFBTSxFQUFFLFlBQVksQ0FBQyxDQUM3QixJQUFJLENBQUM7O0FBRVYsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDIiwiZmlsZSI6Ii92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXNlcnZlci9saWIvbWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG52YXIgbG9nZ2VyID0gcmVxdWlyZSgnbnVjbGlkZS1sb2dnaW5nJykuZ2V0TG9nZ2VyKCk7XG52YXIgTnVjbGlkZVNlcnZlciA9IHJlcXVpcmUoJy4vTnVjbGlkZVNlcnZlcicpO1xuXG52YXIgREVGQVVMVF9QT1JUID0gOTA5MDtcblxuYXN5bmMgZnVuY3Rpb24gbWFpbihhcmdzKSB7XG4gIHRyeSB7XG4gICAgdmFyIHtwb3J0LCBrZXksIGNlcnQsIGNhfSA9IGFyZ3M7XG4gICAgaWYgKGtleSAmJiBjZXJ0ICYmIGNhKSB7XG4gICAgICBrZXkgPSBmcy5yZWFkRmlsZVN5bmMoa2V5KTtcbiAgICAgIGNlcnQgPSBmcy5yZWFkRmlsZVN5bmMoY2VydCk7XG4gICAgICBjYSA9IGZzLnJlYWRGaWxlU3luYyhjYSk7XG4gICAgfVxuICAgIHZhciBzZXJ2ZXIgPSBuZXcgTnVjbGlkZVNlcnZlcih7XG4gICAgICBwb3J0LFxuICAgICAgc2VydmVyS2V5OiBrZXksXG4gICAgICBzZXJ2ZXJDZXJ0aWZpY2F0ZTogY2VydCxcbiAgICAgIGNlcnRpZmljYXRlQXV0aG9yaXR5Q2VydGlmaWNhdGU6IGNhLFxuICAgICAgdHJhY2tFdmVudExvb3A6IHRydWUsXG4gICAgfSk7XG4gICAgYXdhaXQgc2VydmVyLmNvbm5lY3QoKTtcbiAgICBsb2dnZXIuaW5mbygnTnVjbGlkZVNlcnZlciBzdGFydGVkIG9uIHBvcnQgJyArIHBvcnQgKyAnLicpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nZ2VyLmVycm9yKGUpO1xuICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgfVxufVxuXG4vLyBUaGlzIHNob3VsZCBuZXZlciBoYXBwZW4gYmVjYXVzZSB0aGUgc2VydmVyIG11c3QgYmUgc3RhcnRlZCB3aXRoIHN0ZGVyciByZWRpcmVjdGVkIHRvIGEgbG9nIGZpbGUuXG5wcm9jZXNzLnN0ZGVyci5vbignZXJyb3InLCAoZXJyb3IpID0+IHtcbiAgdGhyb3cgbmV3IEVycm9yKCdDYW4gbm90IHdyaXRlIHRvIHN0ZGVyciEgOicgKyBlcnJvcik7XG59KTtcblxucHJvY2Vzcy5vbigndW5jYXVnaHRFeGNlcHRpb24nLCAoZXJyKSA9PiB7XG4gIC8vIExvZyB0aGUgZXJyb3IgYW5kIGNvbnRpbnVlIHRoZSBzZXJ2ZXIgY3Jhc2guXG4gIGxvZ2dlci5lcnJvcigndW5jYXVnaHRFeGNlcHRpb246JywgZXJyKTtcbiAgLy8gQWNjb3JkaW5nIHRvIHRoZSBkb2NzLCB3ZSBuZWVkIHRvIGNsb3NlIG91ciBzZXJ2ZXIgd2hlbiB0aGlzIGhhcHBlbnMgb25jZSB3ZSBsb2dnZWQgb3IgaGFuZGxlZCBpdDpcbiAgLy8gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9wcm9jZXNzLmh0bWwjcHJvY2Vzc19ldmVudF91bmNhdWdodGV4Y2VwdGlvblxuICBwcm9jZXNzLmV4aXQoMSk7XG59KTtcblxuLy8gVGhpcyB3b3JrcyBpbiBpby5qcyBhcyBvZiB2Mi40LjAgKHBvc3NpYmx5IGVhcmxpZXIgdmVyc2lvbnMsIGFzIHdlbGwpLiBTdXBwb3J0IGZvciB0aGlzIHdhc1xuLy8gaW50cm9kdWNlZCBieSBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL2lvLmpzL3B1bGwvNzU4IGluIGlvLmpzLlxuLy9cbi8vIFVuZm9ydHVuYXRlbHksIHRoZSBhbmFsb2dvdXMgY2hhbmdlIHdhcyByZWplY3RlZCBpbiBOb2RlIHYwLjEyLng6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vam95ZW50L25vZGUvaXNzdWVzLzg5OTcuXG4vL1xuLy8gV2UgaW5jbHVkZSB0aGlzIGNvZGUgaGVyZSBpbiBhbnRpY2lwYXRpb24gb2YgdGhlIE5vZGUvaW8uanMgbWVyZ2VyLlxucHJvY2Vzcy5vbigndW5oYW5kbGVkUmVqZWN0aW9uJywgKGVycm9yLCBwcm9taXNlKSA9PiB7XG4gIGxvZ2dlci5lcnJvcihgVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uICR7cHJvbWlzZX0uIEVycm9yOmAsIGVycm9yKTtcbn0pO1xuXG52YXIgYXJndiA9IHJlcXVpcmUoJ3lhcmdzJylcbiAgICAuZGVmYXVsdCgncG9ydCcsIERFRkFVTFRfUE9SVClcbiAgICAuYXJndjtcblxubWFpbihhcmd2KTtcbiJdfQ==
