
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var blocked = require('./blocked');
var connect = require('connect');
var fs = require('fs');

var _require = require('./service-manager');

var getService = _require.getService;
var getRemoteEventName = _require.getRemoteEventName;

var http = require('http');
var https = require('https');

var _require2 = require('./config');

var SERVICE_FRAMEWORK_EVENT_CHANNEL = _require2.SERVICE_FRAMEWORK_EVENT_CHANNEL;
var SERVICE_FRAMEWORK_RPC_CHANNEL = _require2.SERVICE_FRAMEWORK_RPC_CHANNEL;

var _require3 = require('nuclide-service-transformer');

var parseServiceApiSync = _require3.parseServiceApiSync;

var path = require('path');

var _require4 = require('events');

var EventEmitter = _require4.EventEmitter;

var WebSocketServer = require('ws').Server;

var _require5 = require('./utils');

var deserializeArgs = _require5.deserializeArgs;
var sendJsonResponse = _require5.sendJsonResponse;
var sendTextResponse = _require5.sendTextResponse;

var _require6 = require('nuclide-version');

var getVersion = _require6.getVersion;

var logger = require('nuclide-logging').getLogger();

var SERVER_SHUTDOWN_TIMEOUT_MS = 1000;
var STAT_BIN_SIZE_MS = 20;

var EVENT_HANDLE_REGISTERED = '_nuclideServerEventHandleRegstered';
var idIncrement = 0;

var NuclideServer = (function () {
  function NuclideServer(options) {
    _classCallCheck(this, NuclideServer);

    var serverKey = options.serverKey;
    var serverCertificate = options.serverCertificate;
    var port = options.port;
    var certificateAuthorityCertificate = options.certificateAuthorityCertificate;
    var trackEventLoop = options.trackEventLoop;

    this._app = connect();
    this._attachUtilHandlers(this._app);
    if (serverKey && serverCertificate && certificateAuthorityCertificate) {
      var webServerOptions = {
        key: serverKey,
        cert: serverCertificate,
        ca: certificateAuthorityCertificate,
        requestCert: true,
        rejectUnauthorized: true
      };

      this._webServer = https.createServer(webServerOptions, this._app);
    } else {
      this._webServer = http.createServer(this._app);
    }
    this._port = port;

    this._webSocketServer = this._createWebSocketServer();
    this._clients = {};
    this._eventSubscriptions = new Map();

    var eventbus = this.eventbus = new EventEmitter();
    // Any service can use the eventbus API like: `this.publish(eventName, {})`.
    this.publish = this.broadcast = eventbus.emit.bind(eventbus);
    this.subscribe = eventbus.on.bind(eventbus);
    this.subscribeOnce = eventbus.once.bind(eventbus);
    this.unsubscribe = eventbus.removeListener.bind(eventbus);
    this._eventEmitters = {};

    this._setupServices();

    if (trackEventLoop) {
      blocked(function (ms) {
        logger.info('NuclideServer event loop blocked for ' + ms + 'ms');
      });
    }
  }

  _createClass(NuclideServer, [{
    key: '_attachUtilHandlers',
    value: function _attachUtilHandlers(app) {
      var _this = this;

      // Add specific method handlers.
      ['get', 'post', 'delete', 'put'].forEach(function (methodName) {
        _this._app[methodName] = function (uri, handler) {
          _this._app.use(uri, function (request, response, next) {
            if (request.method.toUpperCase() !== methodName.toUpperCase()) {
              // skip if method doesn't match.
              return next();
            } else {
              handler(request, response, next);
            }
          });
        };
      });
    }
  }, {
    key: '_createWebSocketServer',
    value: function _createWebSocketServer() {
      var _this2 = this;

      var webSocketServer = new WebSocketServer({ server: this._webServer });
      webSocketServer.on('connection', function (socket) {
        return _this2._onConnection(socket);
      });
      webSocketServer.on('error', function (error) {
        return logger.error('WebSocketServer Error:', error);
      });
      return webSocketServer;
    }
  }, {
    key: '_getServiceFrameworkServiceAndRegisterEventHandle',
    value: function _getServiceFrameworkServiceAndRegisterEventHandle(serviceConfig, serviceOptions) {
      var _this3 = this;

      var localServiceInstance = getService(serviceConfig.name, serviceOptions, serviceConfig.implementation);
      if (localServiceInstance[EVENT_HANDLE_REGISTERED]) {
        return localServiceInstance;
      }

      var serviceApi = parseServiceApiSync(serviceConfig.definition, serviceConfig.name);

      serviceApi.eventMethodNames.forEach(function (methodName) {
        localServiceInstance[methodName].call(localServiceInstance, function () {
          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          var eventName = getRemoteEventName(serviceConfig.name, methodName, serviceOptions);
          (_this3._eventSubscriptions.get(eventName) || []).forEach(function (clientId) {
            var client = _this3._clients[clientId];

            if (!client) {
              logger.warn('Client with clientId: %s not found!', clientId);
              return;
            }

            _this3._sendSocketMessage(client, {
              channel: SERVICE_FRAMEWORK_EVENT_CHANNEL,
              event: {
                name: eventName,
                args: args
              }
            });
          });
        });
      });
      Object.defineProperty(localServiceInstance, EVENT_HANDLE_REGISTERED, { value: true });

      return localServiceInstance;
    }
  }, {
    key: '_registerServiceWithServiceFramework',
    value: function _registerServiceWithServiceFramework(serviceConfig) {
      var _this4 = this;

      var serviceApi = parseServiceApiSync(serviceConfig.definition, serviceConfig.name);

      serviceApi.rpcMethodNames.forEach(function (methodName) {
        _this4._registerService('/' + serviceApi.className + '/' + methodName,

        // Take serviceOptions as first argument for serviceFramework service.
        // TODO(chenshen) seperate the logic of service initialization.
        function (serviceOptions) {
          for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }

          var localServiceInstance = _this4._getServiceFrameworkServiceAndRegisterEventHandle(serviceConfig, serviceOptions);
          return localServiceInstance[methodName].apply(localServiceInstance, args);
        }, 'post');
      });
    }
  }, {
    key: '_registerServiceWithoutServiceFramework',
    value: function _registerServiceWithoutServiceFramework(serviceFilePath) {
      var _require7 = require(serviceFilePath);

      var urlHandlers = _require7.urlHandlers;
      var services = _require7.services;
      var initialize = _require7.initialize;

      for (var serviceName in services) {
        var serviceConfig = services[serviceName];
        this._registerService(serviceName, serviceConfig.handler, serviceConfig.method, serviceConfig.text);
      }

      if (urlHandlers) {
        for (var url in urlHandlers) {
          var handlerConfig = urlHandlers[url];
          this._attachUrlHandler(url, handlerConfig.handler, handlerConfig.method);
        }
      }

      if (initialize) {
        initialize(this);
      }
    }
  }, {
    key: '_setupServices',
    value: function _setupServices() {
      var _this5 = this;

      // Lazy require these functions so that we could spyOn them while testing in
      // ServiceIntegrationTestHelper.

      var _require8 = require('./config');

      var loadConfigsOfServiceWithServiceFramework = _require8.loadConfigsOfServiceWithServiceFramework;
      var loadConfigsOfServiceWithoutServiceFramework = _require8.loadConfigsOfServiceWithoutServiceFramework;

      this._serviceRegistry = {};
      this._setupStatsHandler();
      this._setupVersionHandler();
      this._setupShutdownHandler();
      this._setupSubscriptionHandler();
      this._setupServiceFrameworkSubscriptionHandler();
      this._serviceWithoutServiceFrameworkConfigs = loadConfigsOfServiceWithoutServiceFramework();
      this._serviceWithServiceFrameworkConfigs = loadConfigsOfServiceWithServiceFramework();

      this._serviceWithoutServiceFrameworkConfigs.forEach(function (config) {
        _this5._registerServiceWithoutServiceFramework(config);
        logger.info('Registered service ' + config + ' without ServiceFramework.');
      });

      this._serviceWithServiceFrameworkConfigs.forEach(function (config) {
        _this5._registerServiceWithServiceFramework(config);
        logger.info('Registered service ' + config.name + ' with ServiceFramework.');
      });

      // Setup error handler.
      this._app.use(function (error, request, response, next) {
        if (error) {
          sendJsonResponse(response, { code: error.code, message: error.message }, 500);
        } else {
          next();
        }
      });
    }
  }, {
    key: '_setupStatsHandler',
    value: function _setupStatsHandler() {
      var _this6 = this;

      this._clearStats();
      this._registerService('/server/getStats', function () {
        return {
          errors: _this6._errors,
          responses: _this6._responses
        };
      }, 'get', false);
      this._registerService('/server/clearStats', this._clearStats.bind(this), 'post', false);
    }
  }, {
    key: '_setupVersionHandler',
    value: function _setupVersionHandler() {
      var _this7 = this;

      this._version = getVersion().toString();
      this._registerService('/server/version', function () {
        return _this7._version;
      }, 'post', true);
    }
  }, {
    key: '_setupShutdownHandler',
    value: function _setupShutdownHandler() {
      var _this8 = this;

      var shutdownServer = function shutdownServer() {
        logger.info('Shutting down the server');
        try {
          _this8.close();
        } catch (e) {
          logger.error('Error while shutting down, but proceeding anyway:', e);
        } finally {
          process.exit(0);
        }
      };
      this._registerService('/server/shutdown', function () {
        logger.info('Server received a shutdown request - terminating!');
        // Shutdown after timeout to give a chance to reply success to the shutdown request.
        setTimeout(shutdownServer, SERVER_SHUTDOWN_TIMEOUT_MS);
      }, 'post');
    }
  }, {
    key: '_setupSubscriptionHandler',
    value: function _setupSubscriptionHandler() {
      var _this9 = this;

      this._registerService('/eventbus/subscribe', function (clientId, channel, options) {
        var client = _this9._clients[clientId];
        if (!client) {
          return logger.error('Client with clientId: %s not found!', clientId);
        } else if (client.subscriptions[channel]) {
          return logger.warn('Client %s already subscribed to channel: %s', clientId, channel);
        } else {
          var subscibeHandler = client.subscriptions[channel] = function (event) {
            return _this9._sendSocketMessage(client, { channel: channel, event: event });
          };
          _this9.subscribe(channel, subscibeHandler);
        }
        if (options.eventEmitterId) {
          _this9._consumeEventEmitter(options.eventEmitterId, channel, options.eventNames);
        }
      }, 'post');
    }
  }, {
    key: '_setupServiceFrameworkSubscriptionHandler',
    value: function _setupServiceFrameworkSubscriptionHandler() {
      var _this10 = this;

      this._registerService('/serviceFramework/subscribeEvent', function (serviceOptions, clientId, serviceName, methodName) {

        // Create the service instance and register the event handle.

        var _serviceWithServiceFrameworkConfigs$filter = _this10._serviceWithServiceFrameworkConfigs.filter(function (config) {
          return config.name === serviceName;
        });

        var _serviceWithServiceFrameworkConfigs$filter2 = _slicedToArray(_serviceWithServiceFrameworkConfigs$filter, 1);

        var serviceConfig = _serviceWithServiceFrameworkConfigs$filter2[0];

        _this10._getServiceFrameworkServiceAndRegisterEventHandle(serviceConfig, serviceOptions);

        var eventName = getRemoteEventName(serviceName, methodName, serviceOptions);

        _this10._eventSubscriptions.set(eventName, (_this10._eventSubscriptions.get(eventName) || new Set()).add(clientId));

        logger.debug(clientId + ' subscribed to ' + eventName);
      }, 'post');

      this._registerService('/serviceFramework/unsubscribeEvent', function (serviceOptions, clientId, serviceName, methodName) {
        var eventName = getRemoteEventName(serviceName, methodName, serviceOptions);
        if (_this10._eventSubscriptions.has(eventName)) {
          _this10._eventSubscriptions.get(eventName)['delete'](clientId);
        }
        logger.debug(clientId + ' unsubscribed to ' + eventName);
      }, 'post');
    }
  }, {
    key: 'connect',
    value: function connect() {
      var _this11 = this;

      return new Promise(function (resolve, reject) {
        _this11._webServer.on('listening', function () {
          resolve();
        });
        _this11._webServer.on('error', function (e) {
          _this11._webServer.removeAllListeners();
          reject(e);
        });
        _this11._webServer.listen(_this11._port);
      });
    }

    /**
     * Calls a registered service with a name and arguments.
     */
  }, {
    key: 'callService',
    value: function callService(serviceName, args) {
      var serviceFunction = this._serviceRegistry[serviceName];
      if (!serviceFunction) {
        throw Error('No service registered with name: ' + serviceName);
      }
      return this._recordRequestStats(serviceName, args, serviceFunction);
    }

    /**
     * Given a service request, records response time and errors
     */
  }, {
    key: '_recordRequestStats',
    value: _asyncToGenerator(function* (serviceName, args, serviceFunction) {
      var requestStart = Date.now();
      var result = null;

      try {
        result = yield serviceFunction.apply(this, args);

        var responseTime = Date.now() - requestStart;
        var bin = Math.floor(responseTime / STAT_BIN_SIZE_MS) * STAT_BIN_SIZE_MS;
        if (!this._responses[bin]) {
          this._responses[bin] = [];
        }
        this._responses[bin].push({ serviceName: serviceName });
      } catch (error) {
        var responseTime = Date.now() - requestStart;
        this._errors.push({
          error: error,
          responseTime: responseTime,
          serviceName: serviceName
        });
        throw error;
      }

      return result;
    })
  }, {
    key: '_clearStats',
    value: function _clearStats() {
      this._errors = [];
      return this._responses = {};
    }

    /**
     * Registers a service function to a service name.
     * This allows simple future calls of the service by name and arguments or http-triggered endpoint calls
     * with arguments serialized over http.
     */
  }, {
    key: '_registerService',
    value: function _registerService(serviceName, serviceFunction, method, isTextResponse) {
      if (method === undefined) method = 'get';

      if (this._serviceRegistry[serviceName]) {
        throw new Error('A service with this name is already registered:', serviceName);
      }
      this._serviceRegistry[serviceName] = serviceFunction;
      this._registerHttpService(serviceName, method, isTextResponse);
    }
  }, {
    key: '_registerHttpService',
    value: function _registerHttpService(serviceName, method, isTextResponse) {
      var _this12 = this;

      var loweredCaseMethod = method.toLowerCase();
      this._app[loweredCaseMethod](serviceName, _asyncToGenerator(function* (request, response, next) {
        try {
          var result = yield _this12.callService(serviceName, deserializeArgs(request.url));
          if (isTextResponse) {
            sendTextResponse(response, result || '');
          } else {
            sendJsonResponse(response, result);
          }
        } catch (e) {
          // Delegate to the registered connect error handler.
          next(e);
        }
      }));
    }

    /**
     * Attach an explicit http connect handler for some services that need request/response related optimizations.
     * e.g. readFile and writeFile uses it to stream reading and writing files (perf improvement for big files).
     */
  }, {
    key: '_attachUrlHandler',
    value: function _attachUrlHandler(url, handler) {
      var method = arguments.length <= 2 || arguments[2] === undefined ? 'get' : arguments[2];

      this._app[method](url, handler);
    }
  }, {
    key: '_onConnection',
    value: function _onConnection(socket) {
      var _this13 = this;

      logger.info('WebSocket connecting');

      var subscriptions = {};
      var client = null;

      socket.on('error', function (e) {
        return logger.error('Client #%s error: %s', client ? client.id : 'unkown', e.message);
      });

      socket.once('message', function (clientId) {
        client = _this13._clients[clientId] = _this13._clients[clientId] || { subscriptions: {}, id: clientId, messageQueue: [] };
        // If an existing client, we close its socket before listening to the new socket.
        if (client.socket) {
          client.socket.close();
          client.socket = null;
        }
        logger.info('Client #%s connecting with a new socket!', clientId);
        client.socket = socket;
        client.messageQueue.splice(0).forEach(function (message) {
          return _this13._sendSocketMessage(client, message.data);
        });
        socket.on('message', function (message) {
          return _this13._onSocketMessage(client, message);
        });
      });

      socket.on('close', function () {
        if (!client) {
          return;
        }
        if (client.socket === socket) {
          client.socket = null;
        }
        logger.info('Client #%s closing a socket!', client.id);
        // TODO: enable subscription cleanup when we have a robust reconnect scenario.
        /*
        for (var channel in client.subscriptions) {
          this.unsubscribe(channel, subscriptions[channel]);
        }
        this._eventSubscriptions.forEach(value => value.delete(client.id));
        delete this._clients[client.id];
        */
      });
    }
  }, {
    key: '_onSocketMessage',
    value: _asyncToGenerator(function* (client, message) {
      message = JSON.parse(message);
      var _message = message;
      var serviceName = _message.serviceName;
      var methodName = _message.methodName;
      var methodArgs = _message.methodArgs;
      var serviceOptions = _message.serviceOptions;
      var requestId = _message.requestId;

      var result = null;
      var error = null;

      try {
        var result = yield this.callService('/' + serviceName + '/' + methodName, [serviceOptions].concat(methodArgs));
      } catch (e) {
        logger.error('Failed to call %s/%s with error %o', serviceName, methodName, e);
        error = e;
      }

      this._sendSocketMessage(client, {
        channel: SERVICE_FRAMEWORK_RPC_CHANNEL,
        requestId: requestId,
        result: result,
        error: error
      });
    })

    /**
     * This could be used by services to wrap a stream or an event emitter to an id that
     * a client can subscribe to on the eventbus.
     */
  }, {
    key: 'registerEventEmitter',
    value: function registerEventEmitter(eventEmitter) {
      var id = ++idIncrement;
      this._eventEmitters[id] = eventEmitter;
      return id;
    }

    /**
     * Starts consuming an event emitter by listening on the requested event names
     * and publish them on the eventbus for subscribed clients to consume as part of thier services.
     */
  }, {
    key: '_consumeEventEmitter',
    value: function _consumeEventEmitter(id, channel, eventNames) {
      var _this14 = this;

      var eventEmitter = this._eventEmitters[id];
      if (eventEmitter.consumed) {
        return;
      }

      eventNames.forEach(function (eventName) {
        // listen to every event and publish it on the event bus.
        eventEmitter.on(eventName, function () {
          for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }

          _this14.publish(channel, {
            eventEmitterId: id,
            type: eventName,
            args: args.map(function (arg) {
              // The arguments needs to be json serializable.
              if (Buffer.isBuffer(arg)) {
                // e.g. node streams emit 'data' buffers.
                return arg.toString();
              } else {
                // string, number, object, null, boolean, ..etc.
                return arg;
              }
            })
          });
        });
      });

      eventEmitter.consumed = true;
    }
  }, {
    key: '_sendSocketMessage',
    value: function _sendSocketMessage(client, data) {
      // Wrap the data in an object, because if `data` is a primitive data type,
      // finding it in an array would return the first matching item, not necessarily the same inserted item.
      var message = { data: data };
      var id = client.id;
      var socket = client.socket;
      var messageQueue = client.messageQueue;

      messageQueue.push(message);
      if (!socket) {
        return;
      }
      socket.send(JSON.stringify(data), function (err) {
        if (err) {
          logger.warn('Failed sending socket message to client:', id, data);
        } else {
          var messageIndex = messageQueue.indexOf(message);
          if (messageIndex !== -1) {
            messageQueue.splice(messageIndex, 1);
          }
        }
      });
    }
  }, {
    key: 'close',
    value: function close() {
      var _this15 = this;

      this._webSocketServer.close();
      this._webServer.close();
      this._serviceWithoutServiceFrameworkConfigs.forEach(function (service_path) {
        var _require9 = require(service_path);

        var shutdown = _require9.shutdown;

        if (shutdown) {
          shutdown(_this15);
        }
      });
    }
  }]);

  return NuclideServer;
})();

module.exports = NuclideServer;
/* eventName */ /* clientId */
//# sourceMappingURL=data:application/json;base64,
