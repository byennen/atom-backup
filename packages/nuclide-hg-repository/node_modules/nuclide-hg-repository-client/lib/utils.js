
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var path = require('path');

var ensureTrailingSeparator = require('nuclide-commons').paths.ensureTrailingSeparator;

var ADD_ACTION = 'add';
var REMOVE_ACTION = 'remove';

var separatorRegex = new RegExp(path.sep, 'g');

/**
 * This function takes in a file path, and computes all directories that would
 * be considered a parent of it, i.e., the file path is contained by all of these
 * directories. The function sets the directories (terminated by a separator) as
 * keys in the `directories` Map, and bumps the value accordingly.
 * @param directories The Map that will be modified by this function. The keys are
 *   expected to be directory paths (terminated by a separator) and the values are
 *   the number of times this directory path has been 'added' to this Map.
 * @param modifiedPath A file path (assumed to not have a trailing separator).
 * @param pathPrefixToSkip Optionally, a string that, if found at the beginning
 *   of the modifiedPath, will be skipped when computing the parent directories.
 *   That is, if modifiedPath is /A/B/C/D and pathPrefixToSkip is /A/B/ (or /A/B),
 *   `directories` will be populated with '/A/B/C/', but not '/A/' or '/A/B/'.
 */
function addAllParentDirectoriesToCache(directories, modifiedPath, pathPrefixToSkip) {
  computeAllParentDirectories(directories, modifiedPath, pathPrefixToSkip, ADD_ACTION);
}

/**
 * Like `addAllParentDirectoriesToCache`, except it removes all parent directories.
 */
function removeAllParentDirectoriesFromCache(directories, modifiedPath, pathPrefixToSkip) {
  computeAllParentDirectories(directories, modifiedPath, pathPrefixToSkip, REMOVE_ACTION);
}

/**
 * Helper function to `addAllParentDirectoriesToCache` and
 * `removeAllParentDirectoriesFromCach`. Either adds or removes the computed
 * parent directories depending on the operation passed in.
 */
function computeAllParentDirectories(directories, modifiedPath, pathPrefixToSkip, operation) {
  // Reset the regex so it will start the next search at the beginning of the string.
  separatorRegex.lastIndex = 0;

  if (pathPrefixToSkip) {
    // Setting the lastIndex determines where the next search begins.
    separatorRegex.lastIndex = ensureTrailingSeparator(pathPrefixToSkip).length;
  }

  var shouldAdd = operation === ADD_ACTION;
  var match;
  while (match = separatorRegex.exec(modifiedPath)) {
    var newSubPath = modifiedPath.slice(0, match.index + 1);
    if (shouldAdd) {
      addItemToCache(newSubPath, directories);
    } else {
      removeItemFromCache(newSubPath, directories);
    }
  }
}

function addItemToCache(item, cache) {
  var existingValue = cache.get(item);
  if (existingValue) {
    cache.set(item, existingValue + 1);
  } else {
    cache.set(item, 1);
  }
}

function removeItemFromCache(item, cache) {
  var existingValue = cache.get(item);
  if (existingValue) {
    var newValue = existingValue - 1;
    if (newValue > 0) {
      cache.set(item, newValue);
    } else {
      cache['delete'](item);
    }
  }
}

module.exports = {
  addAllParentDirectoriesToCache: addAllParentDirectoriesToCache,
  removeAllParentDirectoriesFromCache: removeAllParentDirectoriesFromCache
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWhnLXJlcG9zaXRvcnktY2xpZW50L2xpYi91dGlscy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLENBQUM7Ozs7Ozs7Ozs7QUFXWixJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7O0lBQ3RCLHVCQUF1QixHQUFJLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLEtBQUssQ0FBM0QsdUJBQXVCOztBQUU1QixJQUFJLFVBQVUsR0FBRyxLQUFLLENBQUM7QUFDdkIsSUFBSSxhQUFhLEdBQUcsUUFBUSxDQUFDOztBQUc3QixJQUFJLGNBQWMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7O0FBZ0IvQyxTQUFTLDhCQUE4QixDQUNuQyxXQUFnQyxFQUNoQyxZQUFvQixFQUNwQixnQkFBeUIsRUFDekI7QUFDRiw2QkFBMkIsQ0FDekIsV0FBVyxFQUNYLFlBQVksRUFDWixnQkFBZ0IsRUFDaEIsVUFBVSxDQUNYLENBQUM7Q0FDSDs7Ozs7QUFLRCxTQUFTLG1DQUFtQyxDQUN4QyxXQUFnQyxFQUNoQyxZQUFvQixFQUNwQixnQkFBeUIsRUFDekI7QUFDRiw2QkFBMkIsQ0FDekIsV0FBVyxFQUNYLFlBQVksRUFDWixnQkFBZ0IsRUFDaEIsYUFBYSxDQUNkLENBQUM7Q0FDSDs7Ozs7OztBQVFELFNBQVMsMkJBQTJCLENBQ2hDLFdBQWdDLEVBQ2hDLFlBQW9CLEVBQ3BCLGdCQUF5QixFQUN6QixTQUFvQyxFQUNwQzs7QUFFRixnQkFBYyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7O0FBRTdCLE1BQUksZ0JBQWdCLEVBQUU7O0FBRXBCLGtCQUFjLENBQUMsU0FBUyxHQUFHLHVCQUF1QixDQUFDLGdCQUFnQixDQUFDLENBQUMsTUFBTSxDQUFDO0dBQzdFOztBQUVELE1BQUksU0FBUyxHQUFJLFNBQVMsS0FBSyxVQUFVLEFBQUMsQ0FBQztBQUMzQyxNQUFJLEtBQUssQ0FBQztBQUNWLFNBQVEsS0FBSyxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUc7QUFDbEQsUUFBSSxVQUFVLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN4RCxRQUFJLFNBQVMsRUFBRTtBQUNiLG9CQUFjLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0tBQ3pDLE1BQU07QUFDTCx5QkFBbUIsQ0FBQyxVQUFVLEVBQUUsV0FBVyxDQUFDLENBQUM7S0FDOUM7R0FDRjtDQUNGOztBQUVELFNBQVMsY0FBYyxDQUFDLElBQVksRUFBRSxLQUEwQixFQUFFO0FBQ2hFLE1BQUksYUFBYSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDcEMsTUFBSSxhQUFhLEVBQUU7QUFDakIsU0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsYUFBYSxHQUFHLENBQUMsQ0FBQyxDQUFDO0dBQ3BDLE1BQU07QUFDTCxTQUFLLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztHQUNwQjtDQUNGOztBQUVELFNBQVMsbUJBQW1CLENBQUMsSUFBWSxFQUFFLEtBQTBCLEVBQUU7QUFDckUsTUFBSSxhQUFhLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNwQyxNQUFJLGFBQWEsRUFBRTtBQUNqQixRQUFJLFFBQVEsR0FBRyxhQUFhLEdBQUcsQ0FBQyxDQUFDO0FBQ2pDLFFBQUksUUFBUSxHQUFHLENBQUMsRUFBRTtBQUNoQixXQUFLLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztLQUMzQixNQUFNO0FBQ0wsV0FBSyxVQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDcEI7R0FDRjtDQUNGOztBQUdELE1BQU0sQ0FBQyxPQUFPLEdBQUc7QUFDZixnQ0FBOEIsRUFBOUIsOEJBQThCO0FBQzlCLHFDQUFtQyxFQUFuQyxtQ0FBbUM7Q0FDcEMsQ0FBQyIsImZpbGUiOiIvdmFyL2ZvbGRlcnMveGYvcnNwaDRfYzU3MzE1cnM1N3h4c2Rza3J4bnYzNnQwL1QvdG1wZW1tMkh1cHVibGlzaF9wYWNrYWdlcy9ucG0vbnVjbGlkZS1oZy1yZXBvc2l0b3J5LWNsaWVudC9saWIvdXRpbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbnZhciB7ZW5zdXJlVHJhaWxpbmdTZXBhcmF0b3J9ID0gcmVxdWlyZSgnbnVjbGlkZS1jb21tb25zJykucGF0aHM7XG5cbnZhciBBRERfQUNUSU9OID0gJ2FkZCc7XG52YXIgUkVNT1ZFX0FDVElPTiA9ICdyZW1vdmUnO1xudHlwZSBEaXJlY3Rvcmllc0NhY2hlT3BlcmF0aW9uID0gJ2FkZCcgfCAncmVtb3ZlJztcblxudmFyIHNlcGFyYXRvclJlZ2V4ID0gbmV3IFJlZ0V4cChwYXRoLnNlcCwgJ2cnKTtcblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIHRha2VzIGluIGEgZmlsZSBwYXRoLCBhbmQgY29tcHV0ZXMgYWxsIGRpcmVjdG9yaWVzIHRoYXQgd291bGRcbiAqIGJlIGNvbnNpZGVyZWQgYSBwYXJlbnQgb2YgaXQsIGkuZS4sIHRoZSBmaWxlIHBhdGggaXMgY29udGFpbmVkIGJ5IGFsbCBvZiB0aGVzZVxuICogZGlyZWN0b3JpZXMuIFRoZSBmdW5jdGlvbiBzZXRzIHRoZSBkaXJlY3RvcmllcyAodGVybWluYXRlZCBieSBhIHNlcGFyYXRvcikgYXNcbiAqIGtleXMgaW4gdGhlIGBkaXJlY3Rvcmllc2AgTWFwLCBhbmQgYnVtcHMgdGhlIHZhbHVlIGFjY29yZGluZ2x5LlxuICogQHBhcmFtIGRpcmVjdG9yaWVzIFRoZSBNYXAgdGhhdCB3aWxsIGJlIG1vZGlmaWVkIGJ5IHRoaXMgZnVuY3Rpb24uIFRoZSBrZXlzIGFyZVxuICogICBleHBlY3RlZCB0byBiZSBkaXJlY3RvcnkgcGF0aHMgKHRlcm1pbmF0ZWQgYnkgYSBzZXBhcmF0b3IpIGFuZCB0aGUgdmFsdWVzIGFyZVxuICogICB0aGUgbnVtYmVyIG9mIHRpbWVzIHRoaXMgZGlyZWN0b3J5IHBhdGggaGFzIGJlZW4gJ2FkZGVkJyB0byB0aGlzIE1hcC5cbiAqIEBwYXJhbSBtb2RpZmllZFBhdGggQSBmaWxlIHBhdGggKGFzc3VtZWQgdG8gbm90IGhhdmUgYSB0cmFpbGluZyBzZXBhcmF0b3IpLlxuICogQHBhcmFtIHBhdGhQcmVmaXhUb1NraXAgT3B0aW9uYWxseSwgYSBzdHJpbmcgdGhhdCwgaWYgZm91bmQgYXQgdGhlIGJlZ2lubmluZ1xuICogICBvZiB0aGUgbW9kaWZpZWRQYXRoLCB3aWxsIGJlIHNraXBwZWQgd2hlbiBjb21wdXRpbmcgdGhlIHBhcmVudCBkaXJlY3Rvcmllcy5cbiAqICAgVGhhdCBpcywgaWYgbW9kaWZpZWRQYXRoIGlzIC9BL0IvQy9EIGFuZCBwYXRoUHJlZml4VG9Ta2lwIGlzIC9BL0IvIChvciAvQS9CKSxcbiAqICAgYGRpcmVjdG9yaWVzYCB3aWxsIGJlIHBvcHVsYXRlZCB3aXRoICcvQS9CL0MvJywgYnV0IG5vdCAnL0EvJyBvciAnL0EvQi8nLlxuICovXG5mdW5jdGlvbiBhZGRBbGxQYXJlbnREaXJlY3Rvcmllc1RvQ2FjaGUoXG4gICAgZGlyZWN0b3JpZXM6IE1hcDxzdHJpbmcsIG51bWJlcj4sXG4gICAgbW9kaWZpZWRQYXRoOiBzdHJpbmcsXG4gICAgcGF0aFByZWZpeFRvU2tpcDogP3N0cmluZ1xuICApIHtcbiAgY29tcHV0ZUFsbFBhcmVudERpcmVjdG9yaWVzKFxuICAgIGRpcmVjdG9yaWVzLFxuICAgIG1vZGlmaWVkUGF0aCxcbiAgICBwYXRoUHJlZml4VG9Ta2lwLFxuICAgIEFERF9BQ1RJT05cbiAgKTtcbn1cblxuLyoqXG4gKiBMaWtlIGBhZGRBbGxQYXJlbnREaXJlY3Rvcmllc1RvQ2FjaGVgLCBleGNlcHQgaXQgcmVtb3ZlcyBhbGwgcGFyZW50IGRpcmVjdG9yaWVzLlxuICovXG5mdW5jdGlvbiByZW1vdmVBbGxQYXJlbnREaXJlY3Rvcmllc0Zyb21DYWNoZShcbiAgICBkaXJlY3RvcmllczogTWFwPHN0cmluZywgbnVtYmVyPixcbiAgICBtb2RpZmllZFBhdGg6IHN0cmluZyxcbiAgICBwYXRoUHJlZml4VG9Ta2lwOiA/c3RyaW5nXG4gICkge1xuICBjb21wdXRlQWxsUGFyZW50RGlyZWN0b3JpZXMoXG4gICAgZGlyZWN0b3JpZXMsXG4gICAgbW9kaWZpZWRQYXRoLFxuICAgIHBhdGhQcmVmaXhUb1NraXAsXG4gICAgUkVNT1ZFX0FDVElPTlxuICApO1xufVxuXG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRvIGBhZGRBbGxQYXJlbnREaXJlY3Rvcmllc1RvQ2FjaGVgIGFuZFxuICogYHJlbW92ZUFsbFBhcmVudERpcmVjdG9yaWVzRnJvbUNhY2hgLiBFaXRoZXIgYWRkcyBvciByZW1vdmVzIHRoZSBjb21wdXRlZFxuICogcGFyZW50IGRpcmVjdG9yaWVzIGRlcGVuZGluZyBvbiB0aGUgb3BlcmF0aW9uIHBhc3NlZCBpbi5cbiAqL1xuZnVuY3Rpb24gY29tcHV0ZUFsbFBhcmVudERpcmVjdG9yaWVzKFxuICAgIGRpcmVjdG9yaWVzOiBNYXA8c3RyaW5nLCBudW1iZXI+LFxuICAgIG1vZGlmaWVkUGF0aDogc3RyaW5nLFxuICAgIHBhdGhQcmVmaXhUb1NraXA6ID9zdHJpbmcsXG4gICAgb3BlcmF0aW9uOiBEaXJlY3Rvcmllc0NhY2hlT3BlcmF0aW9uXG4gICkge1xuICAvLyBSZXNldCB0aGUgcmVnZXggc28gaXQgd2lsbCBzdGFydCB0aGUgbmV4dCBzZWFyY2ggYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgc3RyaW5nLlxuICBzZXBhcmF0b3JSZWdleC5sYXN0SW5kZXggPSAwO1xuXG4gIGlmIChwYXRoUHJlZml4VG9Ta2lwKSB7XG4gICAgLy8gU2V0dGluZyB0aGUgbGFzdEluZGV4IGRldGVybWluZXMgd2hlcmUgdGhlIG5leHQgc2VhcmNoIGJlZ2lucy5cbiAgICBzZXBhcmF0b3JSZWdleC5sYXN0SW5kZXggPSBlbnN1cmVUcmFpbGluZ1NlcGFyYXRvcihwYXRoUHJlZml4VG9Ta2lwKS5sZW5ndGg7XG4gIH1cblxuICB2YXIgc2hvdWxkQWRkID0gKG9wZXJhdGlvbiA9PT0gQUREX0FDVElPTik7XG4gIHZhciBtYXRjaDtcbiAgd2hpbGUgKChtYXRjaCA9IHNlcGFyYXRvclJlZ2V4LmV4ZWMobW9kaWZpZWRQYXRoKSkpIHtcbiAgICB2YXIgbmV3U3ViUGF0aCA9IG1vZGlmaWVkUGF0aC5zbGljZSgwLCBtYXRjaC5pbmRleCArIDEpO1xuICAgIGlmIChzaG91bGRBZGQpIHtcbiAgICAgIGFkZEl0ZW1Ub0NhY2hlKG5ld1N1YlBhdGgsIGRpcmVjdG9yaWVzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlSXRlbUZyb21DYWNoZShuZXdTdWJQYXRoLCBkaXJlY3Rvcmllcyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFkZEl0ZW1Ub0NhY2hlKGl0ZW06IHN0cmluZywgY2FjaGU6IE1hcDxzdHJpbmcsIG51bWJlcj4pIHtcbiAgdmFyIGV4aXN0aW5nVmFsdWUgPSBjYWNoZS5nZXQoaXRlbSk7XG4gIGlmIChleGlzdGluZ1ZhbHVlKSB7XG4gICAgY2FjaGUuc2V0KGl0ZW0sIGV4aXN0aW5nVmFsdWUgKyAxKTtcbiAgfSBlbHNlIHtcbiAgICBjYWNoZS5zZXQoaXRlbSwgMSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlSXRlbUZyb21DYWNoZShpdGVtOiBzdHJpbmcsIGNhY2hlOiBNYXA8c3RyaW5nLCBudW1iZXI+KSB7XG4gIHZhciBleGlzdGluZ1ZhbHVlID0gY2FjaGUuZ2V0KGl0ZW0pO1xuICBpZiAoZXhpc3RpbmdWYWx1ZSkge1xuICAgIHZhciBuZXdWYWx1ZSA9IGV4aXN0aW5nVmFsdWUgLSAxO1xuICAgIGlmIChuZXdWYWx1ZSA+IDApIHtcbiAgICAgIGNhY2hlLnNldChpdGVtLCBuZXdWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhY2hlLmRlbGV0ZShpdGVtKTtcbiAgICB9XG4gIH1cbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYWRkQWxsUGFyZW50RGlyZWN0b3JpZXNUb0NhY2hlLFxuICByZW1vdmVBbGxQYXJlbnREaXJlY3Rvcmllc0Zyb21DYWNoZSxcbn07XG4iXX0=
