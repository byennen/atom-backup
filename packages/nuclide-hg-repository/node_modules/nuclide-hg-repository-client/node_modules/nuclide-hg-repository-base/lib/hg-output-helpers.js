
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

/**
 * Matches a hunk summary line as specified in the unified diff format.
 * Explained here: http://www.gnu.org/software/diffutils/manual/html_node/Detailed-Unified.html
 * and here: http://www.artima.com/weblogs/viewpost.jsp?thread=164293.
 */
var HUNK_DIFF_REGEX = /@@ .* @@/g;
var HUNK_OLD_INFO_REGEX = /\-([0-9]+)((?:,[0-9]+)?)/;
var HUNK_NEW_INFO_REGEX = /\+([0-9]+)((?:,[0-9]+)?)/;

// TODO (jessicalin) Import these from hg-constants.js when types can be exported.

/**
 * Parses the output of `hg diff --unified 0`.
 */
function parseHgDiffUnifiedOutput(output) {
  var diffInfo = {
    added: 0,
    deleted: 0,
    lineDiffs: []
  };
  if (!output) {
    return diffInfo;
  }
  var diffHunks = output.match(HUNK_DIFF_REGEX);
  diffHunks.forEach(function (hunk) {
    // `hunk` will look like: "@@ -a(,b) +c(,d) @@"
    var hunkParts = hunk.split(' ');
    var oldInfo = hunkParts[1].match(HUNK_OLD_INFO_REGEX);
    var newInfo = hunkParts[2].match(HUNK_NEW_INFO_REGEX);

    // `oldInfo`/`newInfo` will look like: ["a,b", "a", ",b"], or ["a", "a", ""].
    var oldStart = parseInt(oldInfo[1], 10);
    var newStart = parseInt(newInfo[1], 10);
    // According to the spec, if the line length is 1, it may be omitted.
    var oldLines = oldInfo[2] ? parseInt(oldInfo[2].substring(1), 10) : 1;
    var newLines = newInfo[2] ? parseInt(newInfo[2].substring(1), 10) : 1;

    diffInfo.added += newLines;
    diffInfo.deleted += oldLines;
    diffInfo.lineDiffs.push({ oldStart: oldStart, oldLines: oldLines, newStart: newStart, newLines: newLines });
  });

  return diffInfo;
}

module.exports = {
  parseHgDiffUnifiedOutput: parseHgDiffUnifiedOutput
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWhnLXJlcG9zaXRvcnktYmFzZS9saWIvaGctb3V0cHV0LWhlbHBlcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7QUFnQlosSUFBSSxlQUFlLEdBQUcsV0FBVyxDQUFDO0FBQ2xDLElBQUksbUJBQW1CLEdBQUcsMEJBQTBCLENBQUM7QUFDckQsSUFBSSxtQkFBbUIsR0FBRywwQkFBMEIsQ0FBQzs7Ozs7OztBQW1CckQsU0FBUyx3QkFBd0IsQ0FBQyxNQUFjLEVBQVk7QUFDMUQsTUFBSSxRQUFRLEdBQUc7QUFDYixTQUFLLEVBQUUsQ0FBQztBQUNSLFdBQU8sRUFBRSxDQUFDO0FBQ1YsYUFBUyxFQUFFLEVBQUU7R0FDZCxDQUFDO0FBQ0YsTUFBSSxDQUFDLE1BQU0sRUFBRTtBQUNYLFdBQU8sUUFBUSxDQUFDO0dBQ2pCO0FBQ0QsTUFBSSxTQUFTLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUM5QyxXQUFTLENBQUMsT0FBTyxDQUFDLFVBQUMsSUFBSSxFQUFLOztBQUUxQixRQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2hDLFFBQUksT0FBTyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQztBQUN0RCxRQUFJLE9BQU8sR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUM7OztBQUd0RCxRQUFJLFFBQVEsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3hDLFFBQUksUUFBUSxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7O0FBRXhDLFFBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDdEUsUUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQzs7QUFFdEUsWUFBUSxDQUFDLEtBQUssSUFBSSxRQUFRLENBQUM7QUFDM0IsWUFBUSxDQUFDLE9BQU8sSUFBSSxRQUFRLENBQUM7QUFDN0IsWUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBQyxRQUFRLEVBQVIsUUFBUSxFQUFFLFFBQVEsRUFBUixRQUFRLEVBQUUsUUFBUSxFQUFSLFFBQVEsRUFBRSxRQUFRLEVBQVIsUUFBUSxFQUFDLENBQUMsQ0FBQztHQUNuRSxDQUFDLENBQUM7O0FBRUgsU0FBTyxRQUFRLENBQUM7Q0FDakI7O0FBRUQsTUFBTSxDQUFDLE9BQU8sR0FBRztBQUNmLDBCQUF3QixFQUF4Qix3QkFBd0I7Q0FDekIsQ0FBQyIsImZpbGUiOiIvdmFyL2ZvbGRlcnMveGYvcnNwaDRfYzU3MzE1cnM1N3h4c2Rza3J4bnYzNnQwL1QvdG1wZW1tMkh1cHVibGlzaF9wYWNrYWdlcy9ucG0vbnVjbGlkZS1oZy1yZXBvc2l0b3J5LWJhc2UvbGliL2hnLW91dHB1dC1oZWxwZXJzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCc7XG4vKiBAZmxvdyAqL1xuXG4vKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpblxuICogdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLyoqXG4gKiBNYXRjaGVzIGEgaHVuayBzdW1tYXJ5IGxpbmUgYXMgc3BlY2lmaWVkIGluIHRoZSB1bmlmaWVkIGRpZmYgZm9ybWF0LlxuICogRXhwbGFpbmVkIGhlcmU6IGh0dHA6Ly93d3cuZ251Lm9yZy9zb2Z0d2FyZS9kaWZmdXRpbHMvbWFudWFsL2h0bWxfbm9kZS9EZXRhaWxlZC1VbmlmaWVkLmh0bWxcbiAqIGFuZCBoZXJlOiBodHRwOi8vd3d3LmFydGltYS5jb20vd2VibG9ncy92aWV3cG9zdC5qc3A/dGhyZWFkPTE2NDI5My5cbiAqL1xudmFyIEhVTktfRElGRl9SRUdFWCA9IC9AQCAuKiBAQC9nO1xudmFyIEhVTktfT0xEX0lORk9fUkVHRVggPSAvXFwtKFswLTldKykoKD86LFswLTldKyk/KS87XG52YXIgSFVOS19ORVdfSU5GT19SRUdFWCA9IC9cXCsoWzAtOV0rKSgoPzosWzAtOV0rKT8pLztcblxuLy8gVE9ETyAoamVzc2ljYWxpbikgSW1wb3J0IHRoZXNlIGZyb20gaGctY29uc3RhbnRzLmpzIHdoZW4gdHlwZXMgY2FuIGJlIGV4cG9ydGVkLlxudHlwZSBMaW5lRGlmZiA9IHtcbiAgb2xkU3RhcnQ6IG51bWJlcjtcbiAgb2xkTGluZXM6IG51bWJlcjtcbiAgbmV3U3RhcnQ6IG51bWJlcjtcbiAgbmV3TGluZXM6IG51bWJlcjtcbn07XG5cbnR5cGUgRGlmZkluZm8gPSB7XG4gIGFkZGVkOiBudW1iZXI7XG4gIGRlbGV0ZWQ6IG51bWJlcjtcbiAgbGluZURpZmZzOiBBcnJheTxMaW5lRGlmZj47XG59O1xuXG4vKipcbiAqIFBhcnNlcyB0aGUgb3V0cHV0IG9mIGBoZyBkaWZmIC0tdW5pZmllZCAwYC5cbiAqL1xuZnVuY3Rpb24gcGFyc2VIZ0RpZmZVbmlmaWVkT3V0cHV0KG91dHB1dDogc3RyaW5nKTogRGlmZkluZm8ge1xuICB2YXIgZGlmZkluZm8gPSB7XG4gICAgYWRkZWQ6IDAsXG4gICAgZGVsZXRlZDogMCxcbiAgICBsaW5lRGlmZnM6IFtdLFxuICB9O1xuICBpZiAoIW91dHB1dCkge1xuICAgIHJldHVybiBkaWZmSW5mbztcbiAgfVxuICB2YXIgZGlmZkh1bmtzID0gb3V0cHV0Lm1hdGNoKEhVTktfRElGRl9SRUdFWCk7XG4gIGRpZmZIdW5rcy5mb3JFYWNoKChodW5rKSA9PiB7XG4gICAgLy8gYGh1bmtgIHdpbGwgbG9vayBsaWtlOiBcIkBAIC1hKCxiKSArYygsZCkgQEBcIlxuICAgIHZhciBodW5rUGFydHMgPSBodW5rLnNwbGl0KCcgJyk7XG4gICAgdmFyIG9sZEluZm8gPSBodW5rUGFydHNbMV0ubWF0Y2goSFVOS19PTERfSU5GT19SRUdFWCk7XG4gICAgdmFyIG5ld0luZm8gPSBodW5rUGFydHNbMl0ubWF0Y2goSFVOS19ORVdfSU5GT19SRUdFWCk7XG5cbiAgICAvLyBgb2xkSW5mb2AvYG5ld0luZm9gIHdpbGwgbG9vayBsaWtlOiBbXCJhLGJcIiwgXCJhXCIsIFwiLGJcIl0sIG9yIFtcImFcIiwgXCJhXCIsIFwiXCJdLlxuICAgIHZhciBvbGRTdGFydCA9IHBhcnNlSW50KG9sZEluZm9bMV0sIDEwKTtcbiAgICB2YXIgbmV3U3RhcnQgPSBwYXJzZUludChuZXdJbmZvWzFdLCAxMCk7XG4gICAgLy8gQWNjb3JkaW5nIHRvIHRoZSBzcGVjLCBpZiB0aGUgbGluZSBsZW5ndGggaXMgMSwgaXQgbWF5IGJlIG9taXR0ZWQuXG4gICAgdmFyIG9sZExpbmVzID0gb2xkSW5mb1syXSA/IHBhcnNlSW50KG9sZEluZm9bMl0uc3Vic3RyaW5nKDEpLCAxMCkgOiAxO1xuICAgIHZhciBuZXdMaW5lcyA9IG5ld0luZm9bMl0gPyBwYXJzZUludChuZXdJbmZvWzJdLnN1YnN0cmluZygxKSwgMTApIDogMTtcblxuICAgIGRpZmZJbmZvLmFkZGVkICs9IG5ld0xpbmVzO1xuICAgIGRpZmZJbmZvLmRlbGV0ZWQgKz0gb2xkTGluZXM7XG4gICAgZGlmZkluZm8ubGluZURpZmZzLnB1c2goe29sZFN0YXJ0LCBvbGRMaW5lcywgbmV3U3RhcnQsIG5ld0xpbmVzfSk7XG4gIH0pO1xuXG4gIHJldHVybiBkaWZmSW5mbztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHBhcnNlSGdEaWZmVW5pZmllZE91dHB1dCxcbn07XG4iXX0=
