
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _require = require('./utils');

var log = _require.log;

var ChromeCallback = require('./ChromeCallback');

var _require2 = require('./DbgpSocket');

var DbgpSocket = _require2.DbgpSocket;

var DataCache = require('./DataCache');
var DebuggerHandler = require('./DebuggerHandler');
var PageHandler = require('./PageHandler');
var ConsoleHandler = require('./ConsoleHandler');
var RuntimeHandler = require('./RuntimeHandler');

/**
 * Translates Chrome dev tools JSON messages to/from dbgp.
 * TODO: Should we proactively push files to the debugger?
 * Currently we reactively push files to the debuger when they appear in a stack trace.
 */

var MessageTranslator = (function () {
  function MessageTranslator(socket, callback) {
    _classCallCheck(this, MessageTranslator);

    var dbgpSocket = new DbgpSocket(socket);
    this._socket = dbgpSocket;
    this._dataCache = new DataCache(dbgpSocket);
    this._callback = new ChromeCallback(callback);
    this._handlers = new Map();
    this._debuggerHandler = new DebuggerHandler(this._callback, dbgpSocket, this._dataCache);
    this._addHandler(this._debuggerHandler);
    this._addHandler(new PageHandler(this._callback));
    this._addHandler(new ConsoleHandler(this._callback));
    this._addHandler(new RuntimeHandler(this._callback, this._dataCache));
  }

  _createClass(MessageTranslator, [{
    key: '_addHandler',
    value: function _addHandler(handler) {
      this._handlers.set(handler.getDomain(), handler);
    }
  }, {
    key: 'onSessionEnd',
    value: function onSessionEnd(callback) {
      log('onSessionEnd');
      this._debuggerHandler.onSessionEnd(callback);
    }
  }, {
    key: 'handleCommand',
    value: _asyncToGenerator(function* (command) {
      log('handleCommand: ' + command);

      var _JSON$parse = JSON.parse(command);

      var id = _JSON$parse.id;
      var method = _JSON$parse.method;
      var params = _JSON$parse.params;

      if (!method || typeof method !== 'string') {
        this._replyWithError(id, 'Missing method: ' + command);
        return;
      }
      var methodParts = method.split('.');
      if (methodParts.length !== 2) {
        this._replyWithError(id, 'Badly formatted method: ' + command);
        return;
      }

      var _methodParts = _slicedToArray(methodParts, 2);

      var domain = _methodParts[0];
      var method = _methodParts[1];

      if (!this._handlers.has(domain)) {
        this._replyWithError(id, 'Unknown domain: ' + command);
        return;
      }

      try {
        yield this._handlers.get(domain).handleMethod(id, method, params);
      } catch (e) {
        this._replyWithError(id, 'Error handling command: ' + e + '\n ' + e.stack);
      }
    })
  }, {
    key: '_replyWithError',
    value: function _replyWithError(id, error) {
      log(error);
      this._callback.replyWithError(id, error);
    }
  }, {
    key: 'dispose',
    value: function dispose() {
      if (this._socket) {
        this._socket.dispose();
        this._socket = null;
      }
    }
  }]);

  return MessageTranslator;
})();

module.exports = { MessageTranslator: MessageTranslator };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWRlYnVnZ2VyLWhodm0tcHJveHkvbGliL01lc3NhZ2VUcmFuc2xhdG9yLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFdBQVcsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7O2VBWUEsT0FBTyxDQUFDLFNBQVMsQ0FBQzs7SUFBekIsR0FBRyxZQUFILEdBQUc7O0FBQ1IsSUFBSSxjQUFjLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUM7O2dCQUM5QixPQUFPLENBQUMsY0FBYyxDQUFDOztJQUFyQyxVQUFVLGFBQVYsVUFBVTs7QUFDZixJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDdkMsSUFBSSxlQUFlLEdBQUcsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFDbkQsSUFBSSxXQUFXLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQzNDLElBQUksY0FBYyxHQUFHLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBQ2pELElBQUksY0FBYyxHQUFHLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDOzs7Ozs7OztJQU8zQyxpQkFBaUI7QUFPVixXQVBQLGlCQUFpQixDQU9ULE1BQWMsRUFBRSxRQUFtQyxFQUFFOzBCQVA3RCxpQkFBaUI7O0FBUW5CLFFBQUksVUFBVSxHQUFHLElBQUksVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3hDLFFBQUksQ0FBQyxPQUFPLEdBQUcsVUFBVSxDQUFDO0FBQzFCLFFBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDNUMsUUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM5QyxRQUFJLENBQUMsU0FBUyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7QUFDM0IsUUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksZUFBZSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUN6RixRQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ3hDLFFBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7QUFDbEQsUUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLGNBQWMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztBQUNyRCxRQUFJLENBQUMsV0FBVyxDQUFDLElBQUksY0FBYyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7R0FDdkU7O2VBbEJHLGlCQUFpQjs7V0FvQlYscUJBQUMsT0FBZ0IsRUFBUTtBQUNsQyxVQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDbEQ7OztXQUVXLHNCQUFDLFFBQW9CLEVBQVE7QUFDdkMsU0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ3BCLFVBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDOUM7Ozs2QkFFa0IsV0FBQyxPQUFlLEVBQVc7QUFDNUMsU0FBRyxDQUFDLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyxDQUFDOzt3QkFDTixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQzs7VUFBekMsRUFBRSxlQUFGLEVBQUU7VUFBRSxNQUFNLGVBQU4sTUFBTTtVQUFFLE1BQU0sZUFBTixNQUFNOztBQUV2QixVQUFJLENBQUMsTUFBTSxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsRUFBRTtBQUN6QyxZQUFJLENBQUMsZUFBZSxDQUFDLEVBQUUsRUFBRSxrQkFBa0IsR0FBRyxPQUFPLENBQUMsQ0FBQztBQUN2RCxlQUFPO09BQ1I7QUFDRCxVQUFJLFdBQVcsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3BDLFVBQUksV0FBVyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7QUFDNUIsWUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUFFLEVBQUUsMEJBQTBCLEdBQUcsT0FBTyxDQUFDLENBQUM7QUFDL0QsZUFBTztPQUNSOzt3Q0FDc0IsV0FBVzs7VUFBN0IsTUFBTTtVQUFFLE1BQU07O0FBRW5CLFVBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRTtBQUMvQixZQUFJLENBQUMsZUFBZSxDQUFDLEVBQUUsRUFBRSxrQkFBa0IsR0FBRyxPQUFPLENBQUMsQ0FBQztBQUN2RCxlQUFPO09BQ1I7O0FBRUQsVUFBSTtBQUNGLGNBQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsWUFBWSxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7T0FDbkUsQ0FBQyxPQUFPLENBQUMsRUFBRTtBQUNWLFlBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSwrQkFBNkIsQ0FBQyxXQUFNLENBQUMsQ0FBQyxLQUFLLENBQUcsQ0FBQztPQUN2RTtLQUNGOzs7V0FFYyx5QkFBQyxFQUFVLEVBQUUsS0FBYSxFQUFRO0FBQy9DLFNBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNYLFVBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztLQUMxQzs7O1dBRU0sbUJBQVM7QUFDZCxVQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7QUFDaEIsWUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUN2QixZQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztPQUNyQjtLQUNGOzs7U0FsRUcsaUJBQWlCOzs7QUFxRXZCLE1BQU0sQ0FBQyxPQUFPLEdBQUcsRUFBQyxpQkFBaUIsRUFBakIsaUJBQWlCLEVBQUMsQ0FBQyIsImZpbGUiOiIvdmFyL2ZvbGRlcnMveGYvcnNwaDRfYzU3MzE1cnM1N3h4c2Rza3J4bnYzNnQwL1QvdG1wZW1tMkh1cHVibGlzaF9wYWNrYWdlcy9ucG0vbnVjbGlkZS1kZWJ1Z2dlci1oaHZtLXByb3h5L2xpYi9NZXNzYWdlVHJhbnNsYXRvci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cblxudmFyIHtsb2d9ID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIENocm9tZUNhbGxiYWNrID0gcmVxdWlyZSgnLi9DaHJvbWVDYWxsYmFjaycpO1xudmFyIHtEYmdwU29ja2V0fSA9IHJlcXVpcmUoJy4vRGJncFNvY2tldCcpO1xudmFyIERhdGFDYWNoZSA9IHJlcXVpcmUoJy4vRGF0YUNhY2hlJyk7XG52YXIgRGVidWdnZXJIYW5kbGVyID0gcmVxdWlyZSgnLi9EZWJ1Z2dlckhhbmRsZXInKTtcbnZhciBQYWdlSGFuZGxlciA9IHJlcXVpcmUoJy4vUGFnZUhhbmRsZXInKTtcbnZhciBDb25zb2xlSGFuZGxlciA9IHJlcXVpcmUoJy4vQ29uc29sZUhhbmRsZXInKTtcbnZhciBSdW50aW1lSGFuZGxlciA9IHJlcXVpcmUoJy4vUnVudGltZUhhbmRsZXInKTtcblxuLyoqXG4gKiBUcmFuc2xhdGVzIENocm9tZSBkZXYgdG9vbHMgSlNPTiBtZXNzYWdlcyB0by9mcm9tIGRiZ3AuXG4gKiBUT0RPOiBTaG91bGQgd2UgcHJvYWN0aXZlbHkgcHVzaCBmaWxlcyB0byB0aGUgZGVidWdnZXI/XG4gKiBDdXJyZW50bHkgd2UgcmVhY3RpdmVseSBwdXNoIGZpbGVzIHRvIHRoZSBkZWJ1Z2VyIHdoZW4gdGhleSBhcHBlYXIgaW4gYSBzdGFjayB0cmFjZS5cbiAqL1xuY2xhc3MgTWVzc2FnZVRyYW5zbGF0b3Ige1xuICBfc29ja2V0OiA/RGJncFNvY2tldDtcbiAgX2RhdGFDYWNoZTogRGF0YUNhY2hlO1xuICBfY2FsbGJhY2s6IENocm9tZUNhbGxiYWNrO1xuICBfZGVidWdnZXJIYW5kbGVyOiBEZWJ1Z2dlckhhbmRsZXI7XG4gIF9oYW5kbGVyczogTWFwPHN0cmluZywgSGFuZGxlcj47XG5cbiAgY29uc3RydWN0b3Ioc29ja2V0OiBTb2NrZXQsIGNhbGxiYWNrOiAobWVzc2FnZTogc3RyaW5nKSA9PiB2b2lkKSB7XG4gICAgdmFyIGRiZ3BTb2NrZXQgPSBuZXcgRGJncFNvY2tldChzb2NrZXQpO1xuICAgIHRoaXMuX3NvY2tldCA9IGRiZ3BTb2NrZXQ7XG4gICAgdGhpcy5fZGF0YUNhY2hlID0gbmV3IERhdGFDYWNoZShkYmdwU29ja2V0KTtcbiAgICB0aGlzLl9jYWxsYmFjayA9IG5ldyBDaHJvbWVDYWxsYmFjayhjYWxsYmFjayk7XG4gICAgdGhpcy5faGFuZGxlcnMgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5fZGVidWdnZXJIYW5kbGVyID0gbmV3IERlYnVnZ2VySGFuZGxlcih0aGlzLl9jYWxsYmFjaywgZGJncFNvY2tldCwgdGhpcy5fZGF0YUNhY2hlKTtcbiAgICB0aGlzLl9hZGRIYW5kbGVyKHRoaXMuX2RlYnVnZ2VySGFuZGxlcik7XG4gICAgdGhpcy5fYWRkSGFuZGxlcihuZXcgUGFnZUhhbmRsZXIodGhpcy5fY2FsbGJhY2spKTtcbiAgICB0aGlzLl9hZGRIYW5kbGVyKG5ldyBDb25zb2xlSGFuZGxlcih0aGlzLl9jYWxsYmFjaykpO1xuICAgIHRoaXMuX2FkZEhhbmRsZXIobmV3IFJ1bnRpbWVIYW5kbGVyKHRoaXMuX2NhbGxiYWNrLCB0aGlzLl9kYXRhQ2FjaGUpKTtcbiAgfVxuXG4gIF9hZGRIYW5kbGVyKGhhbmRsZXI6IEhhbmRsZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9oYW5kbGVycy5zZXQoaGFuZGxlci5nZXREb21haW4oKSwgaGFuZGxlcik7XG4gIH1cblxuICBvblNlc3Npb25FbmQoY2FsbGJhY2s6ICgpID0+IHZvaWQpOiB2b2lkIHtcbiAgICBsb2coJ29uU2Vzc2lvbkVuZCcpO1xuICAgIHRoaXMuX2RlYnVnZ2VySGFuZGxlci5vblNlc3Npb25FbmQoY2FsbGJhY2spO1xuICB9XG5cbiAgYXN5bmMgaGFuZGxlQ29tbWFuZChjb21tYW5kOiBzdHJpbmcpOiBQcm9taXNlIHtcbiAgICBsb2coJ2hhbmRsZUNvbW1hbmQ6ICcgKyBjb21tYW5kKTtcbiAgICB2YXIge2lkLCBtZXRob2QsIHBhcmFtc30gPSBKU09OLnBhcnNlKGNvbW1hbmQpO1xuXG4gICAgaWYgKCFtZXRob2QgfHwgdHlwZW9mIG1ldGhvZCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMuX3JlcGx5V2l0aEVycm9yKGlkLCAnTWlzc2luZyBtZXRob2Q6ICcgKyBjb21tYW5kKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIG1ldGhvZFBhcnRzID0gbWV0aG9kLnNwbGl0KCcuJyk7XG4gICAgaWYgKG1ldGhvZFBhcnRzLmxlbmd0aCAhPT0gMikge1xuICAgICAgdGhpcy5fcmVwbHlXaXRoRXJyb3IoaWQsICdCYWRseSBmb3JtYXR0ZWQgbWV0aG9kOiAnICsgY29tbWFuZCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBbZG9tYWluLCBtZXRob2RdID0gbWV0aG9kUGFydHM7XG5cbiAgICBpZiAoIXRoaXMuX2hhbmRsZXJzLmhhcyhkb21haW4pKSB7XG4gICAgICB0aGlzLl9yZXBseVdpdGhFcnJvcihpZCwgJ1Vua25vd24gZG9tYWluOiAnICsgY29tbWFuZCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMuX2hhbmRsZXJzLmdldChkb21haW4pLmhhbmRsZU1ldGhvZChpZCwgbWV0aG9kLCBwYXJhbXMpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRoaXMuX3JlcGx5V2l0aEVycm9yKGlkLCBgRXJyb3IgaGFuZGxpbmcgY29tbWFuZDogJHtlfVxcbiAke2Uuc3RhY2t9YCk7XG4gICAgfVxuICB9XG5cbiAgX3JlcGx5V2l0aEVycm9yKGlkOiBudW1iZXIsIGVycm9yOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBsb2coZXJyb3IpO1xuICAgIHRoaXMuX2NhbGxiYWNrLnJlcGx5V2l0aEVycm9yKGlkLCBlcnJvcik7XG4gIH1cblxuICBkaXNwb3NlKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9zb2NrZXQpIHtcbiAgICAgIHRoaXMuX3NvY2tldC5kaXNwb3NlKCk7XG4gICAgICB0aGlzLl9zb2NrZXQgPSBudWxsO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtNZXNzYWdlVHJhbnNsYXRvcn07XG4iXX0=
