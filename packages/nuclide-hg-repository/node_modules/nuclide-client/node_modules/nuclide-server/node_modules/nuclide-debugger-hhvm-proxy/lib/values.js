
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _require = require('./utils');

var log = _require.log;
var base64Decode = _require.base64Decode;

var _require2 = require('./ObjectId');

var remoteObjectIdOfObjectId = _require2.remoteObjectIdOfObjectId;
var pagedObjectId = _require2.pagedObjectId;
var singlePageObjectId = _require2.singlePageObjectId;

/**
 * Converts a dbgp value to a Chrome RemoteObject.
 */
function convertValue(contextId, dbgpProperty) {
  switch (dbgpProperty.$.type) {
    case 'string':
      return convertStringValue(dbgpProperty);
    case 'int':
      return convertIntValue(dbgpProperty);
    case 'float':
      return convertFloatValue(dbgpProperty);
    case 'bool':
      return convertBoolValue(dbgpProperty);
    case 'null':
      return convertNullValue(dbgpProperty);
    case 'array':
      return convertArrayValue(contextId, dbgpProperty);
    case 'object':
      return convertObjectValue(contextId, dbgpProperty);
    default:
      // TODO: Remaining property types - closure, hashmap, ...
      return convertUnknownValue(dbgpProperty);
  }
}

function convertStringValue(dbgpProperty) {
  var value;
  if (dbgpProperty.hasOwnProperty('_')) {
    value = dbgpProperty.$.encoding === 'base64' ? base64Decode(dbgpProperty._) : 'TODO: Non-base64 encoded string: ' + JSON.stringify(dbgpProperty);
  } else {
    // zero length strings have no dbgpProperty._ property
    value = '';
  }

  return {
    type: 'string',
    value: value
  };
}

function convertIntValue(dbgpProperty) {
  var value = dbgpProperty.$.encoding === 'base64' ? 'TODO: Base64 encoded int: ' + JSON.stringify(dbgpProperty) : Number(dbgpProperty._);
  return {
    type: 'number',
    value: value
  };
}

function convertFloatValue(dbgpProperty) {
  var value = dbgpProperty.$.encoding === 'base64' ? 'TODO: Base64 encoded float: ' + JSON.stringify(dbgpProperty) : Number(dbgpProperty._);
  return {
    type: 'number',
    value: value
  };
}

function convertBoolValue(dbgpProperty) {
  var value = dbgpProperty.$.encoding === 'base64' ? 'TODO: Base64 encoded bool: ' + JSON.stringify(dbgpProperty) : toBool(dbgpProperty._);
  return {
    type: 'boolean',
    value: value
  };
}

function convertNullValue(dbgpProperty) {
  return {
    type: 'undefined',
    subtype: 'null',
    value: null
  };
}

function convertArrayValue(contextId, dbgpProperty) {
  var remoteId = getAggregateRemoteObjectId(contextId, dbgpProperty);
  return {
    description: 'Array[' + dbgpProperty.$.numchildren + ']',
    type: 'object',
    subtype: 'array',
    objectId: remoteId
  };
}

function convertObjectValue(contextId, dbgpProperty) {
  var remoteId = getAggregateRemoteObjectId(contextId, dbgpProperty);
  return {
    description: dbgpProperty.$.classname,
    type: 'object',
    objectId: remoteId
  };
}

function getAggregateRemoteObjectId(contextId, dbgpProperty) {
  var numchildren = Number(dbgpProperty.$.numchildren);
  var pagesize = Number(dbgpProperty.$.pagesize);
  var pageCount = Math.trunc((numchildren + pagesize - 1) / pagesize);
  log('numchildren: ' + numchildren + ' pagesize: ' + pagesize + ' pageCount ' + pageCount);
  if (pageCount > 1) {
    var elementRange = {
      pagesize: pagesize,
      startIndex: 0,
      count: numchildren
    };
    return remoteObjectIdOfObjectId(pagedObjectId(contextId, dbgpProperty.$.fullname, elementRange));
  } else {
    return remoteObjectIdOfObjectId(singlePageObjectId(contextId, dbgpProperty.$.fullname, 0));
  }
}

function convertUnknownValue(dbgpProperty) {
  return {
    type: 'string',
    value: 'TODO: unknown: ' + JSON.stringify(dbgpProperty)
  };
}

function toBool(value) {
  switch (value) {
    case '0':
      return false;
    case '1':
      return true;
    default:
      return 'Unexpected bool value: ' + value;
  }
}

module.exports = { convertValue: convertValue };
//# sourceMappingURL=data:application/json;base64,
