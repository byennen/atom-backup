var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

'use babel';

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var Heap = require('heap');

var _require = require('./utils');

var scoreComparator = _require.scoreComparator;
var inverseScoreComparator = _require.inverseScoreComparator;

/**
 * This data structure is designed to hold the top K scores from a collection of
 * N scores where scores become available one at a time. The expectation is that
 * N will be much, much greater than K.
 *
 * insert() is O(lg K)
 * getTopScores() is O(K lg K)
 *
 * Therefore, finding the top K scores from a collection of N elements should be
 * O(N lg K).
 */

var TopScores = (function () {
  function TopScores(capacity) {
    _classCallCheck(this, TopScores);

    this._capacity = capacity;
    this._full = false;
    this._heap = new Heap(scoreComparator);
    this._min = null;
  }

  _createClass(TopScores, [{
    key: 'insert',
    value: function insert(score) {
      if (this._full) {
        var cmp = scoreComparator(score, this._min);
        if (cmp > 0) {
          this._doInsert(score);
        }
      } else {
        this._doInsert(score);
      }
    }
  }, {
    key: '_doInsert',
    value: function _doInsert(score) {
      if (this._full) {
        this._heap.replace(score);
      } else {
        this._heap.insert(score);
        this._full = this._heap.size() === this._capacity;
      }
      this._min = this._heap.peek();
    }

    /**
     * @return an Array where Scores will be sorted in descending order.
     */
  }, {
    key: 'getTopScores',
    value: function getTopScores() {
      var array = this._heap.toArray();
      array.sort(inverseScoreComparator);
      return array;
    }
  }]);

  return TopScores;
})();

module.exports = TopScores;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXBhdGgtc2VhcmNoL2xpYi9Ub3BTY29yZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLFdBQVcsQ0FBQzs7Ozs7Ozs7OztBQVdaLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQzs7ZUFPdkIsT0FBTyxDQUFDLFNBQVMsQ0FBQzs7SUFGcEIsZUFBZSxZQUFmLGVBQWU7SUFDZixzQkFBc0IsWUFBdEIsc0JBQXNCOzs7Ozs7Ozs7Ozs7OztJQWNsQixTQUFTO0FBS0YsV0FMUCxTQUFTLENBS0QsUUFBZ0IsRUFBRTswQkFMMUIsU0FBUzs7QUFNWCxRQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztBQUMxQixRQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztBQUNuQixRQUFJLENBQUMsS0FBSyxHQUFHLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ3ZDLFFBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0dBQ2xCOztlQVZHLFNBQVM7O1dBWVAsZ0JBQUMsS0FBWSxFQUFFO0FBQ25CLFVBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtBQUNkLFlBQUksR0FBRyxHQUFHLGVBQWUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzVDLFlBQUksR0FBRyxHQUFHLENBQUMsRUFBRTtBQUNYLGNBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDdkI7T0FDRixNQUFNO0FBQ0wsWUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztPQUN2QjtLQUNGOzs7V0FFUSxtQkFBQyxLQUFZLEVBQUU7QUFDdEIsVUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO0FBQ2QsWUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7T0FDM0IsTUFBTTtBQUNMLFlBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3pCLFlBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxJQUFJLENBQUMsU0FBUyxDQUFDO09BQ25EO0FBQ0QsVUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO0tBQy9COzs7Ozs7O1dBS1csd0JBQWlCO0FBQzNCLFVBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDakMsV0FBSyxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0FBQ25DLGFBQU8sS0FBSyxDQUFDO0tBQ2Q7OztTQXhDRyxTQUFTOzs7QUEyQ2YsTUFBTSxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUMiLCJmaWxlIjoiL3Zhci9mb2xkZXJzL3hmL3JzcGg0X2M1NzMxNXJzNTd4eHNkc2tyeG52MzZ0MC9UL3RtcGVtbTJIdXB1Ymxpc2hfcGFja2FnZXMvbnBtL251Y2xpZGUtcGF0aC1zZWFyY2gvbGliL1RvcFNjb3Jlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBIZWFwID0gcmVxdWlyZSgnaGVhcCcpO1xuXG5pbXBvcnQgdHlwZSB7U2NvcmV9IGZyb20gJy4vU2NvcmUnO1xuXG52YXIge1xuICBzY29yZUNvbXBhcmF0b3IsXG4gIGludmVyc2VTY29yZUNvbXBhcmF0b3IsXG59ID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG4vKipcbiAqIFRoaXMgZGF0YSBzdHJ1Y3R1cmUgaXMgZGVzaWduZWQgdG8gaG9sZCB0aGUgdG9wIEsgc2NvcmVzIGZyb20gYSBjb2xsZWN0aW9uIG9mXG4gKiBOIHNjb3JlcyB3aGVyZSBzY29yZXMgYmVjb21lIGF2YWlsYWJsZSBvbmUgYXQgYSB0aW1lLiBUaGUgZXhwZWN0YXRpb24gaXMgdGhhdFxuICogTiB3aWxsIGJlIG11Y2gsIG11Y2ggZ3JlYXRlciB0aGFuIEsuXG4gKlxuICogaW5zZXJ0KCkgaXMgTyhsZyBLKVxuICogZ2V0VG9wU2NvcmVzKCkgaXMgTyhLIGxnIEspXG4gKlxuICogVGhlcmVmb3JlLCBmaW5kaW5nIHRoZSB0b3AgSyBzY29yZXMgZnJvbSBhIGNvbGxlY3Rpb24gb2YgTiBlbGVtZW50cyBzaG91bGQgYmVcbiAqIE8oTiBsZyBLKS5cbiAqL1xuY2xhc3MgVG9wU2NvcmVzIHtcbiAgX2NhcGFjaXR5OiBudW1iZXI7XG4gIF9mdWxsOiBib29sZWFuO1xuICBfbWluOiA/U2NvcmU7XG5cbiAgY29uc3RydWN0b3IoY2FwYWNpdHk6IG51bWJlcikge1xuICAgIHRoaXMuX2NhcGFjaXR5ID0gY2FwYWNpdHk7XG4gICAgdGhpcy5fZnVsbCA9IGZhbHNlO1xuICAgIHRoaXMuX2hlYXAgPSBuZXcgSGVhcChzY29yZUNvbXBhcmF0b3IpO1xuICAgIHRoaXMuX21pbiA9IG51bGw7XG4gIH1cblxuICBpbnNlcnQoc2NvcmU6IFNjb3JlKSB7XG4gICAgaWYgKHRoaXMuX2Z1bGwpIHtcbiAgICAgIHZhciBjbXAgPSBzY29yZUNvbXBhcmF0b3Ioc2NvcmUsIHRoaXMuX21pbik7XG4gICAgICBpZiAoY21wID4gMCkge1xuICAgICAgICB0aGlzLl9kb0luc2VydChzY29yZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2RvSW5zZXJ0KHNjb3JlKTtcbiAgICB9XG4gIH1cblxuICBfZG9JbnNlcnQoc2NvcmU6IFNjb3JlKSB7XG4gICAgaWYgKHRoaXMuX2Z1bGwpIHtcbiAgICAgIHRoaXMuX2hlYXAucmVwbGFjZShzY29yZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2hlYXAuaW5zZXJ0KHNjb3JlKTtcbiAgICAgIHRoaXMuX2Z1bGwgPSB0aGlzLl9oZWFwLnNpemUoKSA9PT0gdGhpcy5fY2FwYWNpdHk7XG4gICAgfVxuICAgIHRoaXMuX21pbiA9IHRoaXMuX2hlYXAucGVlaygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4gYW4gQXJyYXkgd2hlcmUgU2NvcmVzIHdpbGwgYmUgc29ydGVkIGluIGRlc2NlbmRpbmcgb3JkZXIuXG4gICAqL1xuICBnZXRUb3BTY29yZXMoKTogQXJyYXk8U2NvcmU+IHtcbiAgICB2YXIgYXJyYXkgPSB0aGlzLl9oZWFwLnRvQXJyYXkoKTtcbiAgICBhcnJheS5zb3J0KGludmVyc2VTY29yZUNvbXBhcmF0b3IpO1xuICAgIHJldHVybiBhcnJheTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFRvcFNjb3JlcztcbiJdfQ==
