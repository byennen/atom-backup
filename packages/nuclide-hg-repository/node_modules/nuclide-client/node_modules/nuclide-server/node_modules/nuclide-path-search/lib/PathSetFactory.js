
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

/**
 * Creates a `PathSet` with the contents of the specified directory.
 *
 * TODO(6950762) The PathSet returned by this function needs to be instrumented
 * with the ability to update its contents as files are created/deleted under
 * the specified localDirectory.
 */

var createPathSet = _asyncToGenerator(function* (localDirectory) {
  // Attempts to get a list of files relative to `localDirectory`, hopefully from a fast source control index.
  // TODO (williamsc) once ``{HG|Git}Repository` is working in nuclide-server, use those instead to determine VCS.
  var paths = yield getTrackedHgFiles(localDirectory)['catch'](function () {
    return getTrackedGitFiles(localDirectory);
  })['catch'](function () {
    return getAllFiles(localDirectory);
  })['catch'](function () {
    throw new Error('Failed to populate FileSearch for ' + localDirectory);
  });
  return new PathSet({ paths: paths });
});

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

var PathSet = require('./PathSet');

var _require = require('child_process');

var spawn = _require.spawn;

var split = require('split');

function getFilesFromCommand(command, args, localDirectory, transform) {
  return new Promise(function (resolve, reject) {
    // Use `spawn` here to process the, possibly huge, output of the file listing.

    var proc = spawn(command, args, { cwd: localDirectory });

    proc.on('error', reject);

    var filePaths = {};
    proc.stdout.pipe(split()).on('data', function (filePath) {
      if (transform) {
        filePath = transform(filePath);
      }

      if (filePath !== '') {
        filePaths[filePath] = true;
      }
    });

    var errorString = '';
    proc.stderr.on('data', function (data) {
      errorString += data;
    });

    proc.on('close', function (code) {
      if (code === 0) {
        resolve(filePaths);
      } else {
        reject(errorString);
      }
    });
  });
}

function getTrackedHgFiles(localDirectory) {
  return getFilesFromCommand('hg', ['locate', '--fullpath', '--include', '.'], localDirectory, function (filePath) {
    return filePath.slice(localDirectory.length + 1);
  });
}

function getTrackedGitFiles(localDirectory) {
  return getFilesFromCommand('git', ['ls-files'], localDirectory);
}

function getAllFiles(localDirectory) {
  return getFilesFromCommand('find', ['.', '-type', 'f'], localDirectory,
  // Slice off the leading `./` that find will add on here.
  function (filePath) {
    return filePath.substring(2);
  });
}

module.exports = {
  createPathSet: createPathSet
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXBhdGgtc2VhcmNoL2xpYi9QYXRoU2V0RmFjdG9yeS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQW1GRyxhQUFhLHFCQUE1QixXQUE2QixjQUFzQixFQUFvQjs7O0FBR3JFLE1BQUksS0FBSyxHQUFHLE1BQU0saUJBQWlCLENBQUMsY0FBYyxDQUFDLFNBQ3pDLENBQUM7V0FBTSxrQkFBa0IsQ0FBQyxjQUFjLENBQUM7R0FBQSxDQUFDLFNBQzFDLENBQUM7V0FBTSxXQUFXLENBQUMsY0FBYyxDQUFDO0dBQUEsQ0FBQyxTQUNuQyxDQUFDLFlBQU07QUFBRSxVQUFNLElBQUksS0FBSyx3Q0FBc0MsY0FBYyxDQUFHLENBQUE7R0FBRSxDQUFDLENBQUM7QUFDN0YsU0FBTyxJQUFJLE9BQU8sQ0FBQyxFQUFDLEtBQUssRUFBTCxLQUFLLEVBQUMsQ0FBQyxDQUFDO0NBQzdCOzs7O0FBaEZELElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQzs7ZUFFckIsT0FBTyxDQUFDLGVBQWUsQ0FBQzs7SUFBakMsS0FBSyxZQUFMLEtBQUs7O0FBQ1YsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDOztBQUc3QixTQUFTLG1CQUFtQixDQUN4QixPQUFlLEVBQ2YsSUFBbUIsRUFDbkIsY0FBc0IsRUFDdEIsU0FBb0MsRUFBb0M7QUFDMUUsU0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUs7OztBQUd0QyxRQUFJLElBQUksR0FBRyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxFQUFDLEdBQUcsRUFBRSxjQUFjLEVBQUMsQ0FBQyxDQUFDOztBQUV2RCxRQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQzs7QUFFekIsUUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDO0FBQ25CLFFBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxVQUFDLFFBQVEsRUFBSztBQUNqRCxVQUFJLFNBQVMsRUFBRTtBQUNiLGdCQUFRLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO09BQ2hDOztBQUVELFVBQUksUUFBUSxLQUFLLEVBQUUsRUFBRTtBQUNuQixpQkFBUyxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQztPQUM1QjtLQUNGLENBQUMsQ0FBQzs7QUFFSCxRQUFJLFdBQVcsR0FBRyxFQUFFLENBQUM7QUFDckIsUUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLFVBQUMsSUFBSSxFQUFLO0FBQy9CLGlCQUFXLElBQUksSUFBSSxDQUFDO0tBQ3JCLENBQUMsQ0FBQzs7QUFFSCxRQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxVQUFDLElBQUksRUFBSztBQUN6QixVQUFJLElBQUksS0FBSyxDQUFDLEVBQUU7QUFDZCxlQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7T0FDcEIsTUFBTTtBQUNMLGNBQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztPQUNyQjtLQUNGLENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQztDQUNKOztBQUVELFNBQVMsaUJBQWlCLENBQUMsY0FBc0IsRUFBb0M7QUFDbkYsU0FBTyxtQkFBbUIsQ0FDdEIsSUFBSSxFQUNKLENBQUMsUUFBUSxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsR0FBRyxDQUFDLEVBQzFDLGNBQWMsRUFDZCxVQUFBLFFBQVE7V0FBSSxRQUFRLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0dBQUEsQ0FBQyxDQUFDO0NBQzVEOztBQUVELFNBQVMsa0JBQWtCLENBQUMsY0FBc0IsRUFBb0M7QUFDcEYsU0FBTyxtQkFBbUIsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxjQUFjLENBQUMsQ0FBQztDQUNqRTs7QUFFRCxTQUFTLFdBQVcsQ0FBQyxjQUFzQixFQUFvQztBQUM3RSxTQUFPLG1CQUFtQixDQUN0QixNQUFNLEVBQ04sQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLEdBQUcsQ0FBQyxFQUNuQixjQUFjOztBQUVkLFlBQUEsUUFBUTtXQUFJLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0dBQUEsQ0FBQyxDQUFDO0NBQ3hDOztBQW1CRCxNQUFNLENBQUMsT0FBTyxHQUFHO0FBQ2YsZUFBYSxFQUFiLGFBQWE7Q0FDZCxDQUFDIiwiZmlsZSI6Ii92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXBhdGgtc2VhcmNoL2xpYi9QYXRoU2V0RmFjdG9yeS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBQYXRoU2V0ID0gcmVxdWlyZSgnLi9QYXRoU2V0Jyk7XG5cbnZhciB7c3Bhd259ID0gcmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpO1xudmFyIHNwbGl0ID0gcmVxdWlyZSgnc3BsaXQnKTtcblxuXG5mdW5jdGlvbiBnZXRGaWxlc0Zyb21Db21tYW5kKFxuICAgIGNvbW1hbmQ6IHN0cmluZyxcbiAgICBhcmdzOiBBcnJheTxzdHJpbmc+LFxuICAgIGxvY2FsRGlyZWN0b3J5OiBzdHJpbmcsXG4gICAgdHJhbnNmb3JtPzogKHBhdGg6IHN0cmluZykgPT4gc3RyaW5nKTogUHJvbWlzZTxPYmplY3Q8c3RyaW5nLCBib29sZWFuPj4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIC8vIFVzZSBgc3Bhd25gIGhlcmUgdG8gcHJvY2VzcyB0aGUsIHBvc3NpYmx5IGh1Z2UsIG91dHB1dCBvZiB0aGUgZmlsZSBsaXN0aW5nLlxuXG4gICAgdmFyIHByb2MgPSBzcGF3bihjb21tYW5kLCBhcmdzLCB7Y3dkOiBsb2NhbERpcmVjdG9yeX0pO1xuXG4gICAgcHJvYy5vbignZXJyb3InLCByZWplY3QpO1xuXG4gICAgdmFyIGZpbGVQYXRocyA9IHt9O1xuICAgIHByb2Muc3Rkb3V0LnBpcGUoc3BsaXQoKSkub24oJ2RhdGEnLCAoZmlsZVBhdGgpID0+IHtcbiAgICAgIGlmICh0cmFuc2Zvcm0pIHtcbiAgICAgICAgZmlsZVBhdGggPSB0cmFuc2Zvcm0oZmlsZVBhdGgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZmlsZVBhdGggIT09ICcnKSB7XG4gICAgICAgIGZpbGVQYXRoc1tmaWxlUGF0aF0gPSB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIGVycm9yU3RyaW5nID0gJyc7XG4gICAgcHJvYy5zdGRlcnIub24oJ2RhdGEnLCAoZGF0YSkgPT4ge1xuICAgICAgZXJyb3JTdHJpbmcgKz0gZGF0YTtcbiAgICB9KTtcblxuICAgIHByb2Mub24oJ2Nsb3NlJywgKGNvZGUpID0+IHtcbiAgICAgIGlmIChjb2RlID09PSAwKSB7XG4gICAgICAgIHJlc29sdmUoZmlsZVBhdGhzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlamVjdChlcnJvclN0cmluZyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRUcmFja2VkSGdGaWxlcyhsb2NhbERpcmVjdG9yeTogc3RyaW5nKTogUHJvbWlzZTxPYmplY3Q8c3RyaW5nLCBib29sZWFuPj4ge1xuICByZXR1cm4gZ2V0RmlsZXNGcm9tQ29tbWFuZChcbiAgICAgICdoZycsXG4gICAgICBbJ2xvY2F0ZScsICctLWZ1bGxwYXRoJywgJy0taW5jbHVkZScsICcuJ10sXG4gICAgICBsb2NhbERpcmVjdG9yeSxcbiAgICAgIGZpbGVQYXRoID0+IGZpbGVQYXRoLnNsaWNlKGxvY2FsRGlyZWN0b3J5Lmxlbmd0aCArIDEpKTtcbn1cblxuZnVuY3Rpb24gZ2V0VHJhY2tlZEdpdEZpbGVzKGxvY2FsRGlyZWN0b3J5OiBzdHJpbmcpOiBQcm9taXNlPE9iamVjdDxzdHJpbmcsIGJvb2xlYW4+PiB7XG4gIHJldHVybiBnZXRGaWxlc0Zyb21Db21tYW5kKCdnaXQnLCBbJ2xzLWZpbGVzJ10sIGxvY2FsRGlyZWN0b3J5KTtcbn1cblxuZnVuY3Rpb24gZ2V0QWxsRmlsZXMobG9jYWxEaXJlY3Rvcnk6IHN0cmluZyk6IFByb21pc2U8T2JqZWN0PHN0cmluZywgYm9vbGVhbj4+IHtcbiAgcmV0dXJuIGdldEZpbGVzRnJvbUNvbW1hbmQoXG4gICAgICAnZmluZCcsXG4gICAgICBbJy4nLCAnLXR5cGUnLCAnZiddLFxuICAgICAgbG9jYWxEaXJlY3RvcnksXG4gICAgICAvLyBTbGljZSBvZmYgdGhlIGxlYWRpbmcgYC4vYCB0aGF0IGZpbmQgd2lsbCBhZGQgb24gaGVyZS5cbiAgICAgIGZpbGVQYXRoID0+IGZpbGVQYXRoLnN1YnN0cmluZygyKSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGBQYXRoU2V0YCB3aXRoIHRoZSBjb250ZW50cyBvZiB0aGUgc3BlY2lmaWVkIGRpcmVjdG9yeS5cbiAqXG4gKiBUT0RPKDY5NTA3NjIpIFRoZSBQYXRoU2V0IHJldHVybmVkIGJ5IHRoaXMgZnVuY3Rpb24gbmVlZHMgdG8gYmUgaW5zdHJ1bWVudGVkXG4gKiB3aXRoIHRoZSBhYmlsaXR5IHRvIHVwZGF0ZSBpdHMgY29udGVudHMgYXMgZmlsZXMgYXJlIGNyZWF0ZWQvZGVsZXRlZCB1bmRlclxuICogdGhlIHNwZWNpZmllZCBsb2NhbERpcmVjdG9yeS5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gY3JlYXRlUGF0aFNldChsb2NhbERpcmVjdG9yeTogc3RyaW5nKTogUHJvbWlzZTxQYXRoU2V0PiB7XG4gIC8vIEF0dGVtcHRzIHRvIGdldCBhIGxpc3Qgb2YgZmlsZXMgcmVsYXRpdmUgdG8gYGxvY2FsRGlyZWN0b3J5YCwgaG9wZWZ1bGx5IGZyb20gYSBmYXN0IHNvdXJjZSBjb250cm9sIGluZGV4LlxuICAvLyBUT0RPICh3aWxsaWFtc2MpIG9uY2UgYGB7SEd8R2l0fVJlcG9zaXRvcnlgIGlzIHdvcmtpbmcgaW4gbnVjbGlkZS1zZXJ2ZXIsIHVzZSB0aG9zZSBpbnN0ZWFkIHRvIGRldGVybWluZSBWQ1MuXG4gIHZhciBwYXRocyA9IGF3YWl0IGdldFRyYWNrZWRIZ0ZpbGVzKGxvY2FsRGlyZWN0b3J5KVxuICAgICAgLmNhdGNoKCgpID0+IGdldFRyYWNrZWRHaXRGaWxlcyhsb2NhbERpcmVjdG9yeSkpXG4gICAgICAuY2F0Y2goKCkgPT4gZ2V0QWxsRmlsZXMobG9jYWxEaXJlY3RvcnkpKVxuICAgICAgLmNhdGNoKCgpID0+IHsgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gcG9wdWxhdGUgRmlsZVNlYXJjaCBmb3IgJHtsb2NhbERpcmVjdG9yeX1gKSB9KTtcbiAgcmV0dXJuIG5ldyBQYXRoU2V0KHtwYXRoc30pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY3JlYXRlUGF0aFNldCxcbn07XG4iXX0=
