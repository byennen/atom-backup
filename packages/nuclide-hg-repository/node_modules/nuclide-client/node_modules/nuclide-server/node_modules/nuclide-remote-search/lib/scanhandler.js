

/**
 * Searches for all instances of a pattern in a directory.
 * @param directory - The directory in which to perform a search.
 * @param regex - The pattern to match.
 * @param onFileMatchesUpdate - An optional callback, invoked whenever new matches are found.
 *  The results are cumulative, so each invokation also contains all the previous matches
 *  in the file.
 * @param caseSensitive - True if the grep search should be performed case sensitively.
 * @param subdirs - An array of subdirectories to search within `directory`. If subdirs is an
    empty array, then simply search in directory.
 * @returns A promise resolving to an array of all matches, grouped by file.
 */

var search = _asyncToGenerator(function* (directory, regex, onFileMatchesUpdate, caseSensitive, subdirs) {
  // Matches are stored in a Map of filename => Array<Match>.
  var matchesByFile = new Map();

  if (!subdirs || subdirs.length === 0) {
    // Since no subdirs were specified, run search on the root directory.
    yield searchInSubdir(matchesByFile, directory, '.', regex, onFileMatchesUpdate, caseSensitive);
  } else {
    // Run the search on each subdirectory that exists.
    yield Promise.all(subdirs.map(_asyncToGenerator(function* (subdir) {
      try {
        var stat = yield fsPromise.lstat(path.join(directory, subdir));
      } catch (e) {
        return;
      }

      if (!stat.isDirectory()) {
        return;
      }

      return searchInSubdir(matchesByFile, directory, subdir, regex, onFileMatchesUpdate, caseSensitive);
    })));
  }

  // Return final results.
  var results = [];
  matchesByFile.forEach(function (matches, filePath) {
    results.push({ matches: matches, filePath: filePath });
  });
  return results;
}

// Helper function that runs the search command on the given directory
// `subdir`, relative to `directory`. The function returns a promise
// that resolves when the command is done.
);

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

'use babel';

var path = require('path');

var _require = require('nuclide-commons');

var safeSpawn = _require.safeSpawn;
var fsPromise = _require.fsPromise;

var split = require('split');

// This pattern is used for parsing the output of grep.
var GREP_PARSE_PATTERN = /(.*):(\d*):(.*)/;

function searchInSubdir(matchesByFile, directory, subdir, regex, onFileMatchesUpdate, caseSensitive) {

  // Callback invoked on each output line from the grep process.
  var onLine = function onLine(line) {
    // Try to parse the output of grep.
    var grepMatchResult = line.match(GREP_PARSE_PATTERN);
    if (!grepMatchResult) {
      return;
    }

    // Extract the filename, line number, and line text from grep output.
    var lineText = grepMatchResult[3];
    var lineNo = parseInt(grepMatchResult[2], 10) - 1;
    var filePath = path.join(subdir, grepMatchResult[1]);

    // Try to extract the actual "matched" text.
    var matchTextResult = new RegExp(regex, caseSensitive ? '' : 'i').exec(lineText);
    if (!matchTextResult) {
      return;
    }
    var matchText = matchTextResult[0];
    var matchIndex = matchTextResult.index;

    // Put this match into lists grouped by files.
    if (!matchesByFile.has(filePath)) {
      matchesByFile.set(filePath, []);
    }
    matchesByFile.get(filePath).push({
      lineText: lineText,
      lineTextOffset: 0,
      matchText: matchText,
      range: [[lineNo, matchIndex], [lineNo, matchIndex + matchText.length]]
    });

    // If a callback was provided, invoke it with the newest update.
    if (onFileMatchesUpdate) {
      onFileMatchesUpdate({
        matches: matchesByFile.get(filePath),
        filePath: filePath
      });
    }
  };

  // Try running search commands, falling through to the next if there is an error.
  var vcsargs = (caseSensitive ? [] : ['-i']).concat(['-n', regex]);
  var grepargs = (caseSensitive ? [] : ['-i']).concat(['-rHn', '-e', regex, '.']);

  var cmdDir = path.join(directory, subdir);
  return getLinesFromCommand('hg', ['wgrep'].concat(vcsargs), cmdDir, onLine)['catch'](function () {
    return getLinesFromCommand('git', ['grep'].concat(vcsargs), cmdDir, onLine);
  })['catch'](function () {
    return getLinesFromCommand('grep', grepargs, cmdDir, onLine);
  })['catch'](function () {
    throw new Error('Failed to execute a grep search.');
  });
}

// Helper function that runs a command in a given directory, invoking a callback
// as each line is written to stdout.
function getLinesFromCommand(command, args, localDirectoryPath, onLine) {

  return new Promise(function (resolve, reject) {
    // Spawn the search command in the given directory.
    var proc = safeSpawn(command, args, { cwd: localDirectoryPath });

    proc.on('error', reject); // Reject on error.
    proc.stdout.pipe(split()).on('data', onLine); // Call the callback on each line.

    // Keep a running string of stderr, in case we need to throw an error.
    var stderr = '';
    proc.stderr.on('data', function (data) {
      stderr += data;
    });

    // Resolve promise if error code is 0 (found matches) or 1 (found no matches). Otherwise reject.
    proc.on('close', function (code) {
      if (code > 1) {
        reject(new Error(stderr));
      } else {
        resolve();
      }
    });
  });
}

module.exports = {
  search: search
};
//# sourceMappingURL=data:application/json;base64,
