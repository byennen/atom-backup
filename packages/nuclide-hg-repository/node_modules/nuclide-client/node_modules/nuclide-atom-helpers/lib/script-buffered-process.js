
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _require = require('atom');

var BufferedProcess = _require.BufferedProcess;

var _require2 = require('nuclide-commons');

var object = _require2.object;

/**
 * Wrapper around BufferedProcess that runs the command using unix `script`
 * command. Most of the commands (scripts) we run will color output only if
 * their stdout is terminal. `script` ensures terminal-like environment and
 * commands we run give colored output.
 */
module.exports = (function (_BufferedProcess) {
  _inherits(ScriptBufferedProcess, _BufferedProcess);

  function ScriptBufferedProcess(options) {
    _classCallCheck(this, ScriptBufferedProcess);

    options = object.assign({}, options);
    if (options.args == null) {
      options.args = [];
    }
    options.args = ['-q', '/dev/null', options.command].concat(options.args);
    options.command = 'script';
    _get(Object.getPrototypeOf(ScriptBufferedProcess.prototype), 'constructor', this).call(this, options);
  }

  return ScriptBufferedProcess;
})(BufferedProcess);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWF0b20taGVscGVycy9saWIvc2NyaXB0LWJ1ZmZlcmVkLXByb2Nlc3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7O2VBVVksT0FBTyxDQUFDLE1BQU0sQ0FBQzs7SUFBbEMsZUFBZSxZQUFmLGVBQWU7O2dCQUNMLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQzs7SUFBcEMsTUFBTSxhQUFOLE1BQU07Ozs7Ozs7O0FBUVgsTUFBTSxDQUFDLE9BQU87WUFDUixxQkFBcUI7O0FBQ2QsV0FEUCxxQkFBcUIsQ0FDYixPQUFPLEVBQUU7MEJBRGpCLHFCQUFxQjs7QUFFdkIsV0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3JDLFFBQUksT0FBTyxDQUFDLElBQUksSUFBSSxJQUFJLEVBQUU7QUFDeEIsYUFBTyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7S0FDbkI7QUFDRCxXQUFPLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN6RSxXQUFPLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQztBQUMzQiwrQkFSRSxxQkFBcUIsNkNBUWpCLE9BQU8sRUFBRTtHQUNoQjs7U0FURyxxQkFBcUI7R0FBUyxlQUFlLENBVWxELENBQUEiLCJmaWxlIjoiL3Zhci9mb2xkZXJzL3hmL3JzcGg0X2M1NzMxNXJzNTd4eHNkc2tyeG52MzZ0MC9UL3RtcGVtbTJIdXB1Ymxpc2hfcGFja2FnZXMvbnBtL251Y2xpZGUtYXRvbS1oZWxwZXJzL2xpYi9zY3JpcHQtYnVmZmVyZWQtcHJvY2Vzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG52YXIge0J1ZmZlcmVkUHJvY2Vzc30gPSByZXF1aXJlKCdhdG9tJyk7XG52YXIge29iamVjdH0gPSByZXF1aXJlKCdudWNsaWRlLWNvbW1vbnMnKTtcblxuLyoqXG4gKiBXcmFwcGVyIGFyb3VuZCBCdWZmZXJlZFByb2Nlc3MgdGhhdCBydW5zIHRoZSBjb21tYW5kIHVzaW5nIHVuaXggYHNjcmlwdGBcbiAqIGNvbW1hbmQuIE1vc3Qgb2YgdGhlIGNvbW1hbmRzIChzY3JpcHRzKSB3ZSBydW4gd2lsbCBjb2xvciBvdXRwdXQgb25seSBpZlxuICogdGhlaXIgc3Rkb3V0IGlzIHRlcm1pbmFsLiBgc2NyaXB0YCBlbnN1cmVzIHRlcm1pbmFsLWxpa2UgZW52aXJvbm1lbnQgYW5kXG4gKiBjb21tYW5kcyB3ZSBydW4gZ2l2ZSBjb2xvcmVkIG91dHB1dC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPVxuY2xhc3MgU2NyaXB0QnVmZmVyZWRQcm9jZXNzIGV4dGVuZHMgQnVmZmVyZWRQcm9jZXNzIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKTtcbiAgICBpZiAob3B0aW9ucy5hcmdzID09IG51bGwpIHtcbiAgICAgIG9wdGlvbnMuYXJncyA9IFtdO1xuICAgIH1cbiAgICBvcHRpb25zLmFyZ3MgPSBbJy1xJywgJy9kZXYvbnVsbCcsIG9wdGlvbnMuY29tbWFuZF0uY29uY2F0KG9wdGlvbnMuYXJncyk7XG4gICAgb3B0aW9ucy5jb21tYW5kID0gJ3NjcmlwdCc7XG4gICAgc3VwZXIob3B0aW9ucyk7XG4gIH1cbn1cbiJdfQ==
