var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

'use babel';

var logger = require('nuclide-logging').getLogger();
var ClangService = require('./ClangService');

/**
 * Mock class for LocalClangService implementation.
 * Since nuclide-clang is not ready to be open sourced, we put the implementation into `fb`
 * subfolder as it won't be published, and the open sourced version will load this
 * mock class as ClangService's local implementation to make sure nothing breaks.
 */

var LocalClangServiceMock = (function (_ClangService) {
  _inherits(LocalClangServiceMock, _ClangService);

  function LocalClangServiceMock() {
    _classCallCheck(this, LocalClangServiceMock);

    _get(Object.getPrototypeOf(LocalClangServiceMock.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(LocalClangServiceMock, [{
    key: 'compile',
    value: function compile(src, contents) {
      return Promise.resolve({
        diagnostics: []
      });
    }
  }, {
    key: 'getCompletions',
    value: function getCompletions(src, contents, line, column, tokenStartColumn, prefix) {
      return {
        file: src,
        completions: [],
        line: line,
        column: column,
        prefix: prefix
      };
    }
  }, {
    key: 'getDeclaration',
    value: _asyncToGenerator(function* (src, contents, line, column) {
      return null;
    })
  }, {
    key: 'getDeclarationInfo',
    value: function getDeclarationInfo(src, contents, line, column) {
      return { src: src, line: line, column: column, info: [] };
    }
  }]);

  return LocalClangServiceMock;
})(ClangService);

try {
  var LocalClangService = require('./fb/LocalClangService');
} catch (e) {
  logger.info('Use LocalClangServiceMock.');
  var LocalClangService = LocalClangServiceMock;
}

module.exports = LocalClangService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWNsYW5nL2xpYi9Mb2NhbENsYW5nU2VydmljZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxXQUFXLENBQUM7O0FBYVosSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7QUFDcEQsSUFBSSxZQUFZLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUM7Ozs7Ozs7OztJQVF2QyxxQkFBcUI7WUFBckIscUJBQXFCOztXQUFyQixxQkFBcUI7MEJBQXJCLHFCQUFxQjs7K0JBQXJCLHFCQUFxQjs7O2VBQXJCLHFCQUFxQjs7V0FDbEIsaUJBQ0wsR0FBZSxFQUNmLFFBQWdCLEVBWWY7QUFDRCxhQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDckIsbUJBQVcsRUFBRSxFQUFFO09BQ2hCLENBQUMsQ0FBQztLQUNKOzs7V0FFYSx3QkFBQyxHQUFlLEVBQUUsUUFBZ0IsRUFBRSxJQUFZLEVBQUUsTUFBYyxFQUMxRSxnQkFBd0IsRUFBRSxNQUFjLEVBQWdCO0FBQzFELGFBQU87QUFDTCxZQUFJLEVBQUUsR0FBRztBQUNULG1CQUFXLEVBQUUsRUFBRTtBQUNmLFlBQUksRUFBSixJQUFJO0FBQ0osY0FBTSxFQUFOLE1BQU07QUFDTixjQUFNLEVBQU4sTUFBTTtPQUNQLENBQUM7S0FDSDs7OzZCQUVtQixXQUFDLEdBQWUsRUFBRSxRQUFnQixFQUFFLElBQVksRUFBRSxNQUFjLEVBQ0M7QUFDbkYsYUFBTyxJQUFJLENBQUM7S0FDYjs7O1dBRWlCLDRCQUNoQixHQUFlLEVBQ2YsUUFBZ0IsRUFDaEIsSUFBWSxFQUNaLE1BQWMsRUFDd0U7QUFDdEYsYUFBTyxFQUFDLEdBQUcsRUFBSCxHQUFHLEVBQUUsSUFBSSxFQUFKLElBQUksRUFBRSxNQUFNLEVBQU4sTUFBTSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUMsQ0FBQztLQUN0Qzs7O1NBNUNHLHFCQUFxQjtHQUFTLFlBQVk7O0FBK0NoRCxJQUFJO0FBQ0YsTUFBSSxpQkFBaUIsR0FBRyxPQUFPLENBQUMsd0JBQXdCLENBQUMsQ0FBQztDQUMzRCxDQUFDLE9BQU8sQ0FBQyxFQUFFO0FBQ1YsUUFBTSxDQUFDLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0FBQzFDLE1BQUksaUJBQWlCLEdBQUcscUJBQXFCLENBQUM7Q0FDL0M7O0FBRUQsTUFBTSxDQUFDLE9BQU8sR0FBRyxpQkFBaUIsQ0FBQyIsImZpbGUiOiIvdmFyL2ZvbGRlcnMveGYvcnNwaDRfYzU3MzE1cnM1N3h4c2Rza3J4bnYzNnQwL1QvdG1wZW1tMkh1cHVibGlzaF9wYWNrYWdlcy9ucG0vbnVjbGlkZS1jbGFuZy9saWIvTG9jYWxDbGFuZ1NlcnZpY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pbXBvcnQgdHlwZSB7TnVjbGlkZVVyaSwgRGVjbGFyYXRpb259IGZyb20gJy4vdHlwZXMnO1xuXG52YXIgbG9nZ2VyID0gcmVxdWlyZSgnbnVjbGlkZS1sb2dnaW5nJykuZ2V0TG9nZ2VyKCk7XG52YXIgQ2xhbmdTZXJ2aWNlID0gcmVxdWlyZSgnLi9DbGFuZ1NlcnZpY2UnKTtcblxuLyoqXG4gKiBNb2NrIGNsYXNzIGZvciBMb2NhbENsYW5nU2VydmljZSBpbXBsZW1lbnRhdGlvbi5cbiAqIFNpbmNlIG51Y2xpZGUtY2xhbmcgaXMgbm90IHJlYWR5IHRvIGJlIG9wZW4gc291cmNlZCwgd2UgcHV0IHRoZSBpbXBsZW1lbnRhdGlvbiBpbnRvIGBmYmBcbiAqIHN1YmZvbGRlciBhcyBpdCB3b24ndCBiZSBwdWJsaXNoZWQsIGFuZCB0aGUgb3BlbiBzb3VyY2VkIHZlcnNpb24gd2lsbCBsb2FkIHRoaXNcbiAqIG1vY2sgY2xhc3MgYXMgQ2xhbmdTZXJ2aWNlJ3MgbG9jYWwgaW1wbGVtZW50YXRpb24gdG8gbWFrZSBzdXJlIG5vdGhpbmcgYnJlYWtzLlxuICovXG5jbGFzcyBMb2NhbENsYW5nU2VydmljZU1vY2sgZXh0ZW5kcyBDbGFuZ1NlcnZpY2Uge1xuICBjb21waWxlKFxuICAgIHNyYzogTnVjbGlkZVVyaSxcbiAgICBjb250ZW50czogc3RyaW5nXG4gICk6IFByb21pc2U8e1xuICAgIGRpYWdub3N0aWNzOiBBcnJheTx7XG4gICAgICBzcGVsbGluZzogc3RyaW5nO1xuICAgICAgc2V2ZXJpdHk6IG51bWJlcjtcbiAgICAgIGxvY2F0aW9uOiB7XG4gICAgICAgIGNvbHVtbjogbnVtYmVyO1xuICAgICAgICBmaWxlOiBOdWNsaWRlVXJpO1xuICAgICAgICBsaW5lOiBudW1iZXI7XG4gICAgICB9O1xuICAgICAgcmFuZ2VzOiBhbnk7XG4gICAgfT5cbiAgfT4ge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgZGlhZ25vc3RpY3M6IFtdLFxuICAgIH0pO1xuICB9XG5cbiAgZ2V0Q29tcGxldGlvbnMoc3JjOiBOdWNsaWRlVXJpLCBjb250ZW50czogc3RyaW5nLCBsaW5lOiBudW1iZXIsIGNvbHVtbjogbnVtYmVyLFxuICAgICAgdG9rZW5TdGFydENvbHVtbjogbnVtYmVyLCBwcmVmaXg6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZpbGU6IHNyYyxcbiAgICAgIGNvbXBsZXRpb25zOiBbXSxcbiAgICAgIGxpbmUsXG4gICAgICBjb2x1bW4sXG4gICAgICBwcmVmaXgsXG4gICAgfTtcbiAgfVxuXG4gIGFzeW5jIGdldERlY2xhcmF0aW9uKHNyYzogTnVjbGlkZVVyaSwgY29udGVudHM6IHN0cmluZywgbGluZTogbnVtYmVyLCBjb2x1bW46IG51bWJlclxuICAgICAgKTogUHJvbWlzZTw/e2ZpbGU6IE51Y2xpZGVVcmk7IGxpbmU6IG51bWJlcjsgY29sdW1uOiBudW1iZXI7IHNwZWxsaW5nOiBzdHJpbmc7fT4ge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZ2V0RGVjbGFyYXRpb25JbmZvKFxuICAgIHNyYzogTnVjbGlkZVVyaSxcbiAgICBjb250ZW50czogc3RyaW5nLFxuICAgIGxpbmU6IG51bWJlcixcbiAgICBjb2x1bW46IG51bWJlclxuICApOiBQcm9taXNlPD97ZmlsZTogTnVjbGlkZVVyaTsgbGluZTogbnVtYmVyOyBjb2x1bW46IG51bWJlcjsgaW5mbzogQXJyYXk8RGVjbGFyYXRpb24+fT4ge1xuICAgIHJldHVybiB7c3JjLCBsaW5lLCBjb2x1bW4sIGluZm86IFtdfTtcbiAgfVxufVxuXG50cnkge1xuICB2YXIgTG9jYWxDbGFuZ1NlcnZpY2UgPSByZXF1aXJlKCcuL2ZiL0xvY2FsQ2xhbmdTZXJ2aWNlJyk7XG59IGNhdGNoIChlKSB7XG4gIGxvZ2dlci5pbmZvKCdVc2UgTG9jYWxDbGFuZ1NlcnZpY2VNb2NrLicpO1xuICB2YXIgTG9jYWxDbGFuZ1NlcnZpY2UgPSBMb2NhbENsYW5nU2VydmljZU1vY2s7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTG9jYWxDbGFuZ1NlcnZpY2U7XG4iXX0=
