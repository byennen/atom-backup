var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

/**
 * This code implements the NuclideFs client.  It uses the request module to
 * make XHR requests to the NuclideFS service.  It is a Promise based API.
 */

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

'use babel';

var fs = require('fs');
var extend = require('util')._extend;

var NuclideClient = (function () {
  function NuclideClient(id, eventbus) {
    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

    _classCallCheck(this, NuclideClient);

    this._id = id;
    this.eventbus = eventbus;
    this._options = options;
    this._searchProviders = {};
  }

  _createClass(NuclideClient, [{
    key: 'getID',
    value: function getID() {
      return this._id;
    }

    /**
     * Reads a file from remote FS
     *
     * @param path the path to the file to read
     * @param options set of options that are passed to fs.createReadStream.
     *
     * It returns promise that resolves to a Buffer with the file contents.
     */
  }, {
    key: 'readFile',
    value: _asyncToGenerator(function* (path, options) {
      return this.eventbus.callMethod(
      /*serviceName*/'fs',
      /*methodName*/'readFile',
      /*methodArgs*/[path, options]);
    })

    /**
     * Writes a file to the remote FS
     *
     * @param path the path to the file to read
     * @param data a node buffer of the data to write to file
     * @param options set of options that are passed to fs.createReadStream.
     *
     * It returns a void promise.
     */
  }, {
    key: 'writeFile',
    value: function writeFile(path, data, options) {
      return this.eventbus.callMethod(
      /*serviceName*/'fs',
      /*methodName*/'writeFile',
      /*methodArgs*/[path, options],
      /*extraOptions*/{ body: data, method: 'POST' });
    }

    /**
     * Creates a new, empty file on the remote FS.
     *
     * If no file (or directory) at the specified path exists, creates the parent
     * directories (if necessary) and then writes an empty file at the specified
     * path.
     *
     * @return A boolean indicating whether the file was created.
     */
  }, {
    key: 'newFile',
    value: function newFile(path) {
      return this.eventbus.callMethod(
      /*serviceName*/'fs',
      /*methodName*/'newFile',
      /*methodArgs*/[path],
      /*extraOptions*/{ method: 'POST', json: true });
    }

    /**
     * Returns an fs.Stats promise from remote FS
     *
     * @param path the path to the file/directory to get Stats for
     */
  }, {
    key: 'stat',
    value: _asyncToGenerator(function* (path) {
      var body = yield this.eventbus.callMethod(
      /*serviceName*/'fs',
      /*methodName*/'stat',
      /*methodArgs*/[path],
      /*extraOptions*/{ json: true });
      return createStats(body);
    })

    /**
     * Returns a promism that resolves to an array of
     * {file: 'name', stats: <fs.Stats>} from remote FS
     *
     * @param path the path to the directory to get entries for
     */
  }, {
    key: 'readdir',
    value: _asyncToGenerator(function* (path) {
      var body = yield this.eventbus.callMethod(
      /*serviceName*/'fs',
      /*methodName*/'readdir',
      /*methodArgs*/[path],
      /*extraOptions*/{ json: true });
      return body.map(function (entry) {
        return {
          file: entry.file,
          stats: createStats(entry.stats),
          isSymbolicLink: entry.isSymbolicLink
        };
      });
    })

    /**
     * Returns an fs.Stats promise from remote FS
     *
     * @param path the path to the file/directory to get Stats for
     *
     * Same as stats call above except it will return the stats for the
     * underlying file if a link is passed.
     */
  }, {
    key: 'lstat',
    value: _asyncToGenerator(function* (path) {
      var body = yield this.eventbus.callMethod(
      /*serviceName*/'fs',
      /*methodName*/'lstat',
      /*methodArgs*/[path],
      /*extraOptions*/{ json: true });
      return createStats(body);
    })

    /**
     * Checks for existence of a file/directory/link on a remote FS
     *
     * @param path the path to the file/directory to check for existence
     *
     * It returns promise that resolve to true if file exists, false otherwise.
     */
  }, {
    key: 'exists',
    value: function exists(path) {
      return this.eventbus.callMethod(
      /*serviceName*/'fs',
      /*methodName*/'exists',
      /*methodArgs*/[path],
      /*extraOptions*/{ json: true });
    }

    /**
     * Gets the real path of a file path.
     * It could be different than the given path if the file is a symlink
     * or exists in a symlinked directory.
     */
  }, {
    key: 'realpath',
    value: function realpath(path) {
      return this.eventbus.callMethod(
      /*serviceName*/'fs',
      /*methodName*/'realpath',
      /*methodArgs*/[path]);
    }

    /**
     * Rename a file or folder.
     */
  }, {
    key: 'rename',
    value: function rename(sourcePath, destinationPath) {
      return this.eventbus.callMethod(
      /*serviceName*/'fs',
      /*methodName*/'rename',
      /*methodArgs*/[sourcePath, destinationPath],
      /*extraOptions*/{ method: 'POST' });
    }

    /**
     * Creates a new directory with the given path.
     * Throws EEXIST error if the directory already exists.
     * Throws ENOENT if the path given is nested in a non-existing directory.
     */
  }, {
    key: 'mkdir',
    value: function mkdir(path) {
      return this.eventbus.callMethod(
      /*serviceName*/'fs',
      /*methodName*/'mkdir',
      /*methodArgs*/[path],
      /*extraOptions*/{ method: 'POST' });
    }

    /**
     * Runs the equivalent of `mkdir -p` with the given path.
     *
     * Like most implementations of mkdirp, if it fails, it is possible that
     * directories were created for some prefix of the given path.
     * @return true if the path was created; false if it already existed.
     */
  }, {
    key: 'mkdirp',
    value: function mkdirp(path) {
      return this.eventbus.callMethod(
      /*serviceName*/'fs',
      /*methodName*/'mkdirp',
      /*methodArgs*/[path],
      /*extraOptions*/{ method: 'POST', json: true });
    }

    /*
     * Removes directories even if they are non-empty. Does not fail if the directory doesn't exist.
     */
  }, {
    key: 'rmdir',
    value: function rmdir(path) {
      return this.eventbus.callMethod(
      /*serviceName*/'fs',
      /*methodName*/'rmdir',
      /*methodArgs*/[path],
      /*extraOptions*/{ method: 'POST', json: true });
    }

    /**
     * Removes files. Does not fail if the file doesn't exist.
     */
  }, {
    key: 'unlink',
    value: function unlink(path) {
      return this.eventbus.callMethod(
      /*serviceName*/'fs',
      /*methodName*/'unlink',
      /*methodArgs*/[path],
      /*extraOptions*/{ method: 'POST', json: true });
    }
  }, {
    key: 'findNearestFile',
    value: function findNearestFile(fileName, pathToDirectory) {
      return this.eventbus.callMethod(
      /*serviceName*/'fs',
      /*methodName*/'findNearestFile',
      /*methodArgs*/[fileName, pathToDirectory],
      /*extraOptions*/{ json: true });
    }

    /**
     * Make rpc call to service given serviceUri in form of `$serviceName/$methodName` and args as arguments list.
     */
  }, {
    key: 'makeRpc',
    value: function makeRpc(serviceUri, args, serviceOptions) {
      var _serviceUri$split = serviceUri.split('/');

      var _serviceUri$split2 = _slicedToArray(_serviceUri$split, 2);

      var serviceName = _serviceUri$split2[0];
      var methodName = _serviceUri$split2[1];

      return this.eventbus.callServiceFrameworkMethod(serviceName, methodName,
      /* methodArgs */args,
      /* serviceOptions */serviceOptions);
    }
  }, {
    key: 'registerEventListener',
    value: function registerEventListener(eventName, callback, serviceOptions) {
      return this.eventbus.registerEventListener(eventName, callback, serviceOptions);
    }

    /**
     * Searches the contents of `directory` for paths mathing `query`.
     */
  }, {
    key: 'searchDirectory',
    value: _asyncToGenerator(function* (directory, query) {
      return yield this.eventbus.callMethod(
      /*serviceName*/'search',
      /*methodName*/'directory',
      /*methodArgs*/[directory, query],
      /*extraOptions*/{ json: true });
    })

    /**
     * Returns the server version.
     */
  }, {
    key: 'version',
    value: function version() {
      return this.eventbus.callMethod(
      /*serviceName*/'server',
      /*methodName*/'version',
      /*methodArgs*/[],
      /*extraOptions*/{ method: 'POST', json: true });
    }

    /**
     * Returns the server version.
     */
  }, {
    key: 'shutdownServer',
    value: function shutdownServer() {
      return this.eventbus.callMethod(
      /*serviceName*/'server',
      /*methodName*/'shutdown',
      /*methodArgs*/[],
      /*extraOptions*/{ method: 'POST' });
    }
  }, {
    key: 'watchFile',
    value: _asyncToGenerator(function* (filePath) {
      var watcherId = yield this.eventbus.callMethod(
      /*serviceName*/'watcher',
      /*methodName*/'watchFile',
      /*methodArgs*/[filePath],
      /*extraOptions*/{ method: 'POST', json: true });
      return yield this.eventbus.consumeEventEmitter(watcherId, ['change', 'rename', 'delete']);
    })
  }, {
    key: 'watchDirectory',
    value: _asyncToGenerator(function* (directoryPath) {
      var watcherId = yield this.eventbus.callMethod(
      /*serviceName*/'watcher',
      /*methodName*/'watchDirectory',
      /*methodArgs*/[directoryPath],
      /*extraOptions*/{ method: 'POST', json: true });
      return yield this.eventbus.consumeEventEmitter(watcherId, ['change']);
    })
  }, {
    key: 'watchDirectoryRecursive',
    value: _asyncToGenerator(function* (directoryPath, handler) {
      var watchChannel = watchDirectoryChannel(directoryPath);
      yield this.eventbus.subscribeToChannel(watchChannel, handler);
      yield this.eventbus.callMethod(
      /*serviceName*/'watcher',
      /*methodName*/'watchDirectoryRecursive',
      /*methodArgs*/[directoryPath, watchChannel],
      /*extraOptions*/{ method: 'POST', json: true });
    })
  }, {
    key: 'unwatchFile',
    value: function unwatchFile(filePath) {
      return this.eventbus.callMethod(
      /*serviceName*/'watcher',
      /*methodName*/'unwatchFile',
      /*methodArgs*/[filePath],
      /*extraOptions*/{ method: 'POST', json: true });
    }
  }, {
    key: 'unwatchDirectory',
    value: function unwatchDirectory(directoryPath) {
      return this.eventbus.callMethod(
      /*serviceName*/'watcher',
      /*methodName*/'unwatchDirectory',
      /*methodArgs*/[directoryPath],
      /*extraOptions*/{ method: 'POST', json: true });
    }
  }, {
    key: 'unwatchDirectoryRecursive',
    value: function unwatchDirectoryRecursive(directoryPath) {
      return this.eventbus.callMethod(
      /*serviceName*/'watcher',
      /*methodName*/'unwatchDirectoryRecursive',
      /*methodArgs*/[directoryPath],
      /*extraOptions*/{ method: 'POST', json: true });
    }
  }, {
    key: 'doSearchQuery',
    value: function doSearchQuery(rootDirectory, provider, query) {
      return this.eventbus.callMethod(
      /*serviceName*/'search',
      /*methodName*/'query',
      /*methodArgs*/[rootDirectory, provider, query],
      /*extraOptions*/{ method: 'POST', json: true });
    }
  }, {
    key: 'getSearchProviders',
    value: _asyncToGenerator(function* (rootDirectory) {
      var providers = this._searchProviders[rootDirectory];
      if (providers) {
        return providers;
      }
      providers = yield this.eventbus.callMethod(
      /*serviceName*/'search',
      /*methodName*/'listProviders',
      /*methodArgs*/[rootDirectory],
      /*extraOptions*/{ method: 'POST', json: true });

      this._searchProviders[rootDirectory] = providers;

      return providers;
    })
  }, {
    key: 'getHackDiagnostics',
    value: function getHackDiagnostics() {
      var cwd = this._options.cwd;

      return this.eventbus.callMethod(
      /*serviceName*/'hack',
      /*methodName*/'getDiagnostics',
      /*methodArgs*/[{ cwd: cwd }],
      /*extraOptions*/{ method: 'POST', json: true });
    }
  }, {
    key: 'getHackCompletions',
    value: function getHackCompletions(query) {
      var cwd = this._options.cwd;

      return this.eventbus.callMethod(
      /*serviceName*/'hack',
      /*methodName*/'getCompletions',
      /*methodArgs*/[query, { cwd: cwd }],
      /*extraOptions*/{ method: 'POST', json: true });
    }
  }, {
    key: 'getHackDefinition',
    value: function getHackDefinition(query, symbolType) {
      var cwd = this._options.cwd;

      return this.eventbus.callMethod(
      /*serviceName*/'hack',
      /*methodName*/'getDefinition',
      /*methodArgs*/[query, symbolType, { cwd: cwd }],
      /*extraOptions*/{ method: 'POST', json: true });
    }
  }, {
    key: 'getHackDependencies',
    value: function getHackDependencies(dependenciesInfo) {
      var cwd = this._options.cwd;

      return this.eventbus.callMethod(
      /*serviceName*/'hack',
      /*methodName*/'getDependencies',
      /*methodArgs*/[dependenciesInfo, { cwd: cwd }],
      /*extraOptions*/{ method: 'POST', json: true });
    }
  }, {
    key: 'getHackSearchResults',
    value: function getHackSearchResults(search, filterTypes, searchPostfix) {
      var cwd = this._options.cwd;

      return this.eventbus.callMethod(
      /*serviceName*/'hack',
      /*methodName*/'getSearchResults',
      /*methodArgs*/[search, filterTypes, searchPostfix, { cwd: cwd }],
      /*extraOptions*/{ method: 'POST', json: true });
    }
  }, {
    key: 'getHackReferences',
    value: function getHackReferences(query) {
      var cwd = this._options.cwd;

      return this.eventbus.callMethod(
      /*serviceName*/'hack',
      /*methodName*/'getReferences',
      /*methodArgs*/[query, { cwd: cwd }],
      /*extraOptions*/{ method: 'POST', json: true });
    }
  }, {
    key: 'isHackClientAvailable',
    value: function isHackClientAvailable() {
      return this.eventbus.callMethod(
      /*serviceName*/'hack',
      /*methodName*/'isClientAvailable',
      /*methodArgs*/[],
      /*extraOptions*/{ method: 'POST', json: true });
    }
  }, {
    key: 'close',
    value: function close() {
      if (this.eventbus) {
        this.eventbus.close();
        this.eventbus = null;
      }
    }
  }]);

  return NuclideClient;
})();

function createStats(jsonStats) {
  var stats = new fs.Stats();

  stats.dev = jsonStats.dev;
  stats.mode = jsonStats.mode;
  stats.nlink = jsonStats.nlink;
  stats.uid = jsonStats.uid;
  stats.gid = jsonStats.gid;
  stats.rdev = jsonStats.rdev;
  stats.blksize = jsonStats.blksize;
  stats.ino = jsonStats.ino;
  stats.size = jsonStats.size;
  stats.blocks = jsonStats.blocks;
  stats.atime = new Date(jsonStats.atime);
  stats.mtime = new Date(jsonStats.mtime);
  stats.ctime = new Date(jsonStats.ctime);

  if (jsonStats.birthtime) {
    stats.birthtime = new Date(jsonStats.birthtime);
  }

  return stats;
}

module.exports = NuclideClient;

function watchDirectoryChannel(directoryPath) {
  return 'watch' + directoryPath;
}
//# sourceMappingURL=data:application/json;base64,
