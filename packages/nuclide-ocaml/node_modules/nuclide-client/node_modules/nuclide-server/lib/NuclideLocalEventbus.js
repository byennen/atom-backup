
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _require = require('events');

var EventEmitter = _require.EventEmitter;

var path = require('path');

var _require2 = require('./config');

var loadConfigsOfServiceWithoutServiceFramework = _require2.loadConfigsOfServiceWithoutServiceFramework;

var idIncrement = 0;

var NuclideLocalEventbus = (function (_EventEmitter) {
  _inherits(NuclideLocalEventbus, _EventEmitter);

  function NuclideLocalEventbus() {
    var _this = this;

    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, NuclideLocalEventbus);

    _get(Object.getPrototypeOf(NuclideLocalEventbus.prototype), 'constructor', this).call(this);
    // Servces can use the eventbus API like: `this.publish(eventName, {})`.
    this.publish = this.broadcast = this.emit;
    this.subscribe = this.on;
    this.subscribeOnce = this.once;
    this.unsubscribe = this.removeListener;
    this._eventEmitters = {};
    this._options = options;
    this._services = {};

    this._enabledServices = loadConfigsOfServiceWithoutServiceFramework();

    this._enabledServices.forEach(function (service_path) {
      var _require3 = require(service_path);

      var services = _require3.services;

      for (var serviceId in services) {
        _this._services[serviceId] = services[serviceId];
      }
    });

    // Run initialize after all services registered if exists.
    this._enabledServices.forEach(function (service_path) {
      var _require4 = require(service_path);

      var initialize = _require4.initialize;

      if (initialize) {
        initialize(_this);
      }
    });

    var _require5 = require('nuclide-commons');

    var fsPromise = _require5.fsPromise;

    // readFile and writeFile aren't exposed as services for performance optimization.
    this._services['/fs/readFile'] = { handler: fsPromise.readFile };
    this._services['/fs/writeFile'] = { handler: fsPromise.writeFile };
  }

  _createClass(NuclideLocalEventbus, [{
    key: 'callMethod',
    value: _asyncToGenerator(function* (serviceName, methodName, methodArgs, extraOptions) {

      var serviceId = '/' + serviceName + '/' + methodName;
      // extend the default options with the extra options
      var service = this._services[serviceId];
      if (!service) {
        throw new Error('Cannot call a non registered local service with id: ' + serviceId);
      }
      return service.handler.apply(this, methodArgs);
    })
  }, {
    key: 'callService',
    value: function callService(serviceName, args) {
      var serviceFunction = this._services[serviceName];
      if (!serviceFunction) {
        throw Error('No service registered with name: ' + serviceName);
      }
      return serviceFunction.handler.apply(this, args);
    }
  }, {
    key: 'subscribeToChannel',
    value: _asyncToGenerator(function* (channel, handler) {
      var _this2 = this;

      this.on(channel, handler);
      return {
        dispose: function dispose() {
          return _this2.removeListener(channel, handler);
        }
      };
    })
  }, {
    key: 'consumeStream',
    value: function consumeStream(streamId) {
      var streamEvents = ['data', 'error', 'close', 'end'];
      return this.consumeEventEmitter(streamId, streamEvents, ['end']);
    }
  }, {
    key: 'consumeEventEmitter',
    value: function consumeEventEmitter(id) {
      return Promise.resolve(this.getEventEmitter(id));
    }
  }, {
    key: 'registerEventEmitter',
    value: function registerEventEmitter(eventEmitter) {
      var id = ++idIncrement;
      this._eventEmitters[id] = eventEmitter;
      return id;
    }
  }, {
    key: 'getEventEmitter',
    value: function getEventEmitter(id) {
      return this._eventEmitters[id];
    }
  }, {
    key: 'close',
    value: function close() {
      var _this3 = this;

      this._enabledServices.forEach(function (service_path) {
        var _require6 = require(service_path);

        var shutdown = _require6.shutdown;

        if (shutdown) {
          shutdown(_this3);
        }
      });
    }
  }]);

  return NuclideLocalEventbus;
})(EventEmitter);

module.exports = NuclideLocalEventbus;
//# sourceMappingURL=data:application/json;base64,
