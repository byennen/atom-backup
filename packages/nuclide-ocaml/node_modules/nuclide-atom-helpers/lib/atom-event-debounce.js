
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

/**
 * Often, we may want to respond to Atom events, but only after a buffer period
 * of no change.
 * For example, Atom provides Workspace::onDidChangeActivePaneItem, but we may
 * want to know not when the active pane item has changed, buth when it has
 * stopped changing.
 * This file provides methods to do this.
 */

var _require = require('nuclide-commons');

var debounce = _require.debounce;

/**
 * Similar to Atom's Workspace::onDidChangeActivePaneItem
 * (https://atom.io/docs/api/v1.0.2/Workspace#instance-onDidChangeActivePaneItem),
 * with the addition of a debounce interval.
 * @param debounceInterval The number of milliseconds to debounce.
 */
function onWorkspaceDidStopChangingActivePaneItem(callback, debounceInterval) {
  var debouncedFunction = debounce(callback, debounceInterval);
  return atom.workspace.onDidChangeActivePaneItem(debouncedFunction);
}

module.exports = {
  onWorkspaceDidStopChangingActivePaneItem: onWorkspaceDidStopChangingActivePaneItem
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWF0b20taGVscGVycy9saWIvYXRvbS1ldmVudC1kZWJvdW5jZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7ZUFvQkssT0FBTyxDQUFDLGlCQUFpQixDQUFDOztJQUF0QyxRQUFRLFlBQVIsUUFBUTs7Ozs7Ozs7QUFRYixTQUFTLHdDQUF3QyxDQUM3QyxRQUE4QixFQUM5QixnQkFBd0IsRUFDUDtBQUNuQixNQUFJLGlCQUFpQixHQUFHLFFBQVEsQ0FBQyxRQUFRLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztBQUM3RCxTQUFPLElBQUksQ0FBQyxTQUFTLENBQUMseUJBQXlCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztDQUNwRTs7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHO0FBQ2YsMENBQXdDLEVBQXhDLHdDQUF3QztDQUN6QyxDQUFDIiwiZmlsZSI6Ii92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWF0b20taGVscGVycy9saWIvYXRvbS1ldmVudC1kZWJvdW5jZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qKlxuICogT2Z0ZW4sIHdlIG1heSB3YW50IHRvIHJlc3BvbmQgdG8gQXRvbSBldmVudHMsIGJ1dCBvbmx5IGFmdGVyIGEgYnVmZmVyIHBlcmlvZFxuICogb2Ygbm8gY2hhbmdlLlxuICogRm9yIGV4YW1wbGUsIEF0b20gcHJvdmlkZXMgV29ya3NwYWNlOjpvbkRpZENoYW5nZUFjdGl2ZVBhbmVJdGVtLCBidXQgd2UgbWF5XG4gKiB3YW50IHRvIGtub3cgbm90IHdoZW4gdGhlIGFjdGl2ZSBwYW5lIGl0ZW0gaGFzIGNoYW5nZWQsIGJ1dGggd2hlbiBpdCBoYXNcbiAqIHN0b3BwZWQgY2hhbmdpbmcuXG4gKiBUaGlzIGZpbGUgcHJvdmlkZXMgbWV0aG9kcyB0byBkbyB0aGlzLlxuICovXG5cbnZhciB7ZGVib3VuY2V9ID0gcmVxdWlyZSgnbnVjbGlkZS1jb21tb25zJyk7XG5cbi8qKlxuICogU2ltaWxhciB0byBBdG9tJ3MgV29ya3NwYWNlOjpvbkRpZENoYW5nZUFjdGl2ZVBhbmVJdGVtXG4gKiAoaHR0cHM6Ly9hdG9tLmlvL2RvY3MvYXBpL3YxLjAuMi9Xb3Jrc3BhY2UjaW5zdGFuY2Utb25EaWRDaGFuZ2VBY3RpdmVQYW5lSXRlbSksXG4gKiB3aXRoIHRoZSBhZGRpdGlvbiBvZiBhIGRlYm91bmNlIGludGVydmFsLlxuICogQHBhcmFtIGRlYm91bmNlSW50ZXJ2YWwgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVib3VuY2UuXG4gKi9cbmZ1bmN0aW9uIG9uV29ya3NwYWNlRGlkU3RvcENoYW5naW5nQWN0aXZlUGFuZUl0ZW0oXG4gICAgY2FsbGJhY2s6IChpdGVtOiBtaXhlZCkgPT4gYW55LFxuICAgIGRlYm91bmNlSW50ZXJ2YWw6IG51bWJlclxuICApOiBhdG9tJERpc3Bvc2FibGUge1xuICB2YXIgZGVib3VuY2VkRnVuY3Rpb24gPSBkZWJvdW5jZShjYWxsYmFjaywgZGVib3VuY2VJbnRlcnZhbCk7XG4gIHJldHVybiBhdG9tLndvcmtzcGFjZS5vbkRpZENoYW5nZUFjdGl2ZVBhbmVJdGVtKGRlYm91bmNlZEZ1bmN0aW9uKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIG9uV29ya3NwYWNlRGlkU3RvcENoYW5naW5nQWN0aXZlUGFuZUl0ZW0sXG59O1xuIl19
