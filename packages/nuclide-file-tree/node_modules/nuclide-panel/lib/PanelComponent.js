
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _require = require('atom');

var CompositeDisposable = _require.CompositeDisposable;

var React = require('react-for-atom');

var PropTypes = React.PropTypes;

var MINIMUM_LENGTH = 100;

/**
 * A container for centralizing the logic for making panels scrollable,
 * resizeable, dockable, etc.
 */
var PanelComponent = React.createClass({
  displayName: 'PanelComponent',

  propTypes: {
    children: React.PropTypes.element.isRequired,
    dock: PropTypes.oneOf(['left', 'bottom', 'right']).isRequired,
    initialLength: PropTypes.number
  },

  getDefaultProps: function getDefaultProps() {
    return {
      initalLength: 200
    };
  },

  getInitialState: function getInitialState() {
    return {
      isResizing: false,
      length: this.props.initialLength
    };
  },

  render: function render() {
    // We create an overlay to always display the resize cursor while the user
    // is resizing the panel, even if their mouse leaves the handle.
    var resizeCursorOverlay = null;
    if (this.state.isResizing) {
      resizeCursorOverlay = React.createElement('div', { className: 'nuclide-panel-component-resize-cursor-overlay ' + this.props.dock });
    }

    var containerStyle;
    if (this.props.dock === 'left' || this.props.dock === 'right') {
      containerStyle = {
        width: this.state.length,
        minWidth: MINIMUM_LENGTH
      };
    } else if (this.props.dock === 'bottom') {
      containerStyle = {
        height: this.state.length,
        minHeight: MINIMUM_LENGTH
      };
    }

    var content = React.cloneElement(React.Children.only(this.props.children), { ref: 'child' });

    return React.createElement(
      'div',
      { className: 'nuclide-panel-component ' + this.props.dock,
        ref: 'container',
        style: containerStyle },
      React.createElement('div', { className: 'nuclide-panel-component-resize-handle ' + this.props.dock,
        ref: 'handle',
        onMouseDown: this._handleMouseDown,
        onDoubleClick: this._handleDoubleClick }),
      React.createElement(
        'div',
        { className: 'nuclide-panel-component-scroller' },
        content
      ),
      resizeCursorOverlay
    );
  },

  /**
   * Returns the current resizable length.
   *
   * For panels docked left or right, the length is the width. For panels
   * docked top or bottom, it's the height.
   */
  getLength: function getLength() {
    return this.state.length;
  },

  focus: function focus() {
    this.refs.child.getDOMNode().focus();
  },

  getChildComponent: function getChildComponent() {
    return this.refs.child;
  },

  _handleMouseDown: function _handleMouseDown(event) {
    var _this = this;

    this._resizeSubscriptions = new CompositeDisposable();

    window.addEventListener('mousemove', this._handleMouseMove);
    this._resizeSubscriptions.add({
      dispose: function dispose() {
        return window.removeEventListener('mousemove', _this._handleMouseMove);
      }
    });

    window.addEventListener('mouseup', this._handleMouseUp);
    this._resizeSubscriptions.add({
      dispose: function dispose() {
        return window.removeEventListener('mouseup', _this._handleMouseUp);
      }
    });

    this.setState({ isResizing: true });
  },

  _handleMouseMove: function _handleMouseMove(event) {
    var containerEl = this.refs['container'].getDOMNode();
    var length = 0;
    if (this.props.dock === 'left') {
      length = event.pageX - containerEl.getBoundingClientRect().left;
    } else if (this.props.dock === 'bottom') {
      length = containerEl.getBoundingClientRect().bottom - event.pageY;
    } else if (this.props.dock === 'right') {
      length = containerEl.getBoundingClientRect().right - event.pageX;
    }
    this.setState({ length: length });
  },

  _handleMouseUp: function _handleMouseUp(event) {
    if (this._resizeSubscriptions) {
      this._resizeSubscriptions.dispose();
    }
    this.setState({ isResizing: false });
  },

  /**
   * Resize the pane to fit its contents.
   */
  _handleDoubleClick: function _handleDoubleClick() {
    var _this2 = this;

    // Reset size to 0 and read the content's natural width (after re-layout)
    // to determine the size to scale to.
    this.setState({ length: 0 });
    this.forceUpdate(function () {
      var length = 0;
      var childNode = _this2.refs.child.getDOMNode();
      var handle = _this2.refs.handle.getDOMNode();
      if (_this2.props.dock === 'left' || _this2.props.dock === 'right') {
        length = childNode.offsetWidth + handle.offsetWidth;
      } else if (_this2.props.dock === 'bottom') {
        length = childNode.offsetHeight + handle.offsetHeight;
      } else {
        throw new Error('unhandled dock');
      }
      _this2.setState({ length: length });
    });
  }
});

module.exports = PanelComponent;
//# sourceMappingURL=data:application/json;base64,
