
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _require = require('atom');

var Disposable = _require.Disposable;

var _require2 = require('events');

var EventEmitter = _require2.EventEmitter;

var GRAMMAR_CHANGE_EVENT = 'grammar-change';

/**
 * A singleton that listens to grammar changes in all text editors.
 */

var GrammarForTextEditorsListener = (function () {
  function GrammarForTextEditorsListener() {
    var _this = this;

    _classCallCheck(this, GrammarForTextEditorsListener);

    this._emitter = new EventEmitter();
    this._grammarSubscriptionsMap = new Map();
    this._destroySubscriptionsMap = new Map();
    this._textEditorsSubscription = atom.workspace.observeTextEditors(function (textEditor) {
      var grammarSubscription = textEditor.observeGrammar(function (grammar) {
        _this._emitter.emit(GRAMMAR_CHANGE_EVENT, textEditor);
      });
      _this._grammarSubscriptionsMap.set(textEditor, grammarSubscription);

      var destroySubscription = textEditor.onDidDestroy(function () {
        var subscription = _this._grammarSubscriptionsMap.get(textEditor);
        if (subscription) {
          subscription.dispose();
          _this._grammarSubscriptionsMap['delete'](textEditor);
        }

        destroySubscription.dispose();
        _this._destroySubscriptionsMap['delete'](textEditor);
      });
      _this._destroySubscriptionsMap.set(textEditor, destroySubscription);
    });
  }

  _createClass(GrammarForTextEditorsListener, [{
    key: 'observeGrammarForTextEditors',
    value: function observeGrammarForTextEditors(fn) {
      var _this2 = this;

      function fnWithGrammar(textEditor) {
        fn(textEditor, textEditor.getGrammar());
      }

      // The event was already handled before `fn` was added to the emitter, so
      // we need to call it on all the existing editors.
      atom.workspace.getTextEditors().forEach(fnWithGrammar);
      this._emitter.addListener(GRAMMAR_CHANGE_EVENT, fnWithGrammar);
      return new Disposable(function () {
        _this2._emitter.removeListener(GRAMMAR_CHANGE_EVENT, fnWithGrammar);
      });
    }
  }, {
    key: 'dispose',
    value: function dispose() {
      this._emitter.removeAllListeners();
      this._grammarSubscriptionsMap.forEach(function (subscription) {
        return subscription.dispose();
      });
      this._grammarSubscriptionsMap.clear();
      this._destroySubscriptionsMap.forEach(function (subscription) {
        return subscription.dispose();
      });
      this._destroySubscriptionsMap.clear();
      this._textEditorsSubscription.dispose();
    }
  }]);

  return GrammarForTextEditorsListener;
})();

var listeners = new WeakMap();

module.exports =
/**
 * Use this to perform an action on every text editor with its latest grammar.
 *
 * @param fn This is called once for every text editor, and then again every
 * time it changes to a grammar.
 */
function observeGrammarForTextEditors(fn) {
  // The listener should be a global singleton but workspaces are destroyed
  // between each test run so we need to reinstantiate the listener to attach
  // to the current workspace.
  var listener = listeners.get(atom.workspace);
  if (!listener) {
    listener = new GrammarForTextEditorsListener();
    listeners.set(atom.workspace, listener);
  }
  return listener.observeGrammarForTextEditors(fn);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWF0b20taGVscGVycy9saWIvb2JzZXJ2ZS1ncmFtbWFyLWZvci10ZXh0LWVkaXRvcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxDQUFDOzs7Ozs7Ozs7Ozs7OztlQVdPLE9BQU8sQ0FBQyxNQUFNLENBQUM7O0lBQTdCLFVBQVUsWUFBVixVQUFVOztnQkFDTSxPQUFPLENBQUMsUUFBUSxDQUFDOztJQUFqQyxZQUFZLGFBQVosWUFBWTs7QUFFakIsSUFBSSxvQkFBb0IsR0FBRyxnQkFBZ0IsQ0FBQzs7Ozs7O0lBS3RDLDZCQUE2QjtBQUN0QixXQURQLDZCQUE2QixHQUNuQjs7OzBCQURWLDZCQUE2Qjs7QUFFL0IsUUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0FBQ25DLFFBQUksQ0FBQyx3QkFBd0IsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0FBQzFDLFFBQUksQ0FBQyx3QkFBd0IsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0FBQzFDLFFBQUksQ0FBQyx3QkFBd0IsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLFVBQUEsVUFBVSxFQUFJO0FBQzlFLFVBQUksbUJBQW1CLEdBQUcsVUFBVSxDQUFDLGNBQWMsQ0FBQyxVQUFBLE9BQU8sRUFBSTtBQUM3RCxjQUFLLFFBQVEsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsVUFBVSxDQUFDLENBQUM7T0FDdEQsQ0FBQyxDQUFDO0FBQ0gsWUFBSyx3QkFBd0IsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLG1CQUFtQixDQUFDLENBQUM7O0FBRW5FLFVBQUksbUJBQW1CLEdBQUcsVUFBVSxDQUFDLFlBQVksQ0FBQyxZQUFNO0FBQ3RELFlBQUksWUFBWSxHQUFHLE1BQUssd0JBQXdCLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ2pFLFlBQUksWUFBWSxFQUFFO0FBQ2hCLHNCQUFZLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDdkIsZ0JBQUssd0JBQXdCLFVBQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUNsRDs7QUFFRCwyQkFBbUIsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUM5QixjQUFLLHdCQUF3QixVQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7T0FDbEQsQ0FBQyxDQUFDO0FBQ0gsWUFBSyx3QkFBd0IsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLG1CQUFtQixDQUFDLENBQUM7S0FDcEUsQ0FBQyxDQUFDO0dBQ0o7O2VBdkJHLDZCQUE2Qjs7V0F5Qkwsc0NBQUMsRUFBc0QsRUFBYzs7O0FBQy9GLGVBQVMsYUFBYSxDQUFDLFVBQVUsRUFBRTtBQUNqQyxVQUFFLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO09BQ3pDOzs7O0FBSUQsVUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDdkQsVUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsb0JBQW9CLEVBQUUsYUFBYSxDQUFDLENBQUM7QUFDL0QsYUFBTyxJQUFJLFVBQVUsQ0FBQyxZQUFNO0FBQzFCLGVBQUssUUFBUSxDQUFDLGNBQWMsQ0FBQyxvQkFBb0IsRUFBRSxhQUFhLENBQUMsQ0FBQztPQUNuRSxDQUFDLENBQUM7S0FDSjs7O1dBRU0sbUJBQVM7QUFDZCxVQUFJLENBQUMsUUFBUSxDQUFDLGtCQUFrQixFQUFFLENBQUM7QUFDbkMsVUFBSSxDQUFDLHdCQUF3QixDQUFDLE9BQU8sQ0FBQyxVQUFBLFlBQVk7ZUFBSSxZQUFZLENBQUMsT0FBTyxFQUFFO09BQUEsQ0FBQyxDQUFDO0FBQzlFLFVBQUksQ0FBQyx3QkFBd0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUN0QyxVQUFJLENBQUMsd0JBQXdCLENBQUMsT0FBTyxDQUFDLFVBQUEsWUFBWTtlQUFJLFlBQVksQ0FBQyxPQUFPLEVBQUU7T0FBQSxDQUFDLENBQUM7QUFDOUUsVUFBSSxDQUFDLHdCQUF3QixDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ3RDLFVBQUksQ0FBQyx3QkFBd0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQztLQUN6Qzs7O1NBOUNHLDZCQUE2Qjs7O0FBaURuQyxJQUFJLFNBQVMsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDOztBQUU5QixNQUFNLENBQUMsT0FBTzs7Ozs7OztBQU9kLFNBQVMsNEJBQTRCLENBQUMsRUFBb0MsRUFBYzs7OztBQUl0RixNQUFJLFFBQVEsR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUM3QyxNQUFJLENBQUMsUUFBUSxFQUFFO0FBQ2IsWUFBUSxHQUFHLElBQUksNkJBQTZCLEVBQUUsQ0FBQztBQUMvQyxhQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUM7R0FDekM7QUFDRCxTQUFPLFFBQVEsQ0FBQyw0QkFBNEIsQ0FBQyxFQUFFLENBQUMsQ0FBQztDQUNsRCxDQUFDIiwiZmlsZSI6Ii92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWF0b20taGVscGVycy9saWIvb2JzZXJ2ZS1ncmFtbWFyLWZvci10ZXh0LWVkaXRvcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG52YXIge0Rpc3Bvc2FibGV9ID0gcmVxdWlyZSgnYXRvbScpO1xudmFyIHtFdmVudEVtaXR0ZXJ9ID0gcmVxdWlyZSgnZXZlbnRzJyk7XG5cbnZhciBHUkFNTUFSX0NIQU5HRV9FVkVOVCA9ICdncmFtbWFyLWNoYW5nZSc7XG5cbi8qKlxuICogQSBzaW5nbGV0b24gdGhhdCBsaXN0ZW5zIHRvIGdyYW1tYXIgY2hhbmdlcyBpbiBhbGwgdGV4dCBlZGl0b3JzLlxuICovXG5jbGFzcyBHcmFtbWFyRm9yVGV4dEVkaXRvcnNMaXN0ZW5lciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX2VtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgdGhpcy5fZ3JhbW1hclN1YnNjcmlwdGlvbnNNYXAgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5fZGVzdHJveVN1YnNjcmlwdGlvbnNNYXAgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5fdGV4dEVkaXRvcnNTdWJzY3JpcHRpb24gPSBhdG9tLndvcmtzcGFjZS5vYnNlcnZlVGV4dEVkaXRvcnModGV4dEVkaXRvciA9PiB7XG4gICAgICB2YXIgZ3JhbW1hclN1YnNjcmlwdGlvbiA9IHRleHRFZGl0b3Iub2JzZXJ2ZUdyYW1tYXIoZ3JhbW1hciA9PiB7XG4gICAgICAgIHRoaXMuX2VtaXR0ZXIuZW1pdChHUkFNTUFSX0NIQU5HRV9FVkVOVCwgdGV4dEVkaXRvcik7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuX2dyYW1tYXJTdWJzY3JpcHRpb25zTWFwLnNldCh0ZXh0RWRpdG9yLCBncmFtbWFyU3Vic2NyaXB0aW9uKTtcblxuICAgICAgdmFyIGRlc3Ryb3lTdWJzY3JpcHRpb24gPSB0ZXh0RWRpdG9yLm9uRGlkRGVzdHJveSgoKSA9PiB7XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9ncmFtbWFyU3Vic2NyaXB0aW9uc01hcC5nZXQodGV4dEVkaXRvcik7XG4gICAgICAgIGlmIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICBzdWJzY3JpcHRpb24uZGlzcG9zZSgpO1xuICAgICAgICAgIHRoaXMuX2dyYW1tYXJTdWJzY3JpcHRpb25zTWFwLmRlbGV0ZSh0ZXh0RWRpdG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlc3Ryb3lTdWJzY3JpcHRpb24uZGlzcG9zZSgpO1xuICAgICAgICB0aGlzLl9kZXN0cm95U3Vic2NyaXB0aW9uc01hcC5kZWxldGUodGV4dEVkaXRvcik7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuX2Rlc3Ryb3lTdWJzY3JpcHRpb25zTWFwLnNldCh0ZXh0RWRpdG9yLCBkZXN0cm95U3Vic2NyaXB0aW9uKTtcbiAgICB9KTtcbiAgfVxuXG4gIG9ic2VydmVHcmFtbWFyRm9yVGV4dEVkaXRvcnMoZm46ICh0ZXh0RWRpdG9yOiBUZXh0RWRpdG9yLCBncmFtbWFyOiBHcmFtbWFyKSA9PiB2b2lkKTogRGlzcG9zYWJsZSB7XG4gICAgZnVuY3Rpb24gZm5XaXRoR3JhbW1hcih0ZXh0RWRpdG9yKSB7XG4gICAgICBmbih0ZXh0RWRpdG9yLCB0ZXh0RWRpdG9yLmdldEdyYW1tYXIoKSk7XG4gICAgfVxuXG4gICAgLy8gVGhlIGV2ZW50IHdhcyBhbHJlYWR5IGhhbmRsZWQgYmVmb3JlIGBmbmAgd2FzIGFkZGVkIHRvIHRoZSBlbWl0dGVyLCBzb1xuICAgIC8vIHdlIG5lZWQgdG8gY2FsbCBpdCBvbiBhbGwgdGhlIGV4aXN0aW5nIGVkaXRvcnMuXG4gICAgYXRvbS53b3Jrc3BhY2UuZ2V0VGV4dEVkaXRvcnMoKS5mb3JFYWNoKGZuV2l0aEdyYW1tYXIpO1xuICAgIHRoaXMuX2VtaXR0ZXIuYWRkTGlzdGVuZXIoR1JBTU1BUl9DSEFOR0VfRVZFTlQsIGZuV2l0aEdyYW1tYXIpO1xuICAgIHJldHVybiBuZXcgRGlzcG9zYWJsZSgoKSA9PiB7XG4gICAgICB0aGlzLl9lbWl0dGVyLnJlbW92ZUxpc3RlbmVyKEdSQU1NQVJfQ0hBTkdFX0VWRU5ULCBmbldpdGhHcmFtbWFyKTtcbiAgICB9KTtcbiAgfVxuXG4gIGRpc3Bvc2UoKTogdm9pZCB7XG4gICAgdGhpcy5fZW1pdHRlci5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICB0aGlzLl9ncmFtbWFyU3Vic2NyaXB0aW9uc01hcC5mb3JFYWNoKHN1YnNjcmlwdGlvbiA9PiBzdWJzY3JpcHRpb24uZGlzcG9zZSgpKTtcbiAgICB0aGlzLl9ncmFtbWFyU3Vic2NyaXB0aW9uc01hcC5jbGVhcigpO1xuICAgIHRoaXMuX2Rlc3Ryb3lTdWJzY3JpcHRpb25zTWFwLmZvckVhY2goc3Vic2NyaXB0aW9uID0+IHN1YnNjcmlwdGlvbi5kaXNwb3NlKCkpO1xuICAgIHRoaXMuX2Rlc3Ryb3lTdWJzY3JpcHRpb25zTWFwLmNsZWFyKCk7XG4gICAgdGhpcy5fdGV4dEVkaXRvcnNTdWJzY3JpcHRpb24uZGlzcG9zZSgpO1xuICB9XG59XG5cbnZhciBsaXN0ZW5lcnMgPSBuZXcgV2Vha01hcCgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9XG4vKipcbiAqIFVzZSB0aGlzIHRvIHBlcmZvcm0gYW4gYWN0aW9uIG9uIGV2ZXJ5IHRleHQgZWRpdG9yIHdpdGggaXRzIGxhdGVzdCBncmFtbWFyLlxuICpcbiAqIEBwYXJhbSBmbiBUaGlzIGlzIGNhbGxlZCBvbmNlIGZvciBldmVyeSB0ZXh0IGVkaXRvciwgYW5kIHRoZW4gYWdhaW4gZXZlcnlcbiAqIHRpbWUgaXQgY2hhbmdlcyB0byBhIGdyYW1tYXIuXG4gKi9cbmZ1bmN0aW9uIG9ic2VydmVHcmFtbWFyRm9yVGV4dEVkaXRvcnMoZm46ICh0ZXh0RWRpdG9yOiBUZXh0RWRpdG9yKSA9PiB2b2lkKTogRGlzcG9zYWJsZSB7XG4gIC8vIFRoZSBsaXN0ZW5lciBzaG91bGQgYmUgYSBnbG9iYWwgc2luZ2xldG9uIGJ1dCB3b3Jrc3BhY2VzIGFyZSBkZXN0cm95ZWRcbiAgLy8gYmV0d2VlbiBlYWNoIHRlc3QgcnVuIHNvIHdlIG5lZWQgdG8gcmVpbnN0YW50aWF0ZSB0aGUgbGlzdGVuZXIgdG8gYXR0YWNoXG4gIC8vIHRvIHRoZSBjdXJyZW50IHdvcmtzcGFjZS5cbiAgdmFyIGxpc3RlbmVyID0gbGlzdGVuZXJzLmdldChhdG9tLndvcmtzcGFjZSk7XG4gIGlmICghbGlzdGVuZXIpIHtcbiAgICBsaXN0ZW5lciA9IG5ldyBHcmFtbWFyRm9yVGV4dEVkaXRvcnNMaXN0ZW5lcigpO1xuICAgIGxpc3RlbmVycy5zZXQoYXRvbS53b3Jrc3BhY2UsIGxpc3RlbmVyKTtcbiAgfVxuICByZXR1cm4gbGlzdGVuZXIub2JzZXJ2ZUdyYW1tYXJGb3JUZXh0RWRpdG9ycyhmbik7XG59O1xuIl19
