
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _require = require('atom');

var Directory = _require.Directory;

var path = require('path');

/**
 * @param repository Either a GitRepository or HgRepositoryClient.
 * @param filePath The absolute file path of interest.
 * @return boolean Whether the file path exists within the working directory
 *   (aka root directory) of the repository, or is the working directory.
 */
function repositoryContainsPath(repository, filePath) {
  var workingDirectoryPath = repository.getWorkingDirectory();
  if (pathsAreEqual(workingDirectoryPath, filePath)) {
    return true;
  }

  if (repository.getType() === 'git') {
    var rootGitProjectDirectory = new Directory(workingDirectoryPath);
    return rootGitProjectDirectory.contains(filePath);
  } else if (repository.getType() === 'hg') {
    return repository._workingDirectory.contains(filePath);
  }
  throw new Error('repositoryContainsPath: Received an unrecognized repository type. Expected git or hg.');
}

/**
 * @param filePath1 An abolute file path.
 * @param filePath2 An absolute file path.
 * @return Whether the file paths are equal, accounting for trailing slashes.
 */
function pathsAreEqual(filePath1, filePath2) {
  return path.normalize(filePath1 + path.sep) === path.normalize(filePath2 + path.sep);
}

module.exports = repositoryContainsPath;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWhnLWdpdC1icmlkZ2UvbGliL3JlcG9zaXRvcnlDb250YWluc1BhdGguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxDQUFDOzs7Ozs7Ozs7O2VBV00sT0FBTyxDQUFDLE1BQU0sQ0FBQzs7SUFBNUIsU0FBUyxZQUFULFNBQVM7O0FBQ2QsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDOzs7Ozs7OztBQVEzQixTQUFTLHNCQUFzQixDQUFDLFVBQXNCLEVBQUUsUUFBZ0IsRUFBVztBQUNqRixNQUFJLG9CQUFvQixHQUFHLFVBQVUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0FBQzVELE1BQUksYUFBYSxDQUFDLG9CQUFvQixFQUFFLFFBQVEsQ0FBQyxFQUFFO0FBQ2pELFdBQU8sSUFBSSxDQUFDO0dBQ2I7O0FBRUQsTUFBSSxVQUFVLENBQUMsT0FBTyxFQUFFLEtBQUssS0FBSyxFQUFFO0FBQ2xDLFFBQUksdUJBQXVCLEdBQUcsSUFBSSxTQUFTLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUNsRSxXQUFPLHVCQUF1QixDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztHQUNuRCxNQUFNLElBQUksVUFBVSxDQUFDLE9BQU8sRUFBRSxLQUFLLElBQUksRUFBRTtBQUN4QyxXQUFPLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7R0FDeEQ7QUFDRCxRQUFNLElBQUksS0FBSyxDQUFDLHVGQUF1RixDQUFDLENBQUM7Q0FDMUc7Ozs7Ozs7QUFPRCxTQUFTLGFBQWEsQ0FBQyxTQUFpQixFQUFFLFNBQWlCLEVBQVc7QUFDcEUsU0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ3RGOztBQUdELE1BQU0sQ0FBQyxPQUFPLEdBQUcsc0JBQXNCLENBQUMiLCJmaWxlIjoiL3Zhci9mb2xkZXJzL3hmL3JzcGg0X2M1NzMxNXJzNTd4eHNkc2tyeG52MzZ0MC9UL3RtcGVtbTJIdXB1Ymxpc2hfcGFja2FnZXMvbnBtL251Y2xpZGUtaGctZ2l0LWJyaWRnZS9saWIvcmVwb3NpdG9yeUNvbnRhaW5zUGF0aC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciB7RGlyZWN0b3J5fSA9IHJlcXVpcmUoJ2F0b20nKTtcbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuXG4vKipcbiAqIEBwYXJhbSByZXBvc2l0b3J5IEVpdGhlciBhIEdpdFJlcG9zaXRvcnkgb3IgSGdSZXBvc2l0b3J5Q2xpZW50LlxuICogQHBhcmFtIGZpbGVQYXRoIFRoZSBhYnNvbHV0ZSBmaWxlIHBhdGggb2YgaW50ZXJlc3QuXG4gKiBAcmV0dXJuIGJvb2xlYW4gV2hldGhlciB0aGUgZmlsZSBwYXRoIGV4aXN0cyB3aXRoaW4gdGhlIHdvcmtpbmcgZGlyZWN0b3J5XG4gKiAgIChha2Egcm9vdCBkaXJlY3RvcnkpIG9mIHRoZSByZXBvc2l0b3J5LCBvciBpcyB0aGUgd29ya2luZyBkaXJlY3RvcnkuXG4gKi9cbmZ1bmN0aW9uIHJlcG9zaXRvcnlDb250YWluc1BhdGgocmVwb3NpdG9yeTogUmVwb3NpdG9yeSwgZmlsZVBhdGg6IHN0cmluZyk6IGJvb2xlYW4ge1xuICB2YXIgd29ya2luZ0RpcmVjdG9yeVBhdGggPSByZXBvc2l0b3J5LmdldFdvcmtpbmdEaXJlY3RvcnkoKTtcbiAgaWYgKHBhdGhzQXJlRXF1YWwod29ya2luZ0RpcmVjdG9yeVBhdGgsIGZpbGVQYXRoKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHJlcG9zaXRvcnkuZ2V0VHlwZSgpID09PSAnZ2l0Jykge1xuICAgIHZhciByb290R2l0UHJvamVjdERpcmVjdG9yeSA9IG5ldyBEaXJlY3Rvcnkod29ya2luZ0RpcmVjdG9yeVBhdGgpO1xuICAgIHJldHVybiByb290R2l0UHJvamVjdERpcmVjdG9yeS5jb250YWlucyhmaWxlUGF0aCk7XG4gIH0gZWxzZSBpZiAocmVwb3NpdG9yeS5nZXRUeXBlKCkgPT09ICdoZycpIHtcbiAgICByZXR1cm4gcmVwb3NpdG9yeS5fd29ya2luZ0RpcmVjdG9yeS5jb250YWlucyhmaWxlUGF0aCk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCdyZXBvc2l0b3J5Q29udGFpbnNQYXRoOiBSZWNlaXZlZCBhbiB1bnJlY29nbml6ZWQgcmVwb3NpdG9yeSB0eXBlLiBFeHBlY3RlZCBnaXQgb3IgaGcuJyk7XG59XG5cbi8qKlxuICogQHBhcmFtIGZpbGVQYXRoMSBBbiBhYm9sdXRlIGZpbGUgcGF0aC5cbiAqIEBwYXJhbSBmaWxlUGF0aDIgQW4gYWJzb2x1dGUgZmlsZSBwYXRoLlxuICogQHJldHVybiBXaGV0aGVyIHRoZSBmaWxlIHBhdGhzIGFyZSBlcXVhbCwgYWNjb3VudGluZyBmb3IgdHJhaWxpbmcgc2xhc2hlcy5cbiAqL1xuZnVuY3Rpb24gcGF0aHNBcmVFcXVhbChmaWxlUGF0aDE6IHN0cmluZywgZmlsZVBhdGgyOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIHBhdGgubm9ybWFsaXplKGZpbGVQYXRoMSArIHBhdGguc2VwKSA9PT0gcGF0aC5ub3JtYWxpemUoZmlsZVBhdGgyICsgcGF0aC5zZXApO1xufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gcmVwb3NpdG9yeUNvbnRhaW5zUGF0aDtcbiJdfQ==
