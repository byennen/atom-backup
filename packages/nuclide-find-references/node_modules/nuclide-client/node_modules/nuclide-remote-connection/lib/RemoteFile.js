var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

'use babel';

var pathUtil = require('path');
var crypto = require('crypto');

var _require = require('atom');

var Disposable = _require.Disposable;
var Emitter = _require.Emitter;

var remoteUri = require('nuclide-remote-uri');
var logger = require('nuclide-logging').getLogger();

/* Mostly implements https://atom.io/docs/api/latest/File */

var RemoteFile = (function () {
  function RemoteFile(remote, remotePath) {
    _classCallCheck(this, RemoteFile);

    this._remote = remote;

    var _remoteUri$parse = remoteUri.parse(remotePath);

    var localPath = _remoteUri$parse.path;

    this._localPath = localPath;
    this._path = remotePath;
    this._emitter = new Emitter();
    this._subscriptionCount = 0;
    this._cachedContents = null;
    this._deleted = false;
  }

  _createClass(RemoteFile, [{
    key: 'onDidChange',
    value: function onDidChange(callback) {
      this._willAddSubscription();
      return this._trackUnsubscription(this._emitter.on('did-change', callback));
    }
  }, {
    key: 'onDidRename',
    value: function onDidRename(callback) {
      this._willAddSubscription();
      return this._trackUnsubscription(this._emitter.on('did-rename', callback));
    }
  }, {
    key: 'onDidDelete',
    value: function onDidDelete(callback) {
      this._willAddSubscription();
      return this._trackUnsubscription(this._emitter.on('did-delete', callback));
    }
  }, {
    key: '_willAddSubscription',
    value: function _willAddSubscription() {
      this._subscriptionCount++;
      return this._subscribeToNativeChangeEvents();
    }
  }, {
    key: '_subscribeToNativeChangeEvents',
    value: _asyncToGenerator(function* () {
      var _this = this;

      if (this._watchSubscription) {
        return;
      }
      if (this._pendingSubscription) {
        return;
      }
      this._pendingSubscription = true;
      try {
        this._watchSubscription = yield this._remote.getClient().watchFile(this._localPath);
      } catch (err) {
        logger.error('Failed to subscribe RemoteFile:', this._path, err);
      } finally {
        this._pendingSubscription = false;
      }
      if (this._watchSubscription) {
        this._watchSubscription.on('change', function () {
          return _this._handleNativeChangeEvent();
        });
        this._watchSubscription.on('rename', function () {
          return _this._handleNativeRenameEvent();
        });
        this._watchSubscription.on('delete', function () {
          return _this._handleNativeDeleteEvent();
        });
      }
    })
  }, {
    key: '_handleNativeChangeEvent',
    value: _asyncToGenerator(function* () {
      var oldContents = this._cachedContents;
      try {
        var newContents = yield this.read( /*flushCache*/true);
        if (oldContents !== newContents) {
          this._emitter.emit('did-change');
        }
      } catch (error) {
        // We can't read the file, so we cancel the watcher subscription.
        yield this._unsubscribeFromNativeChangeEvents();
        var handled = false;
        var handle = function handle() {
          handled = true;
        };
        error.eventType = 'change';
        this._emitter.emit('will-throw-watch-error', { error: error, handle: handle });
        if (!handled) {
          var newError = new Error('Cannot read file after file change event: ' + this._path);
          newError.originalError = error;
          newError.code = 'ENOENT';
          throw newError;
        }
      }
    })
  }, {
    key: '_handleNativeRenameEvent',
    value: _asyncToGenerator(function* (newPath) {
      yield this._unsubscribeFromNativeChangeEvents();
      this._cachedContents = null;

      var _remoteUri$parse2 = remoteUri.parse(this._path);

      var protocol = _remoteUri$parse2.protocol;
      var host = _remoteUri$parse2.host;

      this._localPath = newPath;
      this._path = protocol + '//' + host + this._localPath;
      yield this._subscribeToNativeChangeEvents();
      this._emitter.emit('did-rename');
    })
  }, {
    key: '_handleNativeDeleteEvent',
    value: _asyncToGenerator(function* () {
      yield this._unsubscribeFromNativeChangeEvents();
      this._cachedContents = null;
      if (!this._deleted) {
        this._deleted = true;
        this._emitter.emit('did-delete');
      }
    })

    /*
     * Return a new Disposable that upon dispose, will remove the bound watch subscription.
     * When the number of subscriptions reach 0, the file is unwatched.
     */
  }, {
    key: '_trackUnsubscription',
    value: function _trackUnsubscription(subscription) {
      var _this2 = this;

      return new Disposable(function () {
        subscription.dispose();
        _this2._didRemoveSubscription();
      });
    }
  }, {
    key: '_didRemoveSubscription',
    value: _asyncToGenerator(function* () {
      this._subscriptionCount--;
      if (this._subscriptionCount === 0) {
        yield this._unsubscribeFromNativeChangeEvents();
      }
    })
  }, {
    key: '_unsubscribeFromNativeChangeEvents',
    value: _asyncToGenerator(function* () {
      if (this._watchSubscription) {
        yield this._remote.getClient().unwatchFile(this._localPath);
        this._watchSubscription = null;
      }
    })
  }, {
    key: 'onWillThrowWatchError',
    value: function onWillThrowWatchError(callback) {
      return this._emitter.on('will-throw-watch-error', callback);
    }
  }, {
    key: 'isFile',
    value: function isFile() {
      return true;
    }
  }, {
    key: 'isDirectory',
    value: function isDirectory() {
      return false;
    }
  }, {
    key: 'exists',
    value: function exists() {
      return this._remote.getClient().exists(this._localPath);
    }
  }, {
    key: 'existsSync',
    value: function existsSync() {
      return true;
    }
  }, {
    key: 'getDigestSync',
    value: function getDigestSync() {
      if (this._digest) {
        return this._digest;
      } else {
        throw new Error('getDigestSync is not supported in RemoteFile');
      }
    }
  }, {
    key: 'getDigest',
    value: _asyncToGenerator(function* () {
      if (this._digest) {
        return this._digest;
      }
      yield this.read();
      return this._digest;
    })
  }, {
    key: '_setDigest',
    value: function _setDigest(contents) {
      this._digest = crypto.createHash('sha1').update(contents || '').digest('hex');
    }
  }, {
    key: 'setEncoding',
    value: function setEncoding(encoding) {
      this._encoding = encoding;
    }
  }, {
    key: 'getEncoding',
    value: function getEncoding() {
      return this._encoding;
    }
  }, {
    key: 'getPath',
    value: function getPath() {
      return this._path;
    }
  }, {
    key: 'getLocalPath',
    value: function getLocalPath() {
      return this._localPath;
    }
  }, {
    key: 'getRealPathSync',
    value: function getRealPathSync() {
      return this._realpath || this._path;
    }
  }, {
    key: 'getRealPath',
    value: _asyncToGenerator(function* () {
      var realpath = this._realpath;
      if (!realpath) {
        var realpath = yield this._remote.getClient().realpath(this._localPath);
        this._realpath = realpath;
      }
      return realpath;
    })
  }, {
    key: 'getBaseName',
    value: function getBaseName() {
      return pathUtil.basename(this._path);
    }
  }, {
    key: 'create',
    value: _asyncToGenerator(function* () {
      var wasCreated = yield this._remote.getClient().newFile(this._localPath);
      if (this._subscriptionCount > 0) {
        this._subscribeToNativeChangeEvents();
      }
      return wasCreated;
    })
  }, {
    key: 'delete',
    value: _asyncToGenerator(function* () {
      try {
        yield this._remote.getClient().unlink(this._localPath);
        this._handleNativeDeleteEvent();
      } catch (error) {
        if (error.code !== 'ENOENT') {
          throw error;
        }
      }
    })
  }, {
    key: 'rename',
    value: _asyncToGenerator(function* (newPath) {
      yield this._remote.getClient().rename(this._localPath, newPath);
      yield this._handleNativeRenameEvent(newPath);
    })
  }, {
    key: 'read',
    value: _asyncToGenerator(function* (flushCache) {
      // TODO: return cachedContents if exists and !flushCache
      // This involves the reload scenario, where the same instance of the file is read(),
      // but the file contents should reload.
      var data = yield this._remote.getClient().readFile(this._localPath);
      var contents = data.toString();
      this._setDigest(contents);
      this._cachedContents = contents;
      // TODO: respect encoding
      return contents;
    })
  }, {
    key: 'readSync',
    value: function readSync(flushcache) {
      throw new Error('readSync is not supported in RemoteFile');
    }
  }, {
    key: 'write',
    value: _asyncToGenerator(function* (text) {
      var previouslyExisted = yield this.exists();
      yield this._remote.getClient().writeFile(this._localPath, text);
      this._cachedContents = text;
      if (!previouslyExisted && this._subscriptionCount > 0) {
        yield this._subscribeToNativeChangeEvents();
      }
    })
  }, {
    key: 'getParent',
    value: function getParent() {
      var _remoteUri$parse3 = remoteUri.parse(this._path);

      var localPath = _remoteUri$parse3.path;
      var protocol = _remoteUri$parse3.protocol;
      var host = _remoteUri$parse3.host;

      var directoryPath = protocol + '//' + host + pathUtil.dirname(localPath);
      return this._remote.createDirectory(directoryPath);
    }
  }]);

  return RemoteFile;
})();

module.exports = RemoteFile;
//# sourceMappingURL=data:application/json;base64,
