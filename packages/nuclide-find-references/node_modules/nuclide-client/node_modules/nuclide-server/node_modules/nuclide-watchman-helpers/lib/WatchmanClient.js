
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var watchman = require('fb-watchman');
var WatchmanSubscription = require('./WatchmanSubscription');

var ensureTrailingSeparator = require('nuclide-commons').paths.ensureTrailingSeparator;

var logger = require('nuclide-logging').getLogger();

var _require = require('./main');

var getWatchmanBinaryPath = _require.getWatchmanBinaryPath;

var WatchmanClient = (function () {
  function WatchmanClient() {
    _classCallCheck(this, WatchmanClient);

    this._initWatchmanClient();
    this._subscriptions = {};
    this._watchmanVersionPromise = this.version();
  }

  _createClass(WatchmanClient, [{
    key: 'dispose',
    value: function dispose() {
      if (this._clientPromise) {
        this._clientPromise.then(function (client) {
          return client.end();
        });
      }
    }
  }, {
    key: '_initWatchmanClient',
    value: function _initWatchmanClient() {
      var _this = this;

      this._clientPromise = this._createClientPromise();
      this._clientPromise.then(function (client) {
        client.on('end', function () {
          return _this._onClientEnd();
        });
        client.on('error', function (error) {
          return logger.error('Error while talking to watchman: ', error);
        });
        client.on('subscription', function (response) {
          return _this._onSubscriptionResult(response);
        });
      });
    }
  }, {
    key: '_createClientPromise',
    value: _asyncToGenerator(function* () {
      return new watchman.Client({
        watchmanBinaryPath: yield getWatchmanBinaryPath()
      });
    })
  }, {
    key: '_onClientEnd',
    value: function _onClientEnd() {
      logger.warn('Watchman client ended, creating a new client!');
      this._clientPromise.then(function (client) {
        client.removeAllListeners('end');
        client.removeAllListeners('error');
        client.removeAllListeners('subscription');
      });
      this._initWatchmanClient();
      this._restoreSubscriptions();
    }
  }, {
    key: '_restoreSubscriptions',
    value: _asyncToGenerator(function* () {
      var _this2 = this;

      var watchPromises = [];
      for (var key in this._subscriptions) {
        watchPromises.push(this._subscriptions[key]);
      }
      yield Promise.all(watchPromises.map(_asyncToGenerator(function* (subscription) {
        subscription.options.since = yield _this2._clock(subscription.root);
        yield _this2._watchProject(subscription.path);
        yield _this2._subscribe(subscription.root, subscription.name, subscription.options);
      })));
    })
  }, {
    key: '_onSubscriptionResult',
    value: function _onSubscriptionResult(response) {
      var subscription = this._subscriptions[response.subscription];
      if (!subscription) {
        return logger.error('Subscription not found for response:!', response);
      }
      subscription.emit('change', response.files);
    }
  }, {
    key: 'watchDirectoryRecursive',
    value: _asyncToGenerator(function* (localDirectoryPath) {
      var directoryPath = ensureTrailingSeparator(localDirectoryPath);
      var existingSubscription = this._subscriptions[directoryPath];
      if (existingSubscription) {
        existingSubscription.subscriptionCount++;
        return existingSubscription;
      } else {
        var _ref = yield this._watchProject(directoryPath);

        var watchRoot = _ref.watch;
        var relativePath = _ref.relative_path;

        var clock = yield this._clock(watchRoot);
        var options = {
          fields: ['name', 'new', 'exists', 'mode'],
          since: clock
        };
        if (relativePath) {
          // Passing an 'undefined' expression causes an exception in fb-watchman.
          options.expression = ['dirname', relativePath];
        }
        // relativePath is undefined if watchRoot is the same as directoryPath.
        var subscription = this._subscriptions[directoryPath] = new WatchmanSubscription(
        /*subscriptionRoot*/watchRoot,
        /*pathFromSubscriptionRootToSubscriptionPath*/relativePath,
        /*subscriptionPath*/directoryPath,
        /*subscriptionCount*/1,
        /*subscriptionOptions*/options);
        yield this._subscribe(watchRoot, directoryPath, options);
        return subscription;
      }
    })
  }, {
    key: 'hasSubscription',
    value: function hasSubscription(entryPath) {
      return !!this._subscriptions[entryPath];
    }
  }, {
    key: 'unwatch',
    value: _asyncToGenerator(function* (entryPath) {
      if (!this._subscriptions[entryPath]) {
        return logger.error('No watcher entity found with path:', entryPath);
      }
      var subscription = this._subscriptions[entryPath];
      if (--subscription.subscriptionCount === 0) {

        yield this._unsubscribe(subscription.path, subscription.name);
        // Don't delete the watcher if there are other users for it.
        if (!subscription.pathFromSubscriptionRootToSubscriptionPath) {
          yield this._deleteWatcher(entryPath);
        }
        delete this._subscriptions[entryPath];
      }
    })
  }, {
    key: '_watchList',
    value: _asyncToGenerator(function* () {
      var _ref2 = yield this._command('watch-list');

      var roots = _ref2.roots;

      return roots;
    })
  }, {
    key: '_deleteWatcher',
    value: function _deleteWatcher(entryPath) {
      return this._command('watch-del', entryPath);
    }
  }, {
    key: '_unsubscribe',
    value: function _unsubscribe(subscriptionPath, subscriptionName) {
      return this._command('unsubscribe', subscriptionPath, subscriptionName);
    }
  }, {
    key: '_watch',
    value: _asyncToGenerator(function* (directoryPath) {
      var response = yield this._command('watch', directoryPath);
      if (response.warning) {
        logger.log('watchman warning: ', response.warning);
      }
    })
  }, {
    key: '_watchProject',
    value: _asyncToGenerator(function* (directoryPath) {
      var watchmanVersion = yield this._watchmanVersionPromise;
      if (!watchmanVersion || watchmanVersion < '3.1.0') {
        throw new Error('Watchman version: ' + watchmanVersion + ' does not support watch-project');
      }
      var response = yield this._command('watch-project', directoryPath);
      if (response.warning) {
        logger.log('watchman warning: ', response.warning);
      }
      return response;
    })
  }, {
    key: '_clock',
    value: _asyncToGenerator(function* (directoryPath) {
      var _ref3 = yield this._command('clock', directoryPath);

      var clock = _ref3.clock;

      return clock;
    })
  }, {
    key: 'version',
    value: _asyncToGenerator(function* () {
      var _ref4 = yield this._command('version');

      var version = _ref4.version;

      return version;
    })
  }, {
    key: '_subscribe',
    value: function _subscribe(watchRoot, subscriptionName) {
      var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

      return this._command('subscribe', watchRoot, subscriptionName, options);
    }

    /*
     * Promisify calls to watchman client.
     */
  }, {
    key: '_command',
    value: function _command() {
      var _this3 = this;

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return new Promise(function (resolve, reject) {
        _this3._clientPromise.then(function (client) {
          client.command(args, function (error, response) {
            return error ? reject(error) : resolve(response);
          });
        })['catch'](reject);
      });
    }
  }]);

  return WatchmanClient;
})();

module.exports = WatchmanClient;
//# sourceMappingURL=data:application/json;base64,
