var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

'use babel';

var _require = require('nuclide-commons');

var getConfigValueAsync = _require.getConfigValueAsync;
var findNearestFile = _require.findNearestFile;
var asyncFind = _require.asyncFind;

var MerlinService = require('./MerlinService');
var MerlinProcess = require('./MerlinProcess');

function getPathToMerlin() {
  if (global.atom) {
    return getConfigValueAsync('nuclide-ocaml.pathToMerlin')();
  } else {
    return Promise.resolve('ocamlmerlin');
  }
}

var LocalMerlinService = (function (_MerlinService) {
  _inherits(LocalMerlinService, _MerlinService);

  function LocalMerlinService() {
    _classCallCheck(this, LocalMerlinService);

    _get(Object.getPrototypeOf(LocalMerlinService.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(LocalMerlinService, [{
    key: '_getInstance',
    value: _asyncToGenerator(function* (file) {
      if (this._merlinProcessInstance && this._merlinProcessInstance.isRunning()) {
        return this._merlinProcessInstance;
      }

      var logger = require('nuclide-logging').getLogger();
      logger.debug('Spawning new ocamlmerlin process');

      var merlinPath = yield getPathToMerlin();

      var dotMerlinPath = yield findNearestFile('.merlin', file);

      var options = {
        cwd: dotMerlinPath ? require('path').dirname(dotMerlinPath) : '.'
      };
      var process = require('child_process').spawn(merlinPath, [], options);
      this._merlinProcessInstance = new MerlinProcess(process);

      if (dotMerlinPath) {
        // TODO(pieter) add support for multiple .dotmerlin files
        yield this._merlinProcessInstance.pushDotMerlinPath(dotMerlinPath);
        logger.debug('Added .merlin path: ' + dotMerlinPath);
      }

      return this._merlinProcessInstance;
    })
  }, {
    key: 'pushDotMerlinPath',
    value: _asyncToGenerator(function* (path) {
      return (yield this._getInstance(path)).pushDotMerlinPath(path);
    })
  }, {
    key: 'pushNewBuffer',
    value: _asyncToGenerator(function* (name, content) {
      return (yield this._getInstance(name)).pushNewBuffer(name, content);
    })
  }, {
    key: 'locate',
    value: _asyncToGenerator(function* (path, line, col, kind) {
      return (yield this._getInstance(path)).locate(path, line, col, kind);
    })
  }, {
    key: 'complete',
    value: _asyncToGenerator(function* (path, line, col, prefix) {
      return (yield this._getInstance(path)).complete(path, line, col, prefix);
    })
  }]);

  return LocalMerlinService;
})(MerlinService);

module.exports = LocalMerlinService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLW9jYW1sLWJhc2UvbGliL0xvY2FsTWVybGluU2VydmljZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxXQUFXLENBQUM7O2VBYTRDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQzs7SUFBN0UsbUJBQW1CLFlBQW5CLG1CQUFtQjtJQUFFLGVBQWUsWUFBZixlQUFlO0lBQUUsU0FBUyxZQUFULFNBQVM7O0FBQ3BELElBQUksYUFBYSxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQy9DLElBQUksYUFBYSxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDOztBQUUvQyxTQUFTLGVBQWUsR0FBb0I7QUFDMUMsTUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFO0FBQ2YsV0FBTyxtQkFBbUIsQ0FBQyw0QkFBNEIsQ0FBQyxFQUFFLENBQUM7R0FDNUQsTUFBTTtBQUNMLFdBQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztHQUN2QztDQUNGOztJQUVLLGtCQUFrQjtZQUFsQixrQkFBa0I7O1dBQWxCLGtCQUFrQjswQkFBbEIsa0JBQWtCOzsrQkFBbEIsa0JBQWtCOzs7ZUFBbEIsa0JBQWtCOzs2QkFHSixXQUFDLElBQWdCLEVBQTBCO0FBQzNELFVBQUksSUFBSSxDQUFDLHNCQUFzQixJQUFJLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxTQUFTLEVBQUUsRUFBRTtBQUMxRSxlQUFPLElBQUksQ0FBQyxzQkFBc0IsQ0FBQztPQUNwQzs7QUFFRCxVQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUNwRCxZQUFNLENBQUMsS0FBSyxDQUFDLGtDQUFrQyxDQUFDLENBQUM7O0FBRWpELFVBQUksVUFBVSxHQUFHLE1BQU0sZUFBZSxFQUFFLENBQUM7O0FBRXpDLFVBQUksYUFBYSxHQUFHLE1BQU0sZUFBZSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQzs7QUFFM0QsVUFBSSxPQUFPLEdBQUc7QUFDWixXQUFHLEVBQUcsYUFBYSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLEdBQUcsR0FBRyxBQUFDO09BQ3BFLENBQUM7QUFDRixVQUFJLE9BQU8sR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDdEUsVUFBSSxDQUFDLHNCQUFzQixHQUFHLElBQUksYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDOztBQUV6RCxVQUFJLGFBQWEsRUFBRTs7QUFFakIsY0FBTSxJQUFJLENBQUMsc0JBQXNCLENBQUMsaUJBQWlCLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDbkUsY0FBTSxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsR0FBRyxhQUFhLENBQUMsQ0FBQztPQUN0RDs7QUFFRCxhQUFPLElBQUksQ0FBQyxzQkFBc0IsQ0FBQztLQUNwQzs7OzZCQUVzQixXQUFDLElBQWdCLEVBQWtCO0FBQ3hELGFBQU8sQ0FBQyxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUEsQ0FBRSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUNoRTs7OzZCQUNrQixXQUFDLElBQWdCLEVBQUUsT0FBZSxFQUFrQjtBQUNyRSxhQUFPLENBQUMsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFBLENBQUUsYUFBYSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztLQUNyRTs7OzZCQUNXLFdBQUMsSUFBZ0IsRUFBRSxJQUFZLEVBQUUsR0FBVyxFQUFFLElBQVksRUFBK0I7QUFDbkcsYUFBTyxDQUFDLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQSxDQUFFLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztLQUN0RTs7OzZCQUNhLFdBQUMsSUFBZ0IsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBa0I7QUFDbEUsYUFBTyxDQUFDLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQSxDQUFFLFFBQVEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztLQUMxRTs7O1NBekNHLGtCQUFrQjtHQUFTLGFBQWE7O0FBNEM5QyxNQUFNLENBQUMsT0FBTyxHQUFHLGtCQUFrQixDQUFDIiwiZmlsZSI6Ii92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLW9jYW1sLWJhc2UvbGliL0xvY2FsTWVybGluU2VydmljZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmltcG9ydCB0eXBlIHtOdWNsaWRlVXJpfSBmcm9tICdudWNsaWRlLXJlbW90ZS11cmknO1xuXG52YXIge2dldENvbmZpZ1ZhbHVlQXN5bmMsIGZpbmROZWFyZXN0RmlsZSwgYXN5bmNGaW5kfSA9IHJlcXVpcmUoJ251Y2xpZGUtY29tbW9ucycpO1xudmFyIE1lcmxpblNlcnZpY2UgPSByZXF1aXJlKCcuL01lcmxpblNlcnZpY2UnKTtcbnZhciBNZXJsaW5Qcm9jZXNzID0gcmVxdWlyZSgnLi9NZXJsaW5Qcm9jZXNzJyk7XG5cbmZ1bmN0aW9uIGdldFBhdGhUb01lcmxpbigpOiBQcm9taXNlPHN0cmluZz4ge1xuICBpZiAoZ2xvYmFsLmF0b20pIHtcbiAgICByZXR1cm4gZ2V0Q29uZmlnVmFsdWVBc3luYygnbnVjbGlkZS1vY2FtbC5wYXRoVG9NZXJsaW4nKSgpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoJ29jYW1sbWVybGluJyk7XG4gIH1cbn1cblxuY2xhc3MgTG9jYWxNZXJsaW5TZXJ2aWNlIGV4dGVuZHMgTWVybGluU2VydmljZSB7XG4gIF9tZXJsaW5Qcm9jZXNzSW5zdGFuY2U6ID9NZXJsaW5Qcm9jZXNzO1xuXG4gIGFzeW5jIF9nZXRJbnN0YW5jZShmaWxlOiBOdWNsaWRlVXJpKTogUHJvbWlzZTxNZXJsaW5Qcm9jZXNzPiB7XG4gICAgaWYgKHRoaXMuX21lcmxpblByb2Nlc3NJbnN0YW5jZSAmJiB0aGlzLl9tZXJsaW5Qcm9jZXNzSW5zdGFuY2UuaXNSdW5uaW5nKCkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tZXJsaW5Qcm9jZXNzSW5zdGFuY2U7XG4gICAgfVxuXG4gICAgdmFyIGxvZ2dlciA9IHJlcXVpcmUoJ251Y2xpZGUtbG9nZ2luZycpLmdldExvZ2dlcigpO1xuICAgIGxvZ2dlci5kZWJ1ZygnU3Bhd25pbmcgbmV3IG9jYW1sbWVybGluIHByb2Nlc3MnKTtcblxuICAgIHZhciBtZXJsaW5QYXRoID0gYXdhaXQgZ2V0UGF0aFRvTWVybGluKCk7XG5cbiAgICB2YXIgZG90TWVybGluUGF0aCA9IGF3YWl0IGZpbmROZWFyZXN0RmlsZSgnLm1lcmxpbicsIGZpbGUpO1xuXG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICBjd2Q6IChkb3RNZXJsaW5QYXRoID8gcmVxdWlyZSgncGF0aCcpLmRpcm5hbWUoZG90TWVybGluUGF0aCkgOiAnLicpLFxuICAgIH07XG4gICAgdmFyIHByb2Nlc3MgPSByZXF1aXJlKCdjaGlsZF9wcm9jZXNzJykuc3Bhd24obWVybGluUGF0aCwgW10sIG9wdGlvbnMpO1xuICAgIHRoaXMuX21lcmxpblByb2Nlc3NJbnN0YW5jZSA9IG5ldyBNZXJsaW5Qcm9jZXNzKHByb2Nlc3MpO1xuXG4gICAgaWYgKGRvdE1lcmxpblBhdGgpIHtcbiAgICAgIC8vIFRPRE8ocGlldGVyKSBhZGQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgLmRvdG1lcmxpbiBmaWxlc1xuICAgICAgYXdhaXQgdGhpcy5fbWVybGluUHJvY2Vzc0luc3RhbmNlLnB1c2hEb3RNZXJsaW5QYXRoKGRvdE1lcmxpblBhdGgpO1xuICAgICAgbG9nZ2VyLmRlYnVnKCdBZGRlZCAubWVybGluIHBhdGg6ICcgKyBkb3RNZXJsaW5QYXRoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fbWVybGluUHJvY2Vzc0luc3RhbmNlO1xuICB9XG5cbiAgYXN5bmMgcHVzaERvdE1lcmxpblBhdGgocGF0aDogTnVjbGlkZVVyaSk6IFByb21pc2U8bWl4ZWQ+IHtcbiAgICByZXR1cm4gKGF3YWl0IHRoaXMuX2dldEluc3RhbmNlKHBhdGgpKS5wdXNoRG90TWVybGluUGF0aChwYXRoKTtcbiAgfVxuICBhc3luYyBwdXNoTmV3QnVmZmVyKG5hbWU6IE51Y2xpZGVVcmksIGNvbnRlbnQ6IHN0cmluZyk6IFByb21pc2U8bWl4ZWQ+IHtcbiAgICByZXR1cm4gKGF3YWl0IHRoaXMuX2dldEluc3RhbmNlKG5hbWUpKS5wdXNoTmV3QnVmZmVyKG5hbWUsIGNvbnRlbnQpO1xuICB9XG4gIGFzeW5jIGxvY2F0ZShwYXRoOiBOdWNsaWRlVXJpLCBsaW5lOiBudW1iZXIsIGNvbDogbnVtYmVyLCBraW5kOiBzdHJpbmcpOiBQcm9taXNlPHtmaWxlOiBOdWNsaWRlVXJpfT4ge1xuICAgIHJldHVybiAoYXdhaXQgdGhpcy5fZ2V0SW5zdGFuY2UocGF0aCkpLmxvY2F0ZShwYXRoLCBsaW5lLCBjb2wsIGtpbmQpO1xuICB9XG4gIGFzeW5jIGNvbXBsZXRlKHBhdGg6IE51Y2xpZGVVcmksIGxpbmUsIGNvbCwgcHJlZml4KTogUHJvbWlzZTxtaXhlZD4ge1xuICAgIHJldHVybiAoYXdhaXQgdGhpcy5fZ2V0SW5zdGFuY2UocGF0aCkpLmNvbXBsZXRlKHBhdGgsIGxpbmUsIGNvbCwgcHJlZml4KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IExvY2FsTWVybGluU2VydmljZTtcbiJdfQ==
