var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

'use babel';

var logger = require('nuclide-logging').getLogger();

var ArcanistBaseService = require('./ArcanistBaseService');

var ARC_CONFIG_FILE_NAME = '.arcconfig';

var LocalArcanistBaseService = (function (_ArcanistBaseService) {
  _inherits(LocalArcanistBaseService, _ArcanistBaseService);

  function LocalArcanistBaseService() {
    _classCallCheck(this, LocalArcanistBaseService);

    _get(Object.getPrototypeOf(LocalArcanistBaseService.prototype), 'constructor', this).call(this);
    this._arcConfigDirectoryMap = new Map();
    this._arcProjectMap = new Map();
  }

  _createClass(LocalArcanistBaseService, [{
    key: 'findArcConfigDirectory',
    value: _asyncToGenerator(function* (fileName) {
      if (!this._arcConfigDirectoryMap.has(fileName)) {
        var findNearestFile = require('nuclide-commons').findNearestFile;
        var result = yield findNearestFile(ARC_CONFIG_FILE_NAME, fileName);
        this._arcConfigDirectoryMap.set(fileName, result);
      }
      return this._arcConfigDirectoryMap.get(fileName);
    })
  }, {
    key: 'readArcConfig',
    value: _asyncToGenerator(function* (fileName) {
      var arcConfigDirectory = yield this.findArcConfigDirectory(fileName);
      if (!arcConfigDirectory) {
        return null;
      }
      if (!this._arcProjectMap.has(arcConfigDirectory)) {
        var path = require('path');
        var arcconfigFile = path.join(arcConfigDirectory, ARC_CONFIG_FILE_NAME);
        var result = JSON.parse((yield require('nuclide-commons').readFile(arcconfigFile)));
        this._arcProjectMap.set(arcConfigDirectory, result);
      }
      return this._arcProjectMap.get(arcConfigDirectory);
    })
  }, {
    key: 'findArcProjectIdOfPath',
    value: _asyncToGenerator(function* (fileName) {
      var project = yield this.readArcConfig(fileName);
      return project ? project['project_id'] : null;
    })
  }, {
    key: 'getProjectRelativePath',
    value: _asyncToGenerator(function* (fileName) {
      var arcPath = yield this.findArcConfigDirectory(fileName);
      var path = require('path');
      return arcPath && fileName ? path.relative(arcPath, fileName) : null;
    })
  }, {
    key: 'findDiagnostics',
    value: _asyncToGenerator(function* (pathToFile) {
      var cwd = yield this.findArcConfigDirectory(pathToFile);
      if (cwd === null) {
        return [];
      }

      var args = ['lint', '--output', 'json', pathToFile];
      var options = { 'cwd': cwd };

      var _require = require('nuclide-commons');

      var asyncExecute = _require.asyncExecute;

      var result = yield asyncExecute('arc', args, options);

      var json;
      try {
        json = JSON.parse(result.stdout);
      } catch (error) {
        logger.error('Error parsing `arc lint` JSON output', result.stdout);
        return [];
      }

      // json is an object where the keys are file paths that are relative to the
      // location of the .arcconfig file. There will be an entry in the map for
      // the file even if there were no lint errors.
      var key = require('path').relative(cwd, pathToFile);
      var lints = json[key];

      // TODO(7876450): For some reason, this does not work for particular values
      // of pathToFile.
      //
      // For now, we defend against this by returning the empty array.
      if (!lints) {
        return [];
      }

      return lints.map(function (lint) {
        // Choose an appropriate level based on lint['severity'].
        var severity = lint['severity'];
        var level = severity === 'error' ? 'Error' : 'Warning';

        var line = lint['line'];
        // Sometimes the linter puts in global errors on line 0, which will result
        // in a negative index. We offset those back to the first line.
        var col = Math.max(0, lint['char'] - 1);
        var row = Math.max(0, line - 1);

        return {
          type: level,
          text: lint['description'],
          filePath: pathToFile,
          row: row,
          col: col
        };
      });
    })
  }]);

  return LocalArcanistBaseService;
})(ArcanistBaseService);

module.exports = LocalArcanistBaseService;
//# sourceMappingURL=data:application/json;base64,
