
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var newFileSearch = _asyncToGenerator(function* (directoryUri) {
  var _require = require('nuclide-task');

  var createTask = _require.createTask;

  var task = createTask();
  yield task.invokeRemoteMethod({
    file: require.resolve('./FileSearch'),
    method: 'initFileSearchForDirectory',
    args: [directoryUri]
  });
  return new MainProcessFileSearch(task, directoryUri);
}

/**
 * Currently, all the caller cares about is that the Promise resolves to an
 * object with a query() method.
 *
 * TODO(mbolin): Caller should also invoke dispose(), as appropriate.
 */
);

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var fileSearchForDirectoryUri = {};

/**
 * This is an object that lives in the main process that delegates calls to the
 * FileSearch in the forked process.
 */

var MainProcessFileSearch = (function () {
  function MainProcessFileSearch(task, directoryUri) {
    _classCallCheck(this, MainProcessFileSearch);

    this._task = task;
    this._directoryUri = directoryUri;
  }

  _createClass(MainProcessFileSearch, [{
    key: 'query',
    value: (function (_query) {
      function query(_x) {
        return _query.apply(this, arguments);
      }

      query.toString = function () {
        return _query.toString();
      };

      return query;
    })(function (query) {
      return this._task.invokeRemoteMethod({
        file: require.resolve('./FileSearch'),
        method: 'doSearch',
        args: [this._directoryUri, query]
      });
    })
  }, {
    key: 'dispose',
    value: function dispose() {
      if (fileSearchForDirectoryUri[this._directoryUri] === this) {
        delete fileSearchForDirectoryUri[this._directoryUri];
      }
      this._task.dispose();
    }
  }]);

  return MainProcessFileSearch;
})();

function fileSearchForDirectory(directoryUri) {
  if (directoryUri in fileSearchForDirectoryUri) {
    return fileSearchForDirectoryUri[directoryUri];
  }

  var promise = newFileSearch(directoryUri);
  fileSearchForDirectoryUri[directoryUri] = promise;
  return promise;
}

module.exports = {
  fileSearchForDirectory: fileSearchForDirectory
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXBhdGgtc2VhcmNoL2xpYi9tYWluLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFdBQVcsQ0FBQzs7Ozs7Ozs7Ozs7O0lBNENHLGFBQWEscUJBQTVCLFdBQTZCLFlBQW9CLEVBQWtDO2lCQUM5RCxPQUFPLENBQUMsY0FBYyxDQUFDOztNQUFyQyxVQUFVLFlBQVYsVUFBVTs7QUFDZixNQUFJLElBQUksR0FBRyxVQUFVLEVBQUUsQ0FBQztBQUN4QixRQUFNLElBQUksQ0FBQyxrQkFBa0IsQ0FBQztBQUM1QixRQUFJLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUM7QUFDckMsVUFBTSxFQUFFLDRCQUE0QjtBQUNwQyxRQUFJLEVBQUUsQ0FBQyxZQUFZLENBQUM7R0FDckIsQ0FBQyxDQUFDO0FBQ0gsU0FBTyxJQUFJLHFCQUFxQixDQUFDLElBQUksRUFBRSxZQUFZLENBQUMsQ0FBQztDQUN0RDs7Ozs7Ozs7Ozs7Ozs7QUFyQ0QsSUFBSSx5QkFBZ0YsR0FBRyxFQUFFLENBQUM7Ozs7Ozs7SUFNcEYscUJBQXFCO0FBQ2QsV0FEUCxxQkFBcUIsQ0FDYixJQUFVLEVBQUUsWUFBMEIsRUFBRTswQkFEaEQscUJBQXFCOztBQUV2QixRQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztBQUNsQixRQUFJLENBQUMsYUFBYSxHQUFHLFlBQVksQ0FBQztHQUNuQzs7ZUFKRyxxQkFBcUI7Ozs7Ozs7Ozs7OztPQU1wQixVQUFDLEtBQWEsRUFBb0M7QUFDckQsYUFBTyxJQUFJLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUFDO0FBQ25DLFlBQUksRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQztBQUNyQyxjQUFNLEVBQUUsVUFBVTtBQUNsQixZQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQztPQUNsQyxDQUFDLENBQUM7S0FDSjs7O1dBRU0sbUJBQUc7QUFDUixVQUFJLHlCQUF5QixDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxJQUFJLEVBQUU7QUFDMUQsZUFBTyx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7T0FDdEQ7QUFDRCxVQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO0tBQ3RCOzs7U0FuQkcscUJBQXFCOzs7QUF1QzNCLFNBQVMsc0JBQXNCLENBQUMsWUFBb0IsRUFBdUI7QUFDekUsTUFBSSxZQUFZLElBQUkseUJBQXlCLEVBQUU7QUFDN0MsV0FBTyx5QkFBeUIsQ0FBQyxZQUFZLENBQUMsQ0FBQztHQUNoRDs7QUFFRCxNQUFJLE9BQU8sR0FBRyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDMUMsMkJBQXlCLENBQUMsWUFBWSxDQUFDLEdBQUcsT0FBTyxDQUFDO0FBQ2xELFNBQU8sT0FBTyxDQUFDO0NBQ2hCOztBQUVELE1BQU0sQ0FBQyxPQUFPLEdBQUc7QUFDZix3QkFBc0IsRUFBdEIsc0JBQXNCO0NBQ3ZCLENBQUMiLCJmaWxlIjoiL3Zhci9mb2xkZXJzL3hmL3JzcGg0X2M1NzMxNXJzNTd4eHNkc2tyeG52MzZ0MC9UL3RtcGVtbTJIdXB1Ymxpc2hfcGFja2FnZXMvbnBtL251Y2xpZGUtcGF0aC1zZWFyY2gvbGliL21haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG50eXBlIERpcmVjdG9yeVVyaSA9IHN0cmluZztcbnR5cGUgRmlsZVNlYXJjaCA9IHtcbiAgcXVlcnk6IChxdWVyeTogc3RyaW5nKSA9PiBQcm9taXNlPEFycmF5PEZpbGVTZWFyY2hSZXN1bHQ+PjtcbiAgZGlzcG9zZTogKCkgPT4gdm9pZDtcbn07XG52YXIgZmlsZVNlYXJjaEZvckRpcmVjdG9yeVVyaToge1trZXk6IERpcmVjdG9yeVVyaV06IFByb21pc2U8TWFpblByb2Nlc3NGaWxlU2VhcmNoPn0gPSB7fTtcblxuLyoqXG4gKiBUaGlzIGlzIGFuIG9iamVjdCB0aGF0IGxpdmVzIGluIHRoZSBtYWluIHByb2Nlc3MgdGhhdCBkZWxlZ2F0ZXMgY2FsbHMgdG8gdGhlXG4gKiBGaWxlU2VhcmNoIGluIHRoZSBmb3JrZWQgcHJvY2Vzcy5cbiAqL1xuY2xhc3MgTWFpblByb2Nlc3NGaWxlU2VhcmNoIHtcbiAgY29uc3RydWN0b3IodGFzazogVGFzaywgZGlyZWN0b3J5VXJpOiBEaXJlY3RvcnlVcmkpIHtcbiAgICB0aGlzLl90YXNrID0gdGFzaztcbiAgICB0aGlzLl9kaXJlY3RvcnlVcmkgPSBkaXJlY3RvcnlVcmk7XG4gIH1cblxuICBxdWVyeShxdWVyeTogc3RyaW5nKTogUHJvbWlzZTxBcnJheTxGaWxlU2VhcmNoUmVzdWx0Pj4ge1xuICAgIHJldHVybiB0aGlzLl90YXNrLmludm9rZVJlbW90ZU1ldGhvZCh7XG4gICAgICBmaWxlOiByZXF1aXJlLnJlc29sdmUoJy4vRmlsZVNlYXJjaCcpLFxuICAgICAgbWV0aG9kOiAnZG9TZWFyY2gnLFxuICAgICAgYXJnczogW3RoaXMuX2RpcmVjdG9yeVVyaSwgcXVlcnldLFxuICAgIH0pO1xuICB9XG5cbiAgZGlzcG9zZSgpIHtcbiAgICBpZiAoZmlsZVNlYXJjaEZvckRpcmVjdG9yeVVyaVt0aGlzLl9kaXJlY3RvcnlVcmldID09PSB0aGlzKSB7XG4gICAgICBkZWxldGUgZmlsZVNlYXJjaEZvckRpcmVjdG9yeVVyaVt0aGlzLl9kaXJlY3RvcnlVcmldO1xuICAgIH1cbiAgICB0aGlzLl90YXNrLmRpc3Bvc2UoKTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBuZXdGaWxlU2VhcmNoKGRpcmVjdG9yeVVyaTogc3RyaW5nKTogUHJvbWlzZTxNYWluUHJvY2Vzc0ZpbGVTZWFyY2g+IHtcbiAgdmFyIHtjcmVhdGVUYXNrfSA9IHJlcXVpcmUoJ251Y2xpZGUtdGFzaycpO1xuICB2YXIgdGFzayA9IGNyZWF0ZVRhc2soKTtcbiAgYXdhaXQgdGFzay5pbnZva2VSZW1vdGVNZXRob2Qoe1xuICAgIGZpbGU6IHJlcXVpcmUucmVzb2x2ZSgnLi9GaWxlU2VhcmNoJyksXG4gICAgbWV0aG9kOiAnaW5pdEZpbGVTZWFyY2hGb3JEaXJlY3RvcnknLFxuICAgIGFyZ3M6IFtkaXJlY3RvcnlVcmldLFxuICB9KTtcbiAgcmV0dXJuIG5ldyBNYWluUHJvY2Vzc0ZpbGVTZWFyY2godGFzaywgZGlyZWN0b3J5VXJpKTtcbn1cblxuLyoqXG4gKiBDdXJyZW50bHksIGFsbCB0aGUgY2FsbGVyIGNhcmVzIGFib3V0IGlzIHRoYXQgdGhlIFByb21pc2UgcmVzb2x2ZXMgdG8gYW5cbiAqIG9iamVjdCB3aXRoIGEgcXVlcnkoKSBtZXRob2QuXG4gKlxuICogVE9ETyhtYm9saW4pOiBDYWxsZXIgc2hvdWxkIGFsc28gaW52b2tlIGRpc3Bvc2UoKSwgYXMgYXBwcm9wcmlhdGUuXG4gKi9cbmZ1bmN0aW9uIGZpbGVTZWFyY2hGb3JEaXJlY3RvcnkoZGlyZWN0b3J5VXJpOiBzdHJpbmcpOiBQcm9taXNlPEZpbGVTZWFyY2g+IHtcbiAgaWYgKGRpcmVjdG9yeVVyaSBpbiBmaWxlU2VhcmNoRm9yRGlyZWN0b3J5VXJpKSB7XG4gICAgcmV0dXJuIGZpbGVTZWFyY2hGb3JEaXJlY3RvcnlVcmlbZGlyZWN0b3J5VXJpXTtcbiAgfVxuXG4gIHZhciBwcm9taXNlID0gbmV3RmlsZVNlYXJjaChkaXJlY3RvcnlVcmkpO1xuICBmaWxlU2VhcmNoRm9yRGlyZWN0b3J5VXJpW2RpcmVjdG9yeVVyaV0gPSBwcm9taXNlO1xuICByZXR1cm4gcHJvbWlzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGZpbGVTZWFyY2hGb3JEaXJlY3RvcnksXG59O1xuIl19
