
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _require = require('./service-manager');

var getService = _require.getService;
var getServiceByNuclideUri = _require.getServiceByNuclideUri;

var localClients = {};

var _require2 = require('nuclide-remote-connection');

var RemoteConnection = _require2.RemoteConnection;

var localEventBus = null;
var defaultLocalClient = null;

var _require3 = require('./utils');

var containsPathSync = _require3.containsPathSync;

var _require4 = require('nuclide-remote-uri');

var isRemote = _require4.isRemote;

module.exports = {
  /**
   * @return null if the specified path is a remote NuclideUri and the corresponding
   *     RemoteConnection has not been created yet. This is likely to happen if getClient() is
   *     called early in the startup process and we are trying to restore a remote project root.
   */
  getClient: function getClient(path) {
    if (isRemote(path)) {
      var connection = RemoteConnection.getForUri(path);
      return connection ? connection.getClient() : null;
    } else {
      if (!localEventBus) {
        var NuclideLocalEventbus = require('nuclide-server/lib/NuclideLocalEventbus');
        localEventBus = new NuclideLocalEventbus();
      }
      if (!defaultLocalClient) {
        var NuclideClient = require('nuclide-server/lib/NuclideClient');
        defaultLocalClient = new NuclideClient('local', localEventBus);
      }
      // Return a default local client with no working directory if Atom was started to edit a single file
      // with a command like: $ atom file.php
      var localClient = defaultLocalClient;
      atom.project.getPaths().forEach(function (rootPath) {
        if (!containsPathSync(rootPath, path)) {
          return;
        }
        // Create a local client with its root as the working directory, if none already exists.
        if (!localClients[rootPath]) {
          var NuclideClient = require('nuclide-server/lib/NuclideClient');
          localClients[rootPath] = new NuclideClient(
          /*id: string*/'local/' + rootPath,
          /*eventbus: NuclideLocalEventBus*/localEventBus,
          /*options: NuclideClientOptions*/{ cwd: rootPath });
        }
        localClient = localClients[rootPath];
      });
      return localClient;
    }
  },
  getService: getService,
  getServiceByNuclideUri: getServiceByNuclideUri
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWNsaWVudC9saWIvbWFpbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLENBQUM7Ozs7Ozs7Ozs7ZUFXK0IsT0FBTyxDQUFDLG1CQUFtQixDQUFDOztJQUFsRSxVQUFVLFlBQVYsVUFBVTtJQUFFLHNCQUFzQixZQUF0QixzQkFBc0I7O0FBQ3ZDLElBQUksWUFBaUQsR0FBRyxFQUFFLENBQUM7O2dCQUNsQyxPQUFPLENBQUMsMkJBQTJCLENBQUM7O0lBQXhELGdCQUFnQixhQUFoQixnQkFBZ0I7O0FBQ3JCLElBQUksYUFBb0MsR0FBRyxJQUFJLENBQUM7QUFDaEQsSUFBSSxrQkFBa0MsR0FBRyxJQUFJLENBQUM7O2dCQUNyQixPQUFPLENBQUMsU0FBUyxDQUFDOztJQUF0QyxnQkFBZ0IsYUFBaEIsZ0JBQWdCOztnQkFDSixPQUFPLENBQUMsb0JBQW9CLENBQUM7O0lBQXpDLFFBQVEsYUFBUixRQUFROztBQUViLE1BQU0sQ0FBQyxPQUFPLEdBQUc7Ozs7OztBQU1mLFdBQVMsRUFBQSxtQkFBQyxJQUFZLEVBQWtCO0FBQ3RDLFFBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFO0FBQ2xCLFVBQUksVUFBVSxHQUFHLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNsRCxhQUFPLFVBQVUsR0FBRyxVQUFVLENBQUMsU0FBUyxFQUFFLEdBQUcsSUFBSSxDQUFDO0tBQ25ELE1BQU07QUFDTCxVQUFJLENBQUMsYUFBYSxFQUFFO0FBQ2xCLFlBQUksb0JBQW9CLEdBQUcsT0FBTyxDQUFDLHlDQUF5QyxDQUFDLENBQUM7QUFDOUUscUJBQWEsR0FBRyxJQUFJLG9CQUFvQixFQUFFLENBQUM7T0FDNUM7QUFDRCxVQUFJLENBQUMsa0JBQWtCLEVBQUU7QUFDdkIsWUFBSSxhQUFhLEdBQUcsT0FBTyxDQUFDLGtDQUFrQyxDQUFDLENBQUM7QUFDaEUsMEJBQWtCLEdBQUcsSUFBSSxhQUFhLENBQUMsT0FBTyxFQUFFLGFBQWEsQ0FBQyxDQUFDO09BQ2hFOzs7QUFHRCxVQUFJLFdBQVcsR0FBRyxrQkFBa0IsQ0FBQztBQUNyQyxVQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDLE9BQU8sQ0FBQyxVQUFBLFFBQVEsRUFBSTtBQUMxQyxZQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxFQUFFO0FBQ3JDLGlCQUFPO1NBQ1I7O0FBRUQsWUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsRUFBRTtBQUMzQixjQUFJLGFBQWEsR0FBRyxPQUFPLENBQUMsa0NBQWtDLENBQUMsQ0FBQztBQUNoRSxzQkFBWSxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksYUFBYTt3QkFDekIsUUFBUSxHQUFHLFFBQVE7NENBQ0MsYUFBYTsyQ0FDZCxFQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUMsQ0FDbEQsQ0FBQztTQUNIO0FBQ0QsbUJBQVcsR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7T0FDdEMsQ0FBQyxDQUFDO0FBQ0gsYUFBTyxXQUFXLENBQUM7S0FDcEI7R0FDRjtBQUNELFlBQVUsRUFBVixVQUFVO0FBQ1Ysd0JBQXNCLEVBQXRCLHNCQUFzQjtDQUN2QixDQUFDIiwiZmlsZSI6Ii92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWNsaWVudC9saWIvbWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciB7Z2V0U2VydmljZSwgZ2V0U2VydmljZUJ5TnVjbGlkZVVyaX0gPSByZXF1aXJlKCcuL3NlcnZpY2UtbWFuYWdlcicpO1xudmFyIGxvY2FsQ2xpZW50czoge1tyb290UGF0aDogc3RyaW5nXTogTnVjbGlkZUNsaWVudH0gPSB7fTtcbnZhciB7UmVtb3RlQ29ubmVjdGlvbn0gPSByZXF1aXJlKCdudWNsaWRlLXJlbW90ZS1jb25uZWN0aW9uJyk7XG52YXIgbG9jYWxFdmVudEJ1czogP051Y2xpZGVMb2NhbEV2ZW50YnVzID0gbnVsbDtcbnZhciBkZWZhdWx0TG9jYWxDbGllbnQ6ID9OdWNsaWRlQ2xpZW50ID0gbnVsbDtcbnZhciB7Y29udGFpbnNQYXRoU3luY30gPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIge2lzUmVtb3RlfSA9IHJlcXVpcmUoJ251Y2xpZGUtcmVtb3RlLXVyaScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLyoqXG4gICAqIEByZXR1cm4gbnVsbCBpZiB0aGUgc3BlY2lmaWVkIHBhdGggaXMgYSByZW1vdGUgTnVjbGlkZVVyaSBhbmQgdGhlIGNvcnJlc3BvbmRpbmdcbiAgICogICAgIFJlbW90ZUNvbm5lY3Rpb24gaGFzIG5vdCBiZWVuIGNyZWF0ZWQgeWV0LiBUaGlzIGlzIGxpa2VseSB0byBoYXBwZW4gaWYgZ2V0Q2xpZW50KCkgaXNcbiAgICogICAgIGNhbGxlZCBlYXJseSBpbiB0aGUgc3RhcnR1cCBwcm9jZXNzIGFuZCB3ZSBhcmUgdHJ5aW5nIHRvIHJlc3RvcmUgYSByZW1vdGUgcHJvamVjdCByb290LlxuICAgKi9cbiAgZ2V0Q2xpZW50KHBhdGg6IHN0cmluZyk6ID9OdWNsaWRlQ2xpZW50IHtcbiAgICBpZiAoaXNSZW1vdGUocGF0aCkpIHtcbiAgICAgIHZhciBjb25uZWN0aW9uID0gUmVtb3RlQ29ubmVjdGlvbi5nZXRGb3JVcmkocGF0aCk7XG4gICAgICByZXR1cm4gY29ubmVjdGlvbiA/IGNvbm5lY3Rpb24uZ2V0Q2xpZW50KCkgOiBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWxvY2FsRXZlbnRCdXMpIHtcbiAgICAgICAgdmFyIE51Y2xpZGVMb2NhbEV2ZW50YnVzID0gcmVxdWlyZSgnbnVjbGlkZS1zZXJ2ZXIvbGliL051Y2xpZGVMb2NhbEV2ZW50YnVzJyk7XG4gICAgICAgIGxvY2FsRXZlbnRCdXMgPSBuZXcgTnVjbGlkZUxvY2FsRXZlbnRidXMoKTtcbiAgICAgIH1cbiAgICAgIGlmICghZGVmYXVsdExvY2FsQ2xpZW50KSB7XG4gICAgICAgIHZhciBOdWNsaWRlQ2xpZW50ID0gcmVxdWlyZSgnbnVjbGlkZS1zZXJ2ZXIvbGliL051Y2xpZGVDbGllbnQnKTtcbiAgICAgICAgZGVmYXVsdExvY2FsQ2xpZW50ID0gbmV3IE51Y2xpZGVDbGllbnQoJ2xvY2FsJywgbG9jYWxFdmVudEJ1cyk7XG4gICAgICB9XG4gICAgICAvLyBSZXR1cm4gYSBkZWZhdWx0IGxvY2FsIGNsaWVudCB3aXRoIG5vIHdvcmtpbmcgZGlyZWN0b3J5IGlmIEF0b20gd2FzIHN0YXJ0ZWQgdG8gZWRpdCBhIHNpbmdsZSBmaWxlXG4gICAgICAvLyB3aXRoIGEgY29tbWFuZCBsaWtlOiAkIGF0b20gZmlsZS5waHBcbiAgICAgIHZhciBsb2NhbENsaWVudCA9IGRlZmF1bHRMb2NhbENsaWVudDtcbiAgICAgIGF0b20ucHJvamVjdC5nZXRQYXRocygpLmZvckVhY2gocm9vdFBhdGggPT4ge1xuICAgICAgICBpZiAoIWNvbnRhaW5zUGF0aFN5bmMocm9vdFBhdGgsIHBhdGgpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIENyZWF0ZSBhIGxvY2FsIGNsaWVudCB3aXRoIGl0cyByb290IGFzIHRoZSB3b3JraW5nIGRpcmVjdG9yeSwgaWYgbm9uZSBhbHJlYWR5IGV4aXN0cy5cbiAgICAgICAgaWYgKCFsb2NhbENsaWVudHNbcm9vdFBhdGhdKSB7XG4gICAgICAgICAgdmFyIE51Y2xpZGVDbGllbnQgPSByZXF1aXJlKCdudWNsaWRlLXNlcnZlci9saWIvTnVjbGlkZUNsaWVudCcpO1xuICAgICAgICAgIGxvY2FsQ2xpZW50c1tyb290UGF0aF0gPSBuZXcgTnVjbGlkZUNsaWVudChcbiAgICAgICAgICAgIC8qaWQ6IHN0cmluZyovICdsb2NhbC8nICsgcm9vdFBhdGgsXG4gICAgICAgICAgICAvKmV2ZW50YnVzOiBOdWNsaWRlTG9jYWxFdmVudEJ1cyovIGxvY2FsRXZlbnRCdXMsXG4gICAgICAgICAgICAvKm9wdGlvbnM6IE51Y2xpZGVDbGllbnRPcHRpb25zKi8ge2N3ZDogcm9vdFBhdGh9XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBsb2NhbENsaWVudCA9IGxvY2FsQ2xpZW50c1tyb290UGF0aF07XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBsb2NhbENsaWVudDtcbiAgICB9XG4gIH0sXG4gIGdldFNlcnZpY2UsXG4gIGdldFNlcnZpY2VCeU51Y2xpZGVVcmksXG59O1xuIl19
