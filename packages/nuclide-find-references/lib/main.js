Object.defineProperty(exports, '__esModule', {
  value: true
});

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var createView = _asyncToGenerator(function* () {
  // For some reason, Flow thinks atom.workspace is null here
  var editor = atom.workspace.getActiveTextEditor();
  if (!editor) {
    return null;
  }
  var path = editor.getPath();
  if (!path) {
    return null;
  }
  var point = editor.getCursorBufferPosition();
  /* $FlowFixMe: need array compact function */
  var providerData = yield Promise.all(providers.map(function (provider) {
    return provider.findReferences(editor, point);
  }));
  providerData = providerData.filter(function (x) {
    return !!x;
  });
  if (providerData.length === 0) {
    return null;
  }

  var _providerData$0 = providerData[0];
  var baseUri = _providerData$0.baseUri;
  var referencedSymbolName = _providerData$0.referencedSymbolName;
  var references = _providerData$0.references;

  var FindReferencesModel = require('./FindReferencesModel');
  var model = new FindReferencesModel(baseUri, referencedSymbolName, references);

  var FindReferencesElement = require('./FindReferencesElement');
  return new FindReferencesElement().initialize(model);
});

var tryCreateView = _asyncToGenerator(function* () {
  try {
    var elem = yield createView();
    if (elem) {
      return elem;
    }
    atom.notifications.addError('Symbol references are not available for this project.', { dismissable: true });
  } catch (e) {
    var _require2 = require('nuclide-logging');

    var getLogger = _require2.getLogger;

    getLogger().debug('Error loading references', e);
    atom.notifications.addError('Error loading references: ' + e, { dismissable: true });
  }
});

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

'use babel';

var _require = require('atom');

var CompositeDisposable = _require.CompositeDisposable;

var FIND_REFERENCES_URI = 'atom://nuclide/find-references/';
var subscriptions = null;
var providers = [];

module.exports = {

  activate: function activate(state) {
    subscriptions = new CompositeDisposable();
    subscriptions.add(atom.commands.add('atom-text-editor', 'nuclide-find-references:activate', function () {
      // Generate a unique identifier.
      var crypto = require('crypto');
      var id = (crypto.randomBytes(8) || '').toString('hex');
      atom.workspace.open(FIND_REFERENCES_URI + id);
    }));

    // We can't inline `tryCreateView` with an async callback since addOpener
    // expects a null return value (not a Promise with a null return) if we don't want
    // to handle the new workspace.
    subscriptions.add(atom.workspace.addOpener(function (uri) {
      if (uri.startsWith(FIND_REFERENCES_URI)) {
        return tryCreateView();
      }
    }));
  },

  deactivate: function deactivate() {
    if (subscriptions) {
      subscriptions.dispose();
      subscriptions = null;
    }
    providers = [];
  },

  consumeProvider: function consumeProvider(provider) {
    providers.push(provider);
  }

};
//# sourceMappingURL=data:application/json;base64,
