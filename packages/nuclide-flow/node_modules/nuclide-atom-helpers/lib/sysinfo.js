
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

// Since nuclide-logging depends on getUnixname, we should use
// console.error in this file instead of nuclide-logging.
/*eslint-disable no-console */

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

var determineFlowVersion = _asyncToGenerator(function* () {
  var flowVersion;
  try {
    var pathToFlow = yield getConfigValueAsync('nuclide-flow.pathToFlow')();
    var result = yield asyncExecute(pathToFlow, ['--version'], {});
    flowVersion = result.stdout.trim();
  } catch (e) {
    flowVersion = '';
  }
  return flowVersion;
});

var determineAllSystemInfo = _asyncToGenerator(function* () {
  var _ref = yield Promise.all([getUnixname(), getOSVersion(), getClangVersion(), getFlowVersion()]);

  var _ref2 = _slicedToArray(_ref, 4);

  var userID = _ref2[0];
  var localOsVersion = _ref2[1];
  var localClangVersion = _ref2[2];
  var flowVersion = _ref2[3];

  return {
    version: atom.getVersion(),
    buildNumber: getBuildNumber(),
    smokeBuildNumber: getSmokeBuildNumber(),
    userID: userID,
    unixname: userID,
    osVersion: localOsVersion,
    clangVersion: localClangVersion,
    flowVersion: flowVersion
  };
});

var addSystemInfoPropertiesTo = _asyncToGenerator(function* (data) {
  var allSystemInfo = yield getAllSystemInfo();
  for (var info in allSystemInfo) {
    // we know that this has only its own properties
    data[info] = allSystemInfo[info];
  }
});

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

var _require = require('nuclide-commons');

var asyncExecute = _require.asyncExecute;
var getConfigValueAsync = _require.getConfigValueAsync;

var path = require('path');
var atomMeta = require(path.join(atom.getLoadSettings().resourcePath, 'package.json'));

var unixname;
var buildNumber = null;
var smokeBuildNumber = null;
var osVersion;
var clangVersion;

function getUnixname() {
  if (!unixname) {
    unixname = asyncExecute('whoami', [], {}).then(function (result) {
      return result.stdout.trim();
    }, function (result) {
      console.error(result.stderr);
      return '';
    });
  }
  return unixname;
}

function getBuildNumber() {
  if (buildNumber === null) {
    buildNumber = atomMeta.buildNumber ? atomMeta.buildNumber : 0;
  }
  return buildNumber.toString();
}

function getSmokeBuildNumber() {
  if (smokeBuildNumber === null) {
    smokeBuildNumber = atomMeta.smokeBuildNumber ? atomMeta.smokeBuildNumber : 0;
  }
  return smokeBuildNumber.toString();
}

function getOSVersion() {
  if (!osVersion) {
    osVersion = asyncExecute('sw_vers', ['-productVersion'], {}).then(function (result) {
      return result.stdout.trim();
    }, function (result) {
      console.error(result.stderr);
      return '';
    });
  }
  return osVersion;
}

function getClangVersion() {
  if (!clangVersion) {
    clangVersion = asyncExecute('clang', ['-v'], {}).then(function (result) {
      // Clang return this info in stderr.
      return result.stderr;
    }, function (result) {
      console.error(result.stderr);
      return '';
    });
  }
  return clangVersion;
}

var flowVersionPromise;

function getFlowVersion() {
  if (!flowVersionPromise) {
    flowVersionPromise = determineFlowVersion();
  }
  return flowVersionPromise;
}

var allSystemInfoPromise;

function getAllSystemInfo() {
  if (!allSystemInfoPromise) {
    allSystemInfoPromise = determineAllSystemInfo();
  }
  return allSystemInfoPromise;
}

module.exports = {
  getUnixname: getUnixname,
  getBuildNumber: getBuildNumber,
  getSmokeBuildNumber: getSmokeBuildNumber,
  getOSVersion: getOSVersion,
  getClangVersion: getClangVersion,
  getFlowVersion: getFlowVersion,
  getAllSystemInfo: getAllSystemInfo,
  addSystemInfoPropertiesTo: addSystemInfoPropertiesTo
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWF0b20taGVscGVycy9saWIvc3lzaW5mby5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7SUFxRkcsb0JBQW9CLHFCQUFuQyxhQUF1RDtBQUNyRCxNQUFJLFdBQVcsQ0FBQztBQUNoQixNQUFJO0FBQ0YsUUFBSSxVQUFVLEdBQUcsTUFBTSxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxFQUFFLENBQUM7QUFDeEUsUUFBSSxNQUFNLEdBQUcsTUFBTSxZQUFZLENBQUMsVUFBVSxFQUFFLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDL0QsZUFBVyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7R0FDcEMsQ0FBQyxPQUFPLENBQUMsRUFBRTtBQUNWLGVBQVcsR0FBRyxFQUFFLENBQUM7R0FDbEI7QUFDRCxTQUFPLFdBQVcsQ0FBQztDQUNwQjs7SUFzQmMsc0JBQXNCLHFCQUFyQyxhQUE2RDthQU12RCxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FDcEIsV0FBVyxFQUFFLEVBQ2IsWUFBWSxFQUFFLEVBQ2QsZUFBZSxFQUFFLEVBQ2pCLGNBQWMsRUFBRSxDQUNqQixDQUFDOzs7O01BVEEsTUFBTTtNQUNOLGNBQWM7TUFDZCxpQkFBaUI7TUFDakIsV0FBVzs7QUFPYixTQUFPO0FBQ0wsV0FBTyxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUU7QUFDMUIsZUFBVyxFQUFFLGNBQWMsRUFBRTtBQUM3QixvQkFBZ0IsRUFBRSxtQkFBbUIsRUFBRTtBQUN2QyxVQUFNLEVBQU4sTUFBTTtBQUNOLFlBQVEsRUFBRSxNQUFNO0FBQ2hCLGFBQVMsRUFBRSxjQUFjO0FBQ3pCLGdCQUFZLEVBQUUsaUJBQWlCO0FBQy9CLGVB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QU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM3QixhQUFPLEVBQUUsQ0FBQztLQUNYLENBQUMsQ0FBQztHQUNKO0FBQ0QsU0FBTyxZQUFZLENBQUM7Q0FDckI7O0FBRUQsSUFBSSxrQkFBb0MsQ0FBQzs7QUFFekMsU0FBUyxjQUFjLEdBQW9CO0FBQ3pDLE1BQUksQ0FBQyxrQkFBa0IsRUFBRTtBQUN2QixzQkFBa0IsR0FBRyxvQkFBb0IsRUFBRSxDQUFDO0dBQzdDO0FBQ0QsU0FBTyxrQkFBa0IsQ0FBQztDQUMzQjs7QUF5QkQsSUFBSSxvQkFBMEMsQ0FBQzs7QUFFL0MsU0FBUyxnQkFBZ0IsR0FBd0I7QUFDL0MsTUFBSSxDQUFDLG9CQUFvQixFQUFFO0FBQ3pCLHdCQUFvQixHQUFHLHNCQUFzQixFQUFFLENBQUM7R0FDakQ7QUFDRCxTQUFPLG9CQUFvQixDQUFDO0NBQzdCOztBQWtDRCxNQUFNLENBQUMsT0FBTyxHQUFHO0FBQ2YsYUFBVyxFQUFYLFdBQVc7QUFDWCxnQkFBYyxFQUFkLGNBQWM7QUFDZCxxQkFBbUIsRUFBbkIsbUJBQW1CO0FBQ25CLGNBQVksRUFBWixZQUFZO0FBQ1osaUJBQWUsRUFBZixlQUFlO0FBQ2YsZ0JBQWMsRUFBZCxjQUFjO0FBQ2Qsa0JBQWdCLEVBQWhCLGdCQUFnQjtBQUNoQiwyQkFBeUIsRUFBekIseUJBQXlCO0NBQzFCLENBQUMiLCJmaWxlIjoiL3Zhci9mb2xkZXJzL3hmL3JzcGg0X2M1NzMxNXJzNTd4eHNkc2tyeG52MzZ0MC9UL3RtcGVtbTJIdXB1Ymxpc2hfcGFja2FnZXMvbnBtL251Y2xpZGUtYXRvbS1oZWxwZXJzL2xpYi9zeXNpbmZvLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCc7XG4vKiBAZmxvdyAqL1xuXG4vKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpblxuICogdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLy8gU2luY2UgbnVjbGlkZS1sb2dnaW5nIGRlcGVuZHMgb24gZ2V0VW5peG5hbWUsIHdlIHNob3VsZCB1c2Vcbi8vIGNvbnNvbGUuZXJyb3IgaW4gdGhpcyBmaWxlIGluc3RlYWQgb2YgbnVjbGlkZS1sb2dnaW5nLlxuLyplc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG5cbnZhciB7YXN5bmNFeGVjdXRlLCBnZXRDb25maWdWYWx1ZUFzeW5jfSA9IHJlcXVpcmUoJ251Y2xpZGUtY29tbW9ucycpO1xudmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG52YXIgYXRvbU1ldGEgPSByZXF1aXJlKHBhdGguam9pbihhdG9tLmdldExvYWRTZXR0aW5ncygpLnJlc291cmNlUGF0aCwgJ3BhY2thZ2UuanNvbicpKTtcblxudmFyIHVuaXhuYW1lO1xudmFyIGJ1aWxkTnVtYmVyID0gbnVsbDtcbnZhciBzbW9rZUJ1aWxkTnVtYmVyID0gbnVsbDtcbnZhciBvc1ZlcnNpb247XG52YXIgY2xhbmdWZXJzaW9uO1xuXG5mdW5jdGlvbiBnZXRVbml4bmFtZSgpOiBQcm9taXNlPHN0cmluZz4ge1xuICBpZiAoIXVuaXhuYW1lKSB7XG4gICAgdW5peG5hbWUgPSBhc3luY0V4ZWN1dGUoJ3dob2FtaScsIFtdLCB7fSkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICByZXR1cm4gcmVzdWx0LnN0ZG91dC50cmltKCk7XG4gICAgfSwgKHJlc3VsdCkgPT4ge1xuICAgICAgY29uc29sZS5lcnJvcihyZXN1bHQuc3RkZXJyKTtcbiAgICAgIHJldHVybiAnJztcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gdW5peG5hbWU7XG59XG5cbmZ1bmN0aW9uIGdldEJ1aWxkTnVtYmVyKCk6IHN0cmluZyB7XG4gIGlmIChidWlsZE51bWJlciA9PT0gbnVsbCkge1xuICAgIGJ1aWxkTnVtYmVyID0gYXRvbU1ldGEuYnVpbGROdW1iZXIgPyBhdG9tTWV0YS5idWlsZE51bWJlciA6IDA7XG4gIH1cbiAgcmV0dXJuIGJ1aWxkTnVtYmVyLnRvU3RyaW5nKCk7XG59XG5cbmZ1bmN0aW9uIGdldFNtb2tlQnVpbGROdW1iZXIoKTogc3RyaW5nIHtcbiAgaWYgKHNtb2tlQnVpbGROdW1iZXIgPT09IG51bGwpIHtcbiAgICBzbW9rZUJ1aWxkTnVtYmVyID0gYXRvbU1ldGEuc21va2VCdWlsZE51bWJlciA/IGF0b21NZXRhLnNtb2tlQnVpbGROdW1iZXIgOiAwO1xuICB9XG4gIHJldHVybiBzbW9rZUJ1aWxkTnVtYmVyLnRvU3RyaW5nKCk7XG59XG5cbmZ1bmN0aW9uIGdldE9TVmVyc2lvbigpOiBQcm9taXNlPHN0cmluZz4ge1xuICBpZiAoIW9zVmVyc2lvbikge1xuICAgIG9zVmVyc2lvbiA9IGFzeW5jRXhlY3V0ZSgnc3dfdmVycycsIFsnLXByb2R1Y3RWZXJzaW9uJ10sIHt9KS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgIHJldHVybiByZXN1bHQuc3Rkb3V0LnRyaW0oKTtcbiAgICB9LCAocmVzdWx0KSA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKHJlc3VsdC5zdGRlcnIpO1xuICAgICAgcmV0dXJuICcnO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBvc1ZlcnNpb247XG59XG5cbmZ1bmN0aW9uIGdldENsYW5nVmVyc2lvbigpOiBQcm9taXNlPHN0cmluZz4ge1xuICBpZiAoIWNsYW5nVmVyc2lvbikge1xuICAgIGNsYW5nVmVyc2lvbiA9IGFzeW5jRXhlY3V0ZSgnY2xhbmcnLCBbJy12J10sIHt9KS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgIC8vIENsYW5nIHJldHVybiB0aGlzIGluZm8gaW4gc3RkZXJyLlxuICAgICAgcmV0dXJuIHJlc3VsdC5zdGRlcnI7XG4gICAgfSwgKHJlc3VsdCkgPT4ge1xuICAgICAgY29uc29sZS5lcnJvcihyZXN1bHQuc3RkZXJyKTtcbiAgICAgIHJldHVybiAnJztcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gY2xhbmdWZXJzaW9uO1xufVxuXG52YXIgZmxvd1ZlcnNpb25Qcm9taXNlOiA/UHJvbWlzZTxzdHJpbmc+O1xuXG5mdW5jdGlvbiBnZXRGbG93VmVyc2lvbigpOiBQcm9taXNlPHN0cmluZz4ge1xuICBpZiAoIWZsb3dWZXJzaW9uUHJvbWlzZSkge1xuICAgIGZsb3dWZXJzaW9uUHJvbWlzZSA9IGRldGVybWluZUZsb3dWZXJzaW9uKCk7XG4gIH1cbiAgcmV0dXJuIGZsb3dWZXJzaW9uUHJvbWlzZTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZGV0ZXJtaW5lRmxvd1ZlcnNpb24oKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgdmFyIGZsb3dWZXJzaW9uO1xuICB0cnkge1xuICAgIHZhciBwYXRoVG9GbG93ID0gYXdhaXQgZ2V0Q29uZmlnVmFsdWVBc3luYygnbnVjbGlkZS1mbG93LnBhdGhUb0Zsb3cnKSgpO1xuICAgIHZhciByZXN1bHQgPSBhd2FpdCBhc3luY0V4ZWN1dGUocGF0aFRvRmxvdywgWyctLXZlcnNpb24nXSwge30pO1xuICAgIGZsb3dWZXJzaW9uID0gcmVzdWx0LnN0ZG91dC50cmltKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBmbG93VmVyc2lvbiA9ICcnO1xuICB9XG4gIHJldHVybiBmbG93VmVyc2lvbjtcbn1cblxudHlwZSBTeXN0ZW1JbmZvID0ge1xuICBidWlsZE51bWJlcjogc3RyaW5nO1xuICBjbGFuZ1ZlcnNpb246IHN0cmluZztcbiAgZmxvd1ZlcnNpb246IHN0cmluZztcbiAgb3NWZXJzaW9uOiBzdHJpbmc7XG4gIHNtb2tlQnVpbGROdW1iZXI6IHN0cmluZztcbiAgdW5peG5hbWU6IHN0cmluZztcbiAgdXNlcklEOiBzdHJpbmc7XG4gIHZlcnNpb246IHN0cmluZztcbn07XG5cbnZhciBhbGxTeXN0ZW1JbmZvUHJvbWlzZTogP1Byb21pc2U8U3lzdGVtSW5mbz47XG5cbmZ1bmN0aW9uIGdldEFsbFN5c3RlbUluZm8oKTogUHJvbWlzZTxTeXN0ZW1JbmZvPiB7XG4gIGlmICghYWxsU3lzdGVtSW5mb1Byb21pc2UpIHtcbiAgICBhbGxTeXN0ZW1JbmZvUHJvbWlzZSA9IGRldGVybWluZUFsbFN5c3RlbUluZm8oKTtcbiAgfVxuICByZXR1cm4gYWxsU3lzdGVtSW5mb1Byb21pc2U7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGRldGVybWluZUFsbFN5c3RlbUluZm8oKTogUHJvbWlzZTxTeXN0ZW1JbmZvPiB7XG4gIHZhciBbXG4gICAgdXNlcklELFxuICAgIGxvY2FsT3NWZXJzaW9uLFxuICAgIGxvY2FsQ2xhbmdWZXJzaW9uLFxuICAgIGZsb3dWZXJzaW9uXG4gIF0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgZ2V0VW5peG5hbWUoKSxcbiAgICBnZXRPU1ZlcnNpb24oKSxcbiAgICBnZXRDbGFuZ1ZlcnNpb24oKSxcbiAgICBnZXRGbG93VmVyc2lvbigpLFxuICBdKTtcbiAgcmV0dXJuIHtcbiAgICB2ZXJzaW9uOiBhdG9tLmdldFZlcnNpb24oKSxcbiAgICBidWlsZE51bWJlcjogZ2V0QnVpbGROdW1iZXIoKSxcbiAgICBzbW9rZUJ1aWxkTnVtYmVyOiBnZXRTbW9rZUJ1aWxkTnVtYmVyKCksXG4gICAgdXNlcklELFxuICAgIHVuaXhuYW1lOiB1c2VySUQsXG4gICAgb3NWZXJzaW9uOiBsb2NhbE9zVmVyc2lvbixcbiAgICBjbGFuZ1ZlcnNpb246IGxvY2FsQ2xhbmdWZXJzaW9uLFxuICAgIGZsb3dWZXJzaW9uLFxuICB9O1xufVxuXG5hc3luYyBmdW5jdGlvbiBhZGRTeXN0ZW1JbmZvUHJvcGVydGllc1RvKGRhdGE6IHtba2V5OiBzdHJpbmddOiBtaXhlZH0pOiBQcm9taXNlPHZvaWQ+IHtcbiAgdmFyIGFsbFN5c3RlbUluZm8gPSBhd2FpdCBnZXRBbGxTeXN0ZW1JbmZvKCk7XG4gIGZvciAodmFyIGluZm8gaW4gYWxsU3lzdGVtSW5mbykge1xuICAgIC8vIHdlIGtub3cgdGhhdCB0aGlzIGhhcyBvbmx5IGl0cyBvd24gcHJvcGVydGllc1xuICAgIGRhdGFbaW5mb10gPSBhbGxTeXN0ZW1JbmZvW2luZm9dO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRVbml4bmFtZSxcbiAgZ2V0QnVpbGROdW1iZXIsXG4gIGdldFNtb2tlQnVpbGROdW1iZXIsXG4gIGdldE9TVmVyc2lvbixcbiAgZ2V0Q2xhbmdWZXJzaW9uLFxuICBnZXRGbG93VmVyc2lvbixcbiAgZ2V0QWxsU3lzdGVtSW5mbyxcbiAgYWRkU3lzdGVtSW5mb1Byb3BlcnRpZXNUbyxcbn07XG4iXX0=
