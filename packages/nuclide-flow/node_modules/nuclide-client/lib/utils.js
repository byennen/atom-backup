
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _require = require('path');

var pathSeperator = _require.sep;
var normalize = _require.normalize;

var _require2 = require('fs');

var realpathSync = _require2.realpathSync;

/**
 * Returns if the `rootPath` directory contains the `checkPath` which could be:
 *  - A file or directory path that's a direct child of the root path.
 *  - A file or directory path that's a deep child of the root path.
 *  - The exact `rootPath` in an exact or symlinked form.
 *  - May end in a trailing slash if it's a directory path.
 * Follows symlinks to figure out if the real paths of the root and check paths matches.
 */
function containsPathSync(rootPath, checkPath) {
  var realRootPath = null;
  var realCheckPath = null;
  try {
    realRootPath = realpathSync(rootPath);
    realCheckPath = realpathSync(checkPath);
  } catch (e) {
    realRootPath = rootPath;
    realCheckPath = checkPath;
  }

  var normalizedRootPath = normalize(realRootPath);
  var normalizedCheckPath = normalize(realCheckPath);

  var rootPathNumberOfParts = normalizedRootPath.split(pathSeperator).length;
  // Extract the matching piece of the normalized path to compare with the root path.
  var rootPathMatch = normalizedCheckPath.split(pathSeperator).slice(0, rootPathNumberOfParts).join(pathSeperator);
  return rootPathMatch === normalizedRootPath;
}

module.exports = {
  containsPathSync: containsPathSync
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWNsaWVudC9saWIvdXRpbHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxDQUFDOzs7Ozs7Ozs7O2VBVzBCLE9BQU8sQ0FBQyxNQUFNLENBQUM7O0lBQTNDLGFBQWEsWUFBbEIsR0FBRztJQUFpQixTQUFTLFlBQVQsU0FBUzs7Z0JBQ2IsT0FBTyxDQUFDLElBQUksQ0FBQzs7SUFBN0IsWUFBWSxhQUFaLFlBQVk7Ozs7Ozs7Ozs7QUFVakIsU0FBUyxnQkFBZ0IsQ0FBQyxRQUFnQixFQUFFLFNBQWlCLEVBQVc7QUFDdEUsTUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDO0FBQ3hCLE1BQUksYUFBYSxHQUFHLElBQUksQ0FBQztBQUN6QixNQUFJO0FBQ0YsZ0JBQVksR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDdEMsaUJBQWEsR0FBRyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUM7R0FDekMsQ0FBQyxPQUFPLENBQUMsRUFBRTtBQUNWLGdCQUFZLEdBQUcsUUFBUSxDQUFDO0FBQ3hCLGlCQUFhLEdBQUcsU0FBUyxDQUFDO0dBQzNCOztBQUVELE1BQUksa0JBQWtCLEdBQUcsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ2pELE1BQUksbUJBQW1CLEdBQUcsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDOztBQUVuRCxNQUFJLHFCQUFxQixHQUFHLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQyxNQUFNLENBQUM7O0FBRTNFLE1BQUksYUFBYSxHQUFHLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLHFCQUFxQixDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ2pILFNBQU8sYUFBYSxLQUFLLGtCQUFrQixDQUFDO0NBQzdDOztBQUVELE1BQU0sQ0FBQyxPQUFPLEdBQUc7QUFDZixrQkFBZ0IsRUFBaEIsZ0JBQWdCO0NBQ2pCLENBQUMiLCJmaWxlIjoiL3Zhci9mb2xkZXJzL3hmL3JzcGg0X2M1NzMxNXJzNTd4eHNkc2tyeG52MzZ0MC9UL3RtcGVtbTJIdXB1Ymxpc2hfcGFja2FnZXMvbnBtL251Y2xpZGUtY2xpZW50L2xpYi91dGlscy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciB7c2VwOiBwYXRoU2VwZXJhdG9yLCBub3JtYWxpemV9ID0gcmVxdWlyZSgncGF0aCcpO1xudmFyIHtyZWFscGF0aFN5bmN9ID0gcmVxdWlyZSgnZnMnKTtcblxuLyoqXG4gKiBSZXR1cm5zIGlmIHRoZSBgcm9vdFBhdGhgIGRpcmVjdG9yeSBjb250YWlucyB0aGUgYGNoZWNrUGF0aGAgd2hpY2ggY291bGQgYmU6XG4gKiAgLSBBIGZpbGUgb3IgZGlyZWN0b3J5IHBhdGggdGhhdCdzIGEgZGlyZWN0IGNoaWxkIG9mIHRoZSByb290IHBhdGguXG4gKiAgLSBBIGZpbGUgb3IgZGlyZWN0b3J5IHBhdGggdGhhdCdzIGEgZGVlcCBjaGlsZCBvZiB0aGUgcm9vdCBwYXRoLlxuICogIC0gVGhlIGV4YWN0IGByb290UGF0aGAgaW4gYW4gZXhhY3Qgb3Igc3ltbGlua2VkIGZvcm0uXG4gKiAgLSBNYXkgZW5kIGluIGEgdHJhaWxpbmcgc2xhc2ggaWYgaXQncyBhIGRpcmVjdG9yeSBwYXRoLlxuICogRm9sbG93cyBzeW1saW5rcyB0byBmaWd1cmUgb3V0IGlmIHRoZSByZWFsIHBhdGhzIG9mIHRoZSByb290IGFuZCBjaGVjayBwYXRocyBtYXRjaGVzLlxuICovXG5mdW5jdGlvbiBjb250YWluc1BhdGhTeW5jKHJvb3RQYXRoOiBzdHJpbmcsIGNoZWNrUGF0aDogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHZhciByZWFsUm9vdFBhdGggPSBudWxsO1xuICB2YXIgcmVhbENoZWNrUGF0aCA9IG51bGw7XG4gIHRyeSB7XG4gICAgcmVhbFJvb3RQYXRoID0gcmVhbHBhdGhTeW5jKHJvb3RQYXRoKTtcbiAgICByZWFsQ2hlY2tQYXRoID0gcmVhbHBhdGhTeW5jKGNoZWNrUGF0aCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZWFsUm9vdFBhdGggPSByb290UGF0aDtcbiAgICByZWFsQ2hlY2tQYXRoID0gY2hlY2tQYXRoO1xuICB9XG5cbiAgdmFyIG5vcm1hbGl6ZWRSb290UGF0aCA9IG5vcm1hbGl6ZShyZWFsUm9vdFBhdGgpO1xuICB2YXIgbm9ybWFsaXplZENoZWNrUGF0aCA9IG5vcm1hbGl6ZShyZWFsQ2hlY2tQYXRoKTtcblxuICB2YXIgcm9vdFBhdGhOdW1iZXJPZlBhcnRzID0gbm9ybWFsaXplZFJvb3RQYXRoLnNwbGl0KHBhdGhTZXBlcmF0b3IpLmxlbmd0aDtcbiAgLy8gRXh0cmFjdCB0aGUgbWF0Y2hpbmcgcGllY2Ugb2YgdGhlIG5vcm1hbGl6ZWQgcGF0aCB0byBjb21wYXJlIHdpdGggdGhlIHJvb3QgcGF0aC5cbiAgdmFyIHJvb3RQYXRoTWF0Y2ggPSBub3JtYWxpemVkQ2hlY2tQYXRoLnNwbGl0KHBhdGhTZXBlcmF0b3IpLnNsaWNlKDAsIHJvb3RQYXRoTnVtYmVyT2ZQYXJ0cykuam9pbihwYXRoU2VwZXJhdG9yKTtcbiAgcmV0dXJuIHJvb3RQYXRoTWF0Y2ggPT09IG5vcm1hbGl6ZWRSb290UGF0aDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNvbnRhaW5zUGF0aFN5bmMsXG59O1xuIl19
