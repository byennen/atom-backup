
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */
var https = require('https');
var http = require('http');
var fs = require('fs');
var path = require('path');
var url = require('url');

var version;

function processArgs() {
  var args = process.argv.slice(2);
  var processedArgs = {};

  args.forEach(function (argument, index) {
    if (index % 2 !== 0) {
      processedArgs[args[index - 1].slice(2)] = argument;
    }
  });
  return processedArgs;
}

function startServer(args) {
  if (args.key && args.cert && args.ca) {
    var webServerOptions = {
      key: fs.readFileSync(args.key),
      cert: fs.readFileSync(args.cert),
      ca: fs.readFileSync(args.ca),
      requestCert: true,
      rejectUnauthorized: true
    };

    var _webServer = https.createServer(webServerOptions, handleRequest);
    console.log('running in secure mode');
  } else {
    var _webServer = http.createServer(handleRequest);
  }

  _webServer.on('listening', function () {
    console.log('listening on port ' + args.port);
  });

  _webServer.listen(args.port || 8084, '::');
}

function handleRequest(request, response) {
  var path = url.parse(request.url, false).pathname;

  switch (path) {
    case '/server/version':
      handleVersion(request, response);
      break;
    case '/server/setversion':
      handleSetVersion(request, response);
      break;
    default:
      response.writeHead(500);
      response.write('This mock server does not understand that command');
      response.end();
      break;
  }
}

function handleVersion(request, response) {
  response.writeHead(200);
  response.write(version);
  response.end();
}

function handleSetVersion(request, response) {
  response.writeHead(200);
  var parsedUrl = url.parse(request.url, true);

  if (parsedUrl.query) {
    version = parsedUrl.query.version;
    response.write('Version set to ' + parsedUrl.query.version);
  }

  response.end();
}

// Set the initial version by reading from the file.
try {
  var json = JSON.parse(fs.readFileSync(path.resolve(__dirname, 'version.json')));
  version = json.Version.toString();
} catch (e) {
  version = 'test-version';
}
startServer(processArgs());
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXNlcnZlci9zY3JpcHRzL21vY2svbnVjbGlkZS1tYWluLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFdBQVcsQ0FBQzs7Ozs7Ozs7O0FBVVosSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzdCLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMzQixJQUFJLEVBQUUsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDdkIsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzNCLElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQzs7QUFFekIsSUFBSSxPQUFPLENBQUM7O0FBRVosU0FBUyxXQUFXLEdBQUc7QUFDckIsTUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakMsTUFBSSxhQUFhLEdBQUcsRUFBRSxDQUFDOztBQUV2QixNQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsUUFBUSxFQUFFLEtBQUssRUFBRTtBQUN0QyxRQUFJLEtBQUssR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQ25CLG1CQUFhLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUM7S0FDbEQ7R0FDRixDQUFDLENBQUM7QUFDSCxTQUFPLGFBQWEsQ0FBQztDQUN0Qjs7QUFFRCxTQUFTLFdBQVcsQ0FBQyxJQUFJLEVBQUU7QUFDekIsTUFBSSxJQUFJLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLEVBQUUsRUFBRTtB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QWMsQ0FBQztDQUMxQjtBQUNELFdBQVcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDIiwiZmlsZSI6Ii92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXNlcnZlci9zY3JpcHRzL21vY2svbnVjbGlkZS1tYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCc7XG4vKiBAZmxvdyAqL1xuXG4vKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpblxuICogdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbnZhciBodHRwcyA9IHJlcXVpcmUoJ2h0dHBzJyk7XG52YXIgaHR0cCA9IHJlcXVpcmUoJ2h0dHAnKTtcbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbnZhciB1cmwgPSByZXF1aXJlKCd1cmwnKTtcblxudmFyIHZlcnNpb247XG5cbmZ1bmN0aW9uIHByb2Nlc3NBcmdzKCkge1xuICB2YXIgYXJncyA9IHByb2Nlc3MuYXJndi5zbGljZSgyKTtcbiAgdmFyIHByb2Nlc3NlZEFyZ3MgPSB7fTtcblxuICBhcmdzLmZvckVhY2goZnVuY3Rpb24gKGFyZ3VtZW50LCBpbmRleCkge1xuICAgIGlmIChpbmRleCAlIDIgIT09IDApIHtcbiAgICAgIHByb2Nlc3NlZEFyZ3NbYXJnc1tpbmRleC0xXS5zbGljZSgyKV0gPSBhcmd1bWVudDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcHJvY2Vzc2VkQXJncztcbn1cblxuZnVuY3Rpb24gc3RhcnRTZXJ2ZXIoYXJncykge1xuICBpZiAoYXJncy5rZXkgJiYgYXJncy5jZXJ0ICYmIGFyZ3MuY2EpIHtcbiAgICB2YXIgd2ViU2VydmVyT3B0aW9ucyA9IHtcbiAgICAgIGtleTogZnMucmVhZEZpbGVTeW5jKGFyZ3Mua2V5KSxcbiAgICAgIGNlcnQ6IGZzLnJlYWRGaWxlU3luYyhhcmdzLmNlcnQpLFxuICAgICAgY2E6IGZzLnJlYWRGaWxlU3luYyhhcmdzLmNhKSxcbiAgICAgIHJlcXVlc3RDZXJ0OiB0cnVlLFxuICAgICAgcmVqZWN0VW5hdXRob3JpemVkOiB0cnVlLFxuICAgIH07XG5cbiAgICB2YXIgX3dlYlNlcnZlciA9IGh0dHBzLmNyZWF0ZVNlcnZlcih3ZWJTZXJ2ZXJPcHRpb25zLCBoYW5kbGVSZXF1ZXN0KTtcbiAgICBjb25zb2xlLmxvZygncnVubmluZyBpbiBzZWN1cmUgbW9kZScpO1xuICB9IGVsc2Uge1xuICAgIHZhciBfd2ViU2VydmVyID0gaHR0cC5jcmVhdGVTZXJ2ZXIoaGFuZGxlUmVxdWVzdCk7XG4gIH1cblxuICBfd2ViU2VydmVyLm9uKCdsaXN0ZW5pbmcnLCBmdW5jdGlvbiAoKSB7XG4gICAgY29uc29sZS5sb2coJ2xpc3RlbmluZyBvbiBwb3J0ICcgKyBhcmdzLnBvcnQpO1xuICB9KTtcblxuICBfd2ViU2VydmVyLmxpc3RlbihhcmdzLnBvcnQgfHwgODA4NCwgJzo6Jyk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVJlcXVlc3QocmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgdmFyIHBhdGggPSB1cmwucGFyc2UocmVxdWVzdC51cmwsIGZhbHNlKS5wYXRobmFtZTtcblxuICBzd2l0Y2ggKHBhdGgpIHtcbiAgICBjYXNlICcvc2VydmVyL3ZlcnNpb24nOlxuICAgICAgaGFuZGxlVmVyc2lvbihyZXF1ZXN0LCByZXNwb25zZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICcvc2VydmVyL3NldHZlcnNpb24nOlxuICAgICAgaGFuZGxlU2V0VmVyc2lvbihyZXF1ZXN0LCByZXNwb25zZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVzcG9uc2Uud3JpdGVIZWFkKDUwMCk7XG4gICAgICByZXNwb25zZS53cml0ZSgnVGhpcyBtb2NrIHNlcnZlciBkb2VzIG5vdCB1bmRlcnN0YW5kIHRoYXQgY29tbWFuZCcpO1xuICAgICAgcmVzcG9uc2UuZW5kKCk7XG4gICAgICBicmVhaztcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIGhhbmRsZVZlcnNpb24ocmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgcmVzcG9uc2Uud3JpdGVIZWFkKDIwMCk7XG4gIHJlc3BvbnNlLndyaXRlKHZlcnNpb24pO1xuICByZXNwb25zZS5lbmQoKTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlU2V0VmVyc2lvbihyZXF1ZXN0LCByZXNwb25zZSkge1xuICByZXNwb25zZS53cml0ZUhlYWQoMjAwKTtcbiAgdmFyIHBhcnNlZFVybCA9IHVybC5wYXJzZShyZXF1ZXN0LnVybCwgdHJ1ZSk7XG5cbiAgaWYgKHBhcnNlZFVybC5xdWVyeSkge1xuICAgIHZlcnNpb24gPSBwYXJzZWRVcmwucXVlcnkudmVyc2lvbjtcbiAgICByZXNwb25zZS53cml0ZSgnVmVyc2lvbiBzZXQgdG8gJyArIHBhcnNlZFVybC5xdWVyeS52ZXJzaW9uKTtcbiAgfVxuXG4gIHJlc3BvbnNlLmVuZCgpO1xufVxuXG4vLyBTZXQgdGhlIGluaXRpYWwgdmVyc2lvbiBieSByZWFkaW5nIGZyb20gdGhlIGZpbGUuXG50cnkge1xuICB2YXIganNvbiA9IEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICd2ZXJzaW9uLmpzb24nKSkpO1xuICB2ZXJzaW9uID0ganNvbi5WZXJzaW9uLnRvU3RyaW5nKCk7XG59IGNhdGNoIChlKSB7XG4gIHZlcnNpb24gPSAndGVzdC12ZXJzaW9uJztcbn1cbnN0YXJ0U2VydmVyKHByb2Nlc3NBcmdzKCkpO1xuIl19
