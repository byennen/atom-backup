var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

'use babel';

var _require = require("events");

var EventEmitter = _require.EventEmitter;

var scanhandler = require('./scanhandler');
var path = require('path');

var ON_MATCHES_UPDATE = 'update';
var ON_SEARCH_COMPLETED = 'completed';

var LocalFindInProjectService = (function () {
  function LocalFindInProjectService() {
    _classCallCheck(this, LocalFindInProjectService);

    this._requests = 1;
    this._emitter = new EventEmitter();
  }

  _createClass(LocalFindInProjectService, [{
    key: "search",
    value: function search(directory, regex, caseSensitive, subdirs) {
      var _this = this;

      var requestId = this._requests++; // Get a unique number to represent this request.

      // Start the search asynchronously.
      process.nextTick(function () {
        scanhandler.search(directory, regex, function (update) {
          // On update, normalize the paths, and try to pass the update to clients.
          _this._emitter.emit(ON_MATCHES_UPDATE, requestId, {
            filePath: path.join(directory, update.filePath),
            matches: update.matches
          });
        }, caseSensitive, subdirs).then(function (results) {
          // Upon completion of search, emit event.
          _this._emitter.emit(ON_SEARCH_COMPLETED, requestId);
        });
      });

      // Return the request id to the client, without blocking on the search's completion.
      return Promise.resolve(requestId);
    }

    // Subscribe to the completion of searches.
  }, {
    key: "onSearchCompleted",
    value: function onSearchCompleted(callback) {
      var _this2 = this;

      // Add this callback to a listener for completions.
      this._emitter.addListener(ON_SEARCH_COMPLETED, callback);

      // Return a disposable that lets the client unsubscribe.
      return {
        dispose: function dispose() {
          return _this2._emitter.removeListener(ON_SEARCH_COMPLETED, callback);
        }
      };
    }

    // Subscribe to an event triggered whenever new matches are found in a file.
  }, {
    key: "onMatchesUpdate",
    value: function onMatchesUpdate(callback) {
      var _this3 = this;

      // Add this callback to a listener for results.
      this._emitter.addListener(ON_MATCHES_UPDATE, callback);

      // Return a disposable that lets the client unsubscribe.
      return {
        dispose: function dispose() {
          return _this3._emitter.removeListener(ON_MATCHES_UPDATE, callback);
        }
      };
    }
  }]);

  return LocalFindInProjectService;
})();

module.exports = LocalFindInProjectService;

// Store a current request id counter.

// A gobal emitter used by clients receive streaming results.
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXJlbW90ZS1zZWFyY2gvbGliL0xvY2FsRmluZEluUHJvamVjdFNlcnZpY2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsV0FBVyxDQUFDOztlQWFTLE9BQU8sQ0FBQyxRQUFRLENBQUM7O0lBQWpDLFlBQVksWUFBWixZQUFZOztBQUNqQixJQUFJLFdBQVcsR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDM0MsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDOztBQUUzQixJQUFNLGlCQUFpQixHQUFHLFFBQVEsQ0FBQztBQUNuQyxJQUFNLG1CQUFtQixHQUFHLFdBQVcsQ0FBQzs7SUFPbEMseUJBQXlCO0FBT2xCLFdBUFAseUJBQXlCLEdBT2Y7MEJBUFYseUJBQXlCOztBQVEzQixRQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQztBQUNuQixRQUFJLENBQUMsUUFBUSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7R0FDcEM7O2VBVkcseUJBQXlCOztXQVl2QixnQkFBQyxTQUFxQixFQUFFLEtBQWEsRUFBRSxhQUFzQixFQUFFLE9BQXNCLEVBQW1COzs7QUFDNUcsVUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDOzs7QUFHakMsYUFBTyxDQUFDLFFBQVEsQ0FBQyxZQUFNO0FBQ3JCLG1CQUFXLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsVUFBQSxNQUFNLEVBQUk7O0FBRTdDLGdCQUFLLFFBQVEsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsU0FBUyxFQUFFO0FBQy9DLG9CQUFRLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQztBQUMvQyxtQkFBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPO1dBQ3hCLENBQUMsQ0FBQztTQUNKLEVBQUUsYUFBYSxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLE9BQU8sRUFBSTs7QUFFekMsZ0JBQUssUUFBUSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxTQUFTLENBQUMsQ0FBQztTQUNwRCxDQUFDLENBQUM7T0FDSixDQUFDLENBQUM7OztBQUdILGFBQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztLQUNuQzs7Ozs7V0FHZ0IsMkJBQUMsUUFBcUMsRUFBYzs7OztBQUVuRSxVQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxtQkFBbUIsRUFBRSxRQUFRLENBQUMsQ0FBQzs7O0FBR3pELGFBQU87QUFDTCxlQUFPLEVBQUU7aUJBQU0sT0FBSyxRQUFRLENBQUMsY0FBYyxDQUFDLG1CQUFtQixFQUFFLFFBQVEsQ0FBQztTQUFBO09BQzNFLENBQUM7S0FDSDs7Ozs7V0FJYyx5QkFDYixRQUdTLEVBQ0c7Ozs7QUFFWixVQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxpQkFBaUIsRUFBRSxRQUFRLENBQUMsQ0FBQzs7O0FBR3ZELGFBQU87QUFDTCxlQUFPLEVBQUU7aUJBQU0sT0FBSyxRQUFRLENBQUMsY0FBYyxDQUFDLGlCQUFpQixFQUFFLFFBQVEsQ0FBQztTQUFBO09BQ3pFLENBQUM7S0FDSDs7O1NBM0RHLHlCQUF5Qjs7O0FBOEQvQixNQUFNLENBQUMsT0FBTyxHQUFHLHlCQUF5QixDQUFDIiwiZmlsZSI6Ii92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXJlbW90ZS1zZWFyY2gvbGliL0xvY2FsRmluZEluUHJvamVjdFNlcnZpY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pbXBvcnQgdHlwZSB7c2VhcmNoJEZpbGVSZXN1bHQsIHNlYXJjaCRNYXRjaH0gZnJvbSBcIi4vdHlwZXNcIjtcblxudmFyIHtFdmVudEVtaXR0ZXJ9ID0gcmVxdWlyZShcImV2ZW50c1wiKTtcbnZhciBzY2FuaGFuZGxlciA9IHJlcXVpcmUoJy4vc2NhbmhhbmRsZXInKTtcbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuXG5jb25zdCBPTl9NQVRDSEVTX1VQREFURSA9ICd1cGRhdGUnO1xuY29uc3QgT05fU0VBUkNIX0NPTVBMRVRFRCA9ICdjb21wbGV0ZWQnO1xuXG50eXBlIEZpbmRJblByb2plY3QkUmVxdWVzdCA9IHtcbiAgcmVzdWx0c1Byb21pc2U6IFByb21pc2U8QXJyYXk8c2VhcmNoJEZpbGVSZXN1bHQ+PjtcbiAgaWQ6IG51bWJlcjtcbn07XG5cbmNsYXNzIExvY2FsRmluZEluUHJvamVjdFNlcnZpY2Uge1xuICAvLyBTdG9yZSBhIGN1cnJlbnQgcmVxdWVzdCBpZCBjb3VudGVyLlxuICBfcmVxdWVzdHM6IG51bWJlcjtcblxuICAvLyBBIGdvYmFsIGVtaXR0ZXIgdXNlZCBieSBjbGllbnRzIHJlY2VpdmUgc3RyZWFtaW5nIHJlc3VsdHMuXG4gIF9lbWl0dGVyOiBFdmVudEVtaXR0ZXI7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fcmVxdWVzdHMgPSAxO1xuICAgIHRoaXMuX2VtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIH1cblxuICBzZWFyY2goZGlyZWN0b3J5OiBOdWNsaWRlVXJpLCByZWdleDogc3RyaW5nLCBjYXNlU2Vuc2l0aXZlOiBib29sZWFuLCBzdWJkaXJzOiBBcnJheTxzdHJpbmc+KTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICB2YXIgcmVxdWVzdElkID0gdGhpcy5fcmVxdWVzdHMrKzsgLy8gR2V0IGEgdW5pcXVlIG51bWJlciB0byByZXByZXNlbnQgdGhpcyByZXF1ZXN0LlxuXG4gICAgLy8gU3RhcnQgdGhlIHNlYXJjaCBhc3luY2hyb25vdXNseS5cbiAgICBwcm9jZXNzLm5leHRUaWNrKCgpID0+IHtcbiAgICAgIHNjYW5oYW5kbGVyLnNlYXJjaChkaXJlY3RvcnksIHJlZ2V4LCB1cGRhdGUgPT4ge1xuICAgICAgICAvLyBPbiB1cGRhdGUsIG5vcm1hbGl6ZSB0aGUgcGF0aHMsIGFuZCB0cnkgdG8gcGFzcyB0aGUgdXBkYXRlIHRvIGNsaWVudHMuXG4gICAgICAgIHRoaXMuX2VtaXR0ZXIuZW1pdChPTl9NQVRDSEVTX1VQREFURSwgcmVxdWVzdElkLCB7XG4gICAgICAgICAgZmlsZVBhdGg6IHBhdGguam9pbihkaXJlY3RvcnksIHVwZGF0ZS5maWxlUGF0aCksXG4gICAgICAgICAgbWF0Y2hlczogdXBkYXRlLm1hdGNoZXMsXG4gICAgICAgIH0pO1xuICAgICAgfSwgY2FzZVNlbnNpdGl2ZSwgc3ViZGlycykudGhlbihyZXN1bHRzID0+IHtcbiAgICAgICAgLy8gVXBvbiBjb21wbGV0aW9uIG9mIHNlYXJjaCwgZW1pdCBldmVudC5cbiAgICAgICAgdGhpcy5fZW1pdHRlci5lbWl0KE9OX1NFQVJDSF9DT01QTEVURUQsIHJlcXVlc3RJZCk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIFJldHVybiB0aGUgcmVxdWVzdCBpZCB0byB0aGUgY2xpZW50LCB3aXRob3V0IGJsb2NraW5nIG9uIHRoZSBzZWFyY2gncyBjb21wbGV0aW9uLlxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVxdWVzdElkKTtcbiAgfVxuXG4gIC8vIFN1YnNjcmliZSB0byB0aGUgY29tcGxldGlvbiBvZiBzZWFyY2hlcy5cbiAgb25TZWFyY2hDb21wbGV0ZWQoY2FsbGJhY2s6IChyZXF1ZXN0SWQ6IG51bWJlcikgPT4gdm9pZCk6IERpc3Bvc2FibGUge1xuICAgIC8vIEFkZCB0aGlzIGNhbGxiYWNrIHRvIGEgbGlzdGVuZXIgZm9yIGNvbXBsZXRpb25zLlxuICAgIHRoaXMuX2VtaXR0ZXIuYWRkTGlzdGVuZXIoT05fU0VBUkNIX0NPTVBMRVRFRCwgY2FsbGJhY2spO1xuXG4gICAgLy8gUmV0dXJuIGEgZGlzcG9zYWJsZSB0aGF0IGxldHMgdGhlIGNsaWVudCB1bnN1YnNjcmliZS5cbiAgICByZXR1cm4ge1xuICAgICAgZGlzcG9zZTogKCkgPT4gdGhpcy5fZW1pdHRlci5yZW1vdmVMaXN0ZW5lcihPTl9TRUFSQ0hfQ09NUExFVEVELCBjYWxsYmFjayksXG4gICAgfTtcbiAgfVxuXG5cbiAgLy8gU3Vic2NyaWJlIHRvIGFuIGV2ZW50IHRyaWdnZXJlZCB3aGVuZXZlciBuZXcgbWF0Y2hlcyBhcmUgZm91bmQgaW4gYSBmaWxlLlxuICBvbk1hdGNoZXNVcGRhdGUoXG4gICAgY2FsbGJhY2s6IChcbiAgICAgIHJlcXVlc3RJZDogbnVtYmVyLFxuICAgICAgZmlsZVJlc3VsdDogc2VhcmNoJEZpbGVSZXN1bHRcbiAgICApID0+IHZvaWRcbiAgKTogRGlzcG9zYWJsZSB7XG4gICAgLy8gQWRkIHRoaXMgY2FsbGJhY2sgdG8gYSBsaXN0ZW5lciBmb3IgcmVzdWx0cy5cbiAgICB0aGlzLl9lbWl0dGVyLmFkZExpc3RlbmVyKE9OX01BVENIRVNfVVBEQVRFLCBjYWxsYmFjayk7XG5cbiAgICAvLyBSZXR1cm4gYSBkaXNwb3NhYmxlIHRoYXQgbGV0cyB0aGUgY2xpZW50IHVuc3Vic2NyaWJlLlxuICAgIHJldHVybiB7XG4gICAgICBkaXNwb3NlOiAoKSA9PiB0aGlzLl9lbWl0dGVyLnJlbW92ZUxpc3RlbmVyKE9OX01BVENIRVNfVVBEQVRFLCBjYWxsYmFjayksXG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IExvY2FsRmluZEluUHJvamVjdFNlcnZpY2U7XG4iXX0=
