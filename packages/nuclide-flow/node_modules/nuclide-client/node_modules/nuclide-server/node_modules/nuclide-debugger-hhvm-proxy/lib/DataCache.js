
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _require = require('./utils');

var log = _require.log;
var logErrorAndThrow = _require.logErrorAndThrow;

var _require2 = require('./ObjectId');

var remoteObjectIdOfObjectId = _require2.remoteObjectIdOfObjectId;
var createContextObjectId = _require2.createContextObjectId;
var isContextObjectId = _require2.isContextObjectId;
var isPagedObjectId = _require2.isPagedObjectId;

var _require3 = require('./properties.js');

var convertProperties = _require3.convertProperties;
var getPagedProperties = _require3.getPagedProperties;

// TODO: Move these Chrome types to a shared package.

// description wins over value in display

// scope.object.description shows on RHS
// [ "catch" , "closure" , "global" , "local" , "with" ]

/**
 * Handles data value tracking between Chrome and Dbgp.
 *
 * Maps Dbgp properties to/from Chrome RemoteObjects.
 * RemoteObjects are only valid while the debuggee is paused.
 * Once the debuggee resumes, all RemoteObjects become invalid.
 */

var DataCache = (function () {
  function DataCache(socket) {
    _classCallCheck(this, DataCache);

    this._socket = socket;
    this._enableCount = 0;
    this._enabled = false;
  }

  _createClass(DataCache, [{
    key: 'disable',
    value: function disable() {
      this._enabled = false;
    }
  }, {
    key: 'isEnabled',
    value: function isEnabled() {
      return this._enabled;
    }
  }, {
    key: 'enable',
    value: function enable() {
      this._enableCount += 1;
      this._enabled = true;
    }
  }, {
    key: 'getScopesForFrame',
    value: _asyncToGenerator(function* (frameIndex) {
      var _this = this;

      if (!this.isEnabled()) {
        throw new Error('Must be enabled to get scopes.');
      }
      var contexts = yield this._socket.getContextsForFrame(frameIndex);
      return contexts.map(function (context) {
        return {
          object: _this._remoteObjectOfContext(frameIndex, context),
          type: contextNameToScopeType(context.name)
        };
      });
    })
  }, {
    key: '_remoteObjectOfContext',
    value: function _remoteObjectOfContext(frameIndex, context) {
      return {
        description: context.name,
        type: 'object',
        objectId: remoteObjectIdOfObjectId(this._objectIdOfContext(frameIndex, context))
      };
    }
  }, {
    key: '_objectIdOfContext',
    value: function _objectIdOfContext(frameIndex, context) {
      return createContextObjectId(this._enableCount, frameIndex, context.id);
    }
  }, {
    key: 'getProperties',
    value: _asyncToGenerator(function* (remoteId) {
      var id = JSON.parse(remoteId);
      if (id.enableCount !== this._enableCount) {
        logErrorAndThrow('Got request for stale RemoteObjectId ' + remoteId);
      }

      // context and single paged ids require getting children from the debuggee and converting
      // them from dbgp to chrome format.
      if (isContextObjectId(id)) {
        return yield this._getContextProperties(id);
      } else if (isPagedObjectId(id)) {
        // Paged id's children are constructed directly in chrome format from the contents of the
        // object id. Does not require going to the debuggee.
        return getPagedProperties(id);
      } else {
        return yield this._getSinglePageOfProperties(id);
      }
    })
  }, {
    key: '_getSinglePageOfProperties',
    value: _asyncToGenerator(function* (id) {
      var properties = yield this._socket.getPropertiesByFullname(id.frameIndex, id.contextId, id.fullname, id.page);
      return convertProperties(id, properties);
    })
  }, {
    key: '_getContextProperties',
    value: _asyncToGenerator(function* (id) {
      var properties = yield this._socket.getContextProperties(id.frameIndex, id.contextId);
      return convertProperties(id, properties);
    })
  }]);

  return DataCache;
})();

function contextNameToScopeType(name) {
  switch (name) {
    case 'Locals':
      return 'local';
    case 'Superglobals':
      return 'global';
    case 'User defined constants':
      return 'global';
    // TODO: Verify this ...
    default:
      log('Unexpected context name: ' + name);
      return 'closure';
  }
}

module.exports = DataCache;
// [ "array" , "date" , "node" , "null" , "regexp" ]
// [ "boolean" , "function" , "number" , "object" , "string" , "undefined" ]
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWRlYnVnZ2VyLWhodm0tcHJveHkvbGliL0RhdGFDYWNoZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7ZUFZa0IsT0FBTyxDQUFDLFNBQVMsQ0FBQzs7SUFBM0MsR0FBRyxZQUFILEdBQUc7SUFBRSxnQkFBZ0IsWUFBaEIsZ0JBQWdCOztnQkFNdEIsT0FBTyxDQUFDLFlBQVksQ0FBQzs7SUFKdkIsd0JBQXdCLGFBQXhCLHdCQUF3QjtJQUN4QixxQkFBcUIsYUFBckIscUJBQXFCO0lBQ3JCLGlCQUFpQixhQUFqQixpQkFBaUI7SUFDakIsZUFBZSxhQUFmLGVBQWU7O2dCQU1iLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQzs7SUFGNUIsaUJBQWlCLGFBQWpCLGlCQUFpQjtJQUNqQixrQkFBa0IsYUFBbEIsa0JBQWtCOzs7Ozs7Ozs7Ozs7Ozs7OztJQXdDZCxTQUFTO0FBS0YsV0FMUCxTQUFTLENBS0QsTUFBa0IsRUFBRTswQkFMNUIsU0FBUzs7QUFNWCxRQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztBQUN0QixRQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQztBQUN0QixRQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztHQUN2Qjs7ZUFURyxTQUFTOztXQVdOLG1CQUFTO0FBQ2QsVUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7S0FDdkI7OztXQUVRLHFCQUFZO0FBQ25CLGFBQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztLQUN0Qjs7O1dBRUssa0JBQVM7QUFDYixVQUFJLENBQUMsWUFBWSxJQUFJLENBQUMsQ0FBQztBQUN2QixVQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztLQUN0Qjs7OzZCQUVzQixXQUFDLFVBQWtCLEVBQWtC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OiIvdmFyL2ZvbGRlcnMveGYvcnNwaDRfYzU3MzE1cnM1N3h4c2Rza3J4bnYzNnQwL1QvdG1wZW1tMkh1cHVibGlzaF9wYWNrYWdlcy9ucG0vbnVjbGlkZS1kZWJ1Z2dlci1oaHZtLXByb3h5L2xpYi9EYXRhQ2FjaGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5cbnZhciB7bG9nLCBsb2dFcnJvckFuZFRocm93fSA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciB7XG4gIHJlbW90ZU9iamVjdElkT2ZPYmplY3RJZCxcbiAgY3JlYXRlQ29udGV4dE9iamVjdElkLFxuICBpc0NvbnRleHRPYmplY3RJZCxcbiAgaXNQYWdlZE9iamVjdElkLFxufSA9IHJlcXVpcmUoJy4vT2JqZWN0SWQnKTtcblxudmFyIHtcbiAgY29udmVydFByb3BlcnRpZXMsXG4gIGdldFBhZ2VkUHJvcGVydGllcyxcbn0gPSByZXF1aXJlKCcuL3Byb3BlcnRpZXMuanMnKTtcblxuLy8gVE9ETzogTW92ZSB0aGVzZSBDaHJvbWUgdHlwZXMgdG8gYSBzaGFyZWQgcGFja2FnZS5cbnR5cGUgUmVtb3RlT2JqZWN0SWQgPSBzdHJpbmc7XG5cbi8vIGRlc2NyaXB0aW9uIHdpbnMgb3ZlciB2YWx1ZSBpbiBkaXNwbGF5XG50eXBlIFJlbW90ZU9iamVjdCA9IHtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBkZXNjcmlwdGlvbj86IHN0cmluZztcbiAgb2JqZWN0SWQ/OiBSZW1vdGVPYmplY3RJZDtcbiAgc3VidHlwZT86IHN0cmluZzsgLy8gWyBcImFycmF5XCIgLCBcImRhdGVcIiAsIFwibm9kZVwiICwgXCJudWxsXCIgLCBcInJlZ2V4cFwiIF1cbiAgdHlwZTogc3RyaW5nOyAvLyBbIFwiYm9vbGVhblwiICwgXCJmdW5jdGlvblwiICwgXCJudW1iZXJcIiAsIFwib2JqZWN0XCIgLCBcInN0cmluZ1wiICwgXCJ1bmRlZmluZWRcIiBdXG4gIHZhbHVlPzogYW55O1xufTtcblxuLy8gc2NvcGUub2JqZWN0LmRlc2NyaXB0aW9uIHNob3dzIG9uIFJIU1xudHlwZSBTY29wZSA9IHtcbiAgb2JqZWN0OiBSZW1vdGVPYmplY3Q7XG4gIHR5cGU6IHN0cmluZzsgLy8gWyBcImNhdGNoXCIgLCBcImNsb3N1cmVcIiAsIFwiZ2xvYmFsXCIgLCBcImxvY2FsXCIgLCBcIndpdGhcIiBdXG59O1xuXG50eXBlIFByb3BlcnR5RGVzY3JpcHRvciA9IHtcbiAgY29uZmlndXJhYmxlOiBib29sZWFuO1xuICBlbnVtZXJhYmxlOiBib29sZWFuO1xuICBnZXQ/OiBSZW1vdGVPYmplY3Q7XG4gIG5hbWU6IHN0cmluZztcbiAgc2V0PzogUmVtb3RlT2JqZWN0O1xuICB2YWx1ZT86IFJlbW90ZU9iamVjdDtcbiAgd2FzVGhyb3duPzogYm9vbGVhbjtcbiAgd3JpdGFibGU/OiBib29sZWFuO1xufTtcblxuLyoqXG4gKiBIYW5kbGVzIGRhdGEgdmFsdWUgdHJhY2tpbmcgYmV0d2VlbiBDaHJvbWUgYW5kIERiZ3AuXG4gKlxuICogTWFwcyBEYmdwIHByb3BlcnRpZXMgdG8vZnJvbSBDaHJvbWUgUmVtb3RlT2JqZWN0cy5cbiAqIFJlbW90ZU9iamVjdHMgYXJlIG9ubHkgdmFsaWQgd2hpbGUgdGhlIGRlYnVnZ2VlIGlzIHBhdXNlZC5cbiAqIE9uY2UgdGhlIGRlYnVnZ2VlIHJlc3VtZXMsIGFsbCBSZW1vdGVPYmplY3RzIGJlY29tZSBpbnZhbGlkLlxuICovXG5jbGFzcyBEYXRhQ2FjaGUge1xuICBfc29ja2V0OiBEYmdwU29ja2V0O1xuICBfZW5hYmxlZDogYm9vbGVhbjtcbiAgX2VuYWJsZUNvdW50OiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3Ioc29ja2V0OiBEYmdwU29ja2V0KSB7XG4gICAgdGhpcy5fc29ja2V0ID0gc29ja2V0O1xuICAgIHRoaXMuX2VuYWJsZUNvdW50ID0gMDtcbiAgICB0aGlzLl9lbmFibGVkID0gZmFsc2U7XG4gIH1cblxuICBkaXNhYmxlKCk6IHZvaWQge1xuICAgIHRoaXMuX2VuYWJsZWQgPSBmYWxzZTtcbiAgfVxuXG4gIGlzRW5hYmxlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fZW5hYmxlZDtcbiAgfVxuXG4gIGVuYWJsZSgpOiB2b2lkIHtcbiAgICB0aGlzLl9lbmFibGVDb3VudCArPSAxO1xuICAgIHRoaXMuX2VuYWJsZWQgPSB0cnVlO1xuICB9XG5cbiAgYXN5bmMgZ2V0U2NvcGVzRm9yRnJhbWUoZnJhbWVJbmRleDogbnVtYmVyKTogUHJvbWlzZTxTY29wZT4ge1xuICAgIGlmICghdGhpcy5pc0VuYWJsZWQoKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNdXN0IGJlIGVuYWJsZWQgdG8gZ2V0IHNjb3Blcy4nKTtcbiAgICB9XG4gICAgdmFyIGNvbnRleHRzID0gYXdhaXQgdGhpcy5fc29ja2V0LmdldENvbnRleHRzRm9yRnJhbWUoZnJhbWVJbmRleCk7XG4gICAgcmV0dXJuIGNvbnRleHRzLm1hcChjb250ZXh0ID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG9iamVjdDogdGhpcy5fcmVtb3RlT2JqZWN0T2ZDb250ZXh0KGZyYW1lSW5kZXgsIGNvbnRleHQpLFxuICAgICAgICB0eXBlOiBjb250ZXh0TmFtZVRvU2NvcGVUeXBlKGNvbnRleHQubmFtZSksXG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgX3JlbW90ZU9iamVjdE9mQ29udGV4dChmcmFtZUluZGV4OiBudW1iZXIsIGNvbnRleHQ6IERiZ3BDb250ZXh0KTogUmVtb3RlT2JqZWN0IHtcbiAgICByZXR1cm4ge1xuICAgICAgZGVzY3JpcHRpb246IGNvbnRleHQubmFtZSxcbiAgICAgIHR5cGU6ICdvYmplY3QnLFxuICAgICAgb2JqZWN0SWQ6IHJlbW90ZU9iamVjdElkT2ZPYmplY3RJZCh0aGlzLl9vYmplY3RJZE9mQ29udGV4dChmcmFtZUluZGV4LCBjb250ZXh0KSksXG4gICAgfTtcbiAgfVxuXG4gIF9vYmplY3RJZE9mQ29udGV4dChmcmFtZUluZGV4OiBudW1iZXIsIGNvbnRleHQ6IERiZ3BDb250ZXh0KTogUmVtb3RlT2JqZWN0SWQge1xuICAgIHJldHVybiBjcmVhdGVDb250ZXh0T2JqZWN0SWQodGhpcy5fZW5hYmxlQ291bnQsIGZyYW1lSW5kZXgsIGNvbnRleHQuaWQpO1xuICB9XG5cbiAgYXN5bmMgZ2V0UHJvcGVydGllcyhyZW1vdGVJZDogUmVtb3RlT2JqZWN0SWQpOiBQcm9taXNlPEFycmF5PFByb3BlcnR5RGVzY3JpcHRvcj4+IHtcbiAgICB2YXIgaWQgPSBKU09OLnBhcnNlKHJlbW90ZUlkKTtcbiAgICBpZiAoaWQuZW5hYmxlQ291bnQgIT09IHRoaXMuX2VuYWJsZUNvdW50KSB7XG4gICAgICBsb2dFcnJvckFuZFRocm93KGBHb3QgcmVxdWVzdCBmb3Igc3RhbGUgUmVtb3RlT2JqZWN0SWQgJHtyZW1vdGVJZH1gKTtcbiAgICB9XG5cbiAgICAvLyBjb250ZXh0IGFuZCBzaW5nbGUgcGFnZWQgaWRzIHJlcXVpcmUgZ2V0dGluZyBjaGlsZHJlbiBmcm9tIHRoZSBkZWJ1Z2dlZSBhbmQgY29udmVydGluZ1xuICAgIC8vIHRoZW0gZnJvbSBkYmdwIHRvIGNocm9tZSBmb3JtYXQuXG4gICAgaWYgKGlzQ29udGV4dE9iamVjdElkKGlkKSkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX2dldENvbnRleHRQcm9wZXJ0aWVzKGlkKTtcbiAgICB9IGVsc2UgaWYgKGlzUGFnZWRPYmplY3RJZChpZCkpe1xuICAgICAgLy8gUGFnZWQgaWQncyBjaGlsZHJlbiBhcmUgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gY2hyb21lIGZvcm1hdCBmcm9tIHRoZSBjb250ZW50cyBvZiB0aGVcbiAgICAgIC8vIG9iamVjdCBpZC4gRG9lcyBub3QgcmVxdWlyZSBnb2luZyB0byB0aGUgZGVidWdnZWUuXG4gICAgICByZXR1cm4gZ2V0UGFnZWRQcm9wZXJ0aWVzKGlkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX2dldFNpbmdsZVBhZ2VPZlByb3BlcnRpZXMoaWQpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIF9nZXRTaW5nbGVQYWdlT2ZQcm9wZXJ0aWVzKGlkOiBPYmplY3RJZCk6IFByb21pc2U8QXJyYXk8UHJvcGVydHlEZXNjcmlwdG9yPj4ge1xuICAgIHZhciBwcm9wZXJ0aWVzID0gYXdhaXQgdGhpcy5fc29ja2V0LmdldFByb3BlcnRpZXNCeUZ1bGxuYW1lKGlkLmZyYW1lSW5kZXgsIGlkLmNvbnRleHRJZCwgaWQuZnVsbG5hbWUsIGlkLnBhZ2UpO1xuICAgIHJldHVybiBjb252ZXJ0UHJvcGVydGllcyhpZCwgcHJvcGVydGllcyk7XG4gIH1cblxuICBhc3luYyBfZ2V0Q29udGV4dFByb3BlcnRpZXMoaWQ6IE9iamVjdElkKTogUHJvbWlzZTxBcnJheTxQcm9wZXJ0eURlc2NyaXB0b3I+PiB7XG4gICAgdmFyIHByb3BlcnRpZXMgPSBhd2FpdCB0aGlzLl9zb2NrZXQuZ2V0Q29udGV4dFByb3BlcnRpZXMoaWQuZnJhbWVJbmRleCwgaWQuY29udGV4dElkKTtcbiAgICByZXR1cm4gY29udmVydFByb3BlcnRpZXMoaWQsIHByb3BlcnRpZXMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbnRleHROYW1lVG9TY29wZVR5cGUobmFtZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgc3dpdGNoIChuYW1lKSB7XG4gIGNhc2UgJ0xvY2Fscyc6XG4gICAgcmV0dXJuICdsb2NhbCc7XG4gIGNhc2UgJ1N1cGVyZ2xvYmFscyc6XG4gICAgcmV0dXJuICdnbG9iYWwnO1xuICBjYXNlICdVc2VyIGRlZmluZWQgY29uc3RhbnRzJzpcbiAgICByZXR1cm4gJ2dsb2JhbCc7XG4gIC8vIFRPRE86IFZlcmlmeSB0aGlzIC4uLlxuICBkZWZhdWx0OlxuICAgIGxvZyhgVW5leHBlY3RlZCBjb250ZXh0IG5hbWU6ICR7bmFtZX1gKTtcbiAgICByZXR1cm4gJ2Nsb3N1cmUnO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRGF0YUNhY2hlO1xuIl19
