
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _require = require('./utils');

var log = _require.log;

var _require2 = require('./ObjectId');

var remoteObjectIdOfObjectId = _require2.remoteObjectIdOfObjectId;
var endIndexOfObjectId = _require2.endIndexOfObjectId;
var startIndexOfObjectId = _require2.startIndexOfObjectId;
var countOfObjectId = _require2.countOfObjectId;
var getChildIds = _require2.getChildIds;

var _require3 = require('./values');

var convertValue = _require3.convertValue;

function convertProperties(id, properties) {
  log('Got properties: ' + JSON.stringify(properties));
  return properties.map(function (property) {
    return convertProperty(id, property);
  });
}

/**
 * Converts a DbgpProperty to a Chrome PropertyDescriptor.
 */
function convertProperty(contextId, dbgpProperty) {
  log('Converting to Chrome property: ' + JSON.stringify(dbgpProperty));
  var result = {
    configurable: false,
    enumerable: true,
    name: dbgpProperty.$.name,
    value: convertValue(contextId, dbgpProperty)
  };
  return result;
}

/**
 * Given an ObjectId for a multi page object, gets PropertyDescriptors
 * for the object's children.
 */
function getPagedProperties(pagedId) {
  var pagesize = pagedId.elementRange.pagesize;
  var endIndex = endIndexOfObjectId(pagedId);

  var childIds = getChildIds(pagedId);
  return childIds.map(function (childId) {
    var childStartIndex = startIndexOfObjectId(childId, pagesize);
    var childCount = countOfObjectId(childId, pagesize, endIndex);
    return {
      configurable: false,
      enumerable: true,
      name: 'Elements(' + childStartIndex + '..' + (childStartIndex + childCount - 1) + ')',
      value: {
        description: childCount + ' elements',
        type: 'object',
        objectId: remoteObjectIdOfObjectId(childId)
      }
    };
  });
}

module.exports = {
  convertProperties: convertProperties,
  convertProperty: convertProperty,
  getPagedProperties: getPagedProperties
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWRlYnVnZ2VyLWhodm0tcHJveHkvbGliL3Byb3BlcnRpZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxDQUFDOzs7Ozs7Ozs7O2VBWUEsT0FBTyxDQUFDLFNBQVMsQ0FBQzs7SUFBekIsR0FBRyxZQUFILEdBQUc7O2dCQU9KLE9BQU8sQ0FBQyxZQUFZLENBQUM7O0lBTHZCLHdCQUF3QixhQUF4Qix3QkFBd0I7SUFDeEIsa0JBQWtCLGFBQWxCLGtCQUFrQjtJQUNsQixvQkFBb0IsYUFBcEIsb0JBQW9CO0lBQ3BCLGVBQWUsYUFBZixlQUFlO0lBQ2YsV0FBVyxhQUFYLFdBQVc7O2dCQUdRLE9BQU8sQ0FBQyxVQUFVLENBQUM7O0lBQW5DLFlBQVksYUFBWixZQUFZOztBQUVqQixTQUFTLGlCQUFpQixDQUFDLEVBQVksRUFBRSxVQUErQixFQUE2QjtBQUNuRyxLQUFHLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0FBQ3JELFNBQU8sVUFBVSxDQUFDLEdBQUcsQ0FBQyxVQUFBLFFBQVE7V0FBSSxlQUFlLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQztHQUFBLENBQUMsQ0FBQztDQUNsRTs7Ozs7QUFLRCxTQUFTLGVBQWUsQ0FBQyxTQUFtQixFQUFFLFlBQTBCLEVBQXNCO0FBQzVGLEtBQUcsQ0FBQyxpQ0FBaUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7QUFDdEUsTUFBSSxNQUFNLEdBQUc7QUFDWCxnQkFBWSxFQUFFLEtBQUs7QUFDbkIsY0FBVSxFQUFFLElBQUk7QUFDaEIsUUFBSSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSTtBQUN6QixTQUFLLEVBQUUsWUFBWSxDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUM7R0FDN0MsQ0FBQztBQUNGLFNBQU8sTUFBTSxDQUFDO0NBQ2Y7Ozs7OztBQU1ELFNBQVMsa0JBQWtCLENBQUMsT0FBaUIsRUFBNkI7QUFDeEUsTUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUM7QUFDN0MsTUFBSSxRQUFRLEdBQUcsa0JBQWtCLENBQUMsT0FBTyxDQUFDLENBQUM7O0FBRTNDLE1BQUksUUFBUSxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNwQyxTQUFPLFFBQVEsQ0FBQyxHQUFHLENBQUMsVUFBQSxPQUFPLEVBQUk7QUFDN0IsUUFBSSxlQUFlLEdBQUcsb0JBQW9CLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQzlELFFBQUksVUFBVSxHQUFHLGVBQWUsQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQzlELFdBQU87QUFDTCxrQkFBWSxFQUFFLEtBQUs7QUFDbkIsZ0JBQVUsRUFBRSxJQUFJO0FBQ2hCLFVBQUksZ0JBQWMsZUFBZSxXQUFLLGVBQWUsR0FBRyxVQUFVLEdBQUcsQ0FBQyxDQUFBLE1BQUc7QUFDekUsV0FBSyxFQUFFO0FBQ0wsbUJBQVcsRUFBSyxVQUFVLGNBQVc7QUFDckMsWUFBSSxFQUFFLFFBQVE7QUFDZCxnQkFBUSxFQUFFLHdCQUF3QixDQUFDLE9BQU8sQ0FBQztPQUM1QztLQUNGLENBQUM7R0FDSCxDQUFDLENBQUM7Q0FDSjs7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHO0FBQ2YsbUJBQWlCLEVBQWpCLGlCQUFpQjtBQUNqQixpQkFBZSxFQUFmLGVBQWU7QUFDZixvQkFBa0IsRUFBbEIsa0JBQWtCO0NBQ25CLENBQUMiLCJmaWxlIjoiL3Zhci9mb2xkZXJzL3hmL3JzcGg0X2M1NzMxNXJzNTd4eHNkc2tyeG52MzZ0MC9UL3RtcGVtbTJIdXB1Ymxpc2hfcGFja2FnZXMvbnBtL251Y2xpZGUtZGVidWdnZXItaGh2bS1wcm94eS9saWIvcHJvcGVydGllcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cblxudmFyIHtsb2d9ID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIHtcbiAgcmVtb3RlT2JqZWN0SWRPZk9iamVjdElkLFxuICBlbmRJbmRleE9mT2JqZWN0SWQsXG4gIHN0YXJ0SW5kZXhPZk9iamVjdElkLFxuICBjb3VudE9mT2JqZWN0SWQsXG4gIGdldENoaWxkSWRzLFxufSA9IHJlcXVpcmUoJy4vT2JqZWN0SWQnKTtcblxudmFyIHtjb252ZXJ0VmFsdWV9ID0gcmVxdWlyZSgnLi92YWx1ZXMnKTtcblxuZnVuY3Rpb24gY29udmVydFByb3BlcnRpZXMoaWQ6IE9iamVjdElkLCBwcm9wZXJ0aWVzOiBBcnJheTxEYmdwUHJvcGVydHk+KTogQXJyYXk8UHJvcGVydHlEZXNjcmlwdG9yPiB7XG4gIGxvZygnR290IHByb3BlcnRpZXM6ICcgKyBKU09OLnN0cmluZ2lmeShwcm9wZXJ0aWVzKSk7XG4gIHJldHVybiBwcm9wZXJ0aWVzLm1hcChwcm9wZXJ0eSA9PiBjb252ZXJ0UHJvcGVydHkoaWQsIHByb3BlcnR5KSk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBEYmdwUHJvcGVydHkgdG8gYSBDaHJvbWUgUHJvcGVydHlEZXNjcmlwdG9yLlxuICovXG5mdW5jdGlvbiBjb252ZXJ0UHJvcGVydHkoY29udGV4dElkOiBPYmplY3RJZCwgZGJncFByb3BlcnR5OiBEYmdwUHJvcGVydHkpOiBQcm9wZXJ0eURlc2NyaXB0b3Ige1xuICBsb2coJ0NvbnZlcnRpbmcgdG8gQ2hyb21lIHByb3BlcnR5OiAnICsgSlNPTi5zdHJpbmdpZnkoZGJncFByb3BlcnR5KSk7XG4gIHZhciByZXN1bHQgPSB7XG4gICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIG5hbWU6IGRiZ3BQcm9wZXJ0eS4kLm5hbWUsXG4gICAgdmFsdWU6IGNvbnZlcnRWYWx1ZShjb250ZXh0SWQsIGRiZ3BQcm9wZXJ0eSksXG4gIH07XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogR2l2ZW4gYW4gT2JqZWN0SWQgZm9yIGEgbXVsdGkgcGFnZSBvYmplY3QsIGdldHMgUHJvcGVydHlEZXNjcmlwdG9yc1xuICogZm9yIHRoZSBvYmplY3QncyBjaGlsZHJlbi5cbiAqL1xuZnVuY3Rpb24gZ2V0UGFnZWRQcm9wZXJ0aWVzKHBhZ2VkSWQ6IE9iamVjdElkKTogQXJyYXk8UHJvcGVydHlEZXNjcmlwdG9yPiB7XG4gIHZhciBwYWdlc2l6ZSA9IHBhZ2VkSWQuZWxlbWVudFJhbmdlLnBhZ2VzaXplO1xuICB2YXIgZW5kSW5kZXggPSBlbmRJbmRleE9mT2JqZWN0SWQocGFnZWRJZCk7XG5cbiAgdmFyIGNoaWxkSWRzID0gZ2V0Q2hpbGRJZHMocGFnZWRJZCk7XG4gIHJldHVybiBjaGlsZElkcy5tYXAoY2hpbGRJZCA9PiB7XG4gICAgdmFyIGNoaWxkU3RhcnRJbmRleCA9IHN0YXJ0SW5kZXhPZk9iamVjdElkKGNoaWxkSWQsIHBhZ2VzaXplKTtcbiAgICB2YXIgY2hpbGRDb3VudCA9IGNvdW50T2ZPYmplY3RJZChjaGlsZElkLCBwYWdlc2l6ZSwgZW5kSW5kZXgpO1xuICAgIHJldHVybiB7XG4gICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIG5hbWU6IGBFbGVtZW50cygke2NoaWxkU3RhcnRJbmRleH0uLiR7Y2hpbGRTdGFydEluZGV4ICsgY2hpbGRDb3VudCAtIDF9KWAsXG4gICAgICB2YWx1ZToge1xuICAgICAgICBkZXNjcmlwdGlvbjogYCR7Y2hpbGRDb3VudH0gZWxlbWVudHNgLFxuICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgb2JqZWN0SWQ6IHJlbW90ZU9iamVjdElkT2ZPYmplY3RJZChjaGlsZElkKSxcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNvbnZlcnRQcm9wZXJ0aWVzLFxuICBjb252ZXJ0UHJvcGVydHksXG4gIGdldFBhZ2VkUHJvcGVydGllcyxcbn07XG4iXX0=
