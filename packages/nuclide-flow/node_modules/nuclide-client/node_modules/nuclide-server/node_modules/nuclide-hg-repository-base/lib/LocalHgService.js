var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

'use babel';

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _require = require('nuclide-commons');

var debounce = _require.debounce;

var DelayedEventManager = require('./DelayedEventManager');
var watchman = require('fb-watchman');
var fs = require('fs');
var LocalHgServiceBase = require('./LocalHgServiceBase');
var logger = require('nuclide-logging').getLogger();

var _require2 = require('nuclide-watchman-helpers');

var getWatchmanBinaryPath = _require2.getWatchmanBinaryPath;

var path = require('path');

var WATCHMAN_SUBSCRIPTION_NAME_PRIMARY = 'hg-repository-watchman-subscription-primary';
var WATCHMAN_SUBSCRIPTION_NAME_HGIGNORE = 'hg-repository-watchman-subscription-hgignore';
var WATCHMAN_SUBSCRIPTION_NAME_HGLOCK = 'hg-repository-watchman-subscription-hglock';
var WATCHMAN_SUBSCRIPTION_NAME_HGDIRSTATE = 'hg-repository-watchman-subscription-hgdirstate';
var WATCHMAN_SUBSCRIPTION_NAME_HGBOOKMARK = 'hg-repository-watchman-subscription-hgbookmark';
var WATCHMAN_SUBSCRIPTION_NAME_ARC_BUILD_LOCK = 'arc-build-lock';
var EVENT_DELAY_IN_MS = 1000;

function getArcBuildLockFile() {
  var lockFile;
  try {
    lockFile = require('./fb/config').arcBuildLockFile;
  } catch (e) {
    // purposely blank
  }
  return lockFile;
}

/**
 * @return Array of additional watch expressions to apply to the primary
 *   watchman subscription.
 */
function getPrimaryWatchmanSubscriptionRefinements() {
  var refinements = [];
  try {
    refinements = require('./fb/config').primaryWatchSubscriptionRefinements;
  } catch (e) {
    // purposely blank
  }
  return refinements;
}

// To make LocalHgServiceBase more easily testable, the watchman dependency is
// broken out. We add the watchman dependency here.

var LocalHgService = (function (_LocalHgServiceBase) {
  _inherits(LocalHgService, _LocalHgServiceBase);

  function LocalHgService(options) {
    _classCallCheck(this, LocalHgService);

    _get(Object.getPrototypeOf(LocalHgService.prototype), 'constructor', this).call(this, options);
    this._delayedEventManager = new DelayedEventManager(setTimeout, clearTimeout);
    this._lockFileHeld = false;
    this._shouldUseDirstate = true;
    this._subscribeToWatchman();
  }

  _createClass(LocalHgService, [{
    key: 'destroy',
    value: function destroy() {
      this._cleanUpWatchman();
      this._delayedEventManager.dispose();
      if (this._dirstateDelayedEventManager) {
        this._dirstateDelayedEventManager.dispose();
      }
      _get(Object.getPrototypeOf(LocalHgService.prototype), 'destroy', this).call(this);
    }
  }, {
    key: '_subscribeToWatchman',
    value: _asyncToGenerator(function* () {
      var _this = this;

      this._watchmanClient = new watchman.Client({
        watchmanBinaryPath: yield getWatchmanBinaryPath()
      });
      var workingDirectory = this.getWorkingDirectory();
      this._watchmanClient.command(['watch', workingDirectory], function (watchError, watchResp) {
        if (watchError) {
          logger.error('Error initiating watchman watch: ' + watchError);
          return;
        }
        // By default, watchman will deliver a list of all current files when you
        // first subscribe. We don't want this behavior, so we issue a `clock`
        // command to give a logical time constraint on the subscription.
        // This is recommended by https://www.npmjs.com/package/fb-watchman.
        _this._watchmanClient.command(['clock', workingDirectory], function (clockError, clockResp) {
          if (clockError) {
            logger.error('Failed to query watchman clock: ', clockError);
            return;
          }

          var primarySubscriptionExpression = ['allof', ['not', ['dirname', '.hg']], ['not', ['name', '.hgignore', 'wholename']],
          // Hg appears to modify temporary files that begin with these
          // prefixes, every time a file is saved.
          // TODO (t7832809) Remove this when it is unnecessary.
          ['not', ['match', 'hg-checkexec-*', 'wholename']], ['not', ['match', 'hg-checklink-*', 'wholename']],
          // This watchman subscription is used to determine when and which
          // files to fetch new statuses for. There is no reason to include
          // directories in these updates, and in fact they may make us overfetch
          // statuses. (See diff summary of D2021498.)
          // This line restricts this subscription to only return files.
          ['type', 'f']];
          primarySubscriptionExpression = primarySubscriptionExpression.concat(getPrimaryWatchmanSubscriptionRefinements());

          // Subscribe to changes to files unrelated to source control.
          _this._watchmanClient.command(['subscribe', workingDirectory, WATCHMAN_SUBSCRIPTION_NAME_PRIMARY, {
            fields: ['name', 'exists', 'new'],
            expression: primarySubscriptionExpression,
            since: clockResp.clock
          }], function (subscribeError, subscribeResp) {
            if (subscribeError) {
              logger.error('Failed to subscribe to ' + WATCHMAN_SUBSCRIPTION_NAME_PRIMARY + ' with clock limit: ', subscribeError);
              return;
            }
            logger.debug('Watchman subscription ' + WATCHMAN_SUBSCRIPTION_NAME_PRIMARY + ' established.');
          });

          // Subscribe to changes to .hgignore files.
          _this._watchmanClient.command(['subscribe', workingDirectory, WATCHMAN_SUBSCRIPTION_NAME_HGIGNORE, {
            fields: ['name'],
            expression: ['name', '.hgignore', 'wholename'],
            since: clockResp.clock
          }], function (subscribeError, subscribeResp) {
            if (subscribeError) {
              logger.error('Failed to subscribe to ' + WATCHMAN_SUBSCRIPTION_NAME_HGIGNORE + ' with clock limit: ', subscribeError);
              return;
            }
            logger.debug('Watchman subscription ' + WATCHMAN_SUBSCRIPTION_NAME_HGIGNORE + ' established.');
          });

          // Subscribe to changes to the source control lock file.
          _this._watchmanClient.command(['subscribe', workingDirectory, WATCHMAN_SUBSCRIPTION_NAME_HGLOCK, {
            fields: ['name', 'exists'],
            expression: ['name', '.hg/wlock', 'wholename'],
            since: clockResp.clock,
            defer_vcs: false
          }], function (subscribeError, subscribeResp) {
            if (subscribeError) {
              logger.error('Failed to subscribe to ' + WATCHMAN_SUBSCRIPTION_NAME_HGLOCK + ' with clock limit: ', subscribeError);
              return;
            }
            logger.debug('Watchman subscription ' + WATCHMAN_SUBSCRIPTION_NAME_HGLOCK + ' established.');
          });

          // Subscribe to changes to the source control directory state file.
          _this._watchmanClient.command(['subscribe', workingDirectory, WATCHMAN_SUBSCRIPTION_NAME_HGDIRSTATE, {
            fields: ['name', 'exists'],
            expression: ['name', '.hg/dirstate', 'wholename'],
            since: clockResp.clock,
            defer_vcs: false
          }], function (subscribeError, subscribeResp) {
            if (subscribeError) {
              logger.error('Failed to subscribe to ' + WATCHMAN_SUBSCRIPTION_NAME_HGDIRSTATE + ' with clock limit: ', subscribeError);
              return;
            }
            logger.debug('Watchman subscription ' + WATCHMAN_SUBSCRIPTION_NAME_HGDIRSTATE + ' established.');
          });

          // Subscribe to changes in the current Hg bookmark.
          _this._watchmanClient.command(['subscribe', workingDirectory, WATCHMAN_SUBSCRIPTION_NAME_HGBOOKMARK, {
            fields: ['name', 'exists'],
            expression: ['name', '.hg/bookmarks.current', 'wholename'],
            since: clockResp.clock,
            defer_vcs: false
          }], function (subscribeError, subscribeResp) {
            if (subscribeError) {
              logger.error('Failed to subscribe to ' + WATCHMAN_SUBSCRIPTION_NAME_HGBOOKMARK + ' with clock limit: ', subscribeError);
              return;
            }
            logger.debug('Watchman subscription ' + WATCHMAN_SUBSCRIPTION_NAME_HGBOOKMARK + ' established.');
          });

          // Subscribe to changes to a file that appears to be the 'arc build' lock file.
          var arcBuildLockFile = getArcBuildLockFile();
          if (arcBuildLockFile) {
            _this._watchmanClient.command(['subscribe', workingDirectory, WATCHMAN_SUBSCRIPTION_NAME_ARC_BUILD_LOCK, {
              fields: ['name', 'exists'],
              expression: ['name', arcBuildLockFile, 'wholename'],
              since: clockResp.clock
            }], function (subscribeError, subscribeResp) {
              if (subscribeError) {
                logger.error('Failed to subscribe to ' + WATCHMAN_SUBSCRIPTION_NAME_ARC_BUILD_LOCK + ' with clock limit: ', subscribeError);
                return;
              }
              logger.debug('Watchman subscription ' + WATCHMAN_SUBSCRIPTION_NAME_ARC_BUILD_LOCK + ' established.');
            });
          }
        });

        // Mercurial creates the .hg/wlock file before it modifies the working directory,
        // and deletes it when it's done. We want to ignore the watchman updates
        // caused by these modifications, so we do two things:
        // 1. The first level of defense is to watch for the creation and deletion of
        // the wlock and ignore events accordingly.
        // However, the watchman update for the files that have changed
        // due to the Mercurial action may arrive before the update for the wlock
        // file.
        // To work around this, we introduce an artificial delay for the watchman
        // updates for our files of interest, which allows time for a wlock watchman
        // update (if any) to arrive and cancel them.
        // This may occasionally result in a false positive: cancelling events that
        // were generated by a user action (not Mercurial) that occur shortly before
        // Mercurial modifies the working directory. But this should be fine,
        // because the client of LocalHgService should be reacting to the
        // 'onHgRepoStateDidChange' event that follows the Mercurial event.
        // 2. The wlock is surest way to detect the beginning and end of events. But
        // because it is a transient file, watchman may not pick up on it, especially
        // if the Mercurial action is quick (e.g. a commit, as opposed to a rebase).
        // In this case we fall back on watching the dirstate, which is a persistent
        // file that is written to whenever Mercurial updates the state of the working
        // directory (except reverts -- but this will also modify the state of the
        // relevant files). The dirstate gets modified in the middle of an update
        // and at the end, but not the beginning. Therefore it's a bit noisier of
        // a signal, and is prone to both false positives and negatives.
        _this._watchmanClient.on('subscription', function (update) {
          if (update.subscription === WATCHMAN_SUBSCRIPTION_NAME_PRIMARY) {
            _this._delayedEventManager.addEvent(_this._filesDidChange.bind(_this, update), EVENT_DELAY_IN_MS);
          } else if (update.subscription === WATCHMAN_SUBSCRIPTION_NAME_HGIGNORE) {
            // There are three events that may outdate the status of ignored files.
            // 1. The .hgignore file changes. In this case, we want to run a fresh 'hg status -i'.
            // 2. A file is added that meets the criteria under .hgignore. In this case, we can
            //    scope the 'hg status -i' call to just the added file.
            // 3. A file that was previously ignored, has been deleted. (A bit debatable in this
            //    case what ::isPathIgnored should return if the file doesn't exist. But let's
            //    at least keep the local cache updated.) In this case, we just want to remove
            //    the deleted file if it is in the cache.
            // Case 1 is covered by the response to WATCHMAN_SUBSCRIPTION_NAME_HGIGNORE firing.
            // Cases 2 and 3 are covered by the response to WATCHMAN_SUBSCRIPTION_NAME_PRIMARY firing.
            _this._delayedEventManager.addEvent(_this._hgIgnoreFileDidChange.bind(_this), EVENT_DELAY_IN_MS);
          } else if (update.subscription === WATCHMAN_SUBSCRIPTION_NAME_HGLOCK || update.subscription === WATCHMAN_SUBSCRIPTION_NAME_ARC_BUILD_LOCK) {
            var lockfile = update.files[0];
            if (lockfile.exists) {
              // TODO: Implement a timer to unset this, in case watchman update
              // fails to notify of the removal of the lock. I haven't seen this
              // in practice but it's better to be safe.
              _this._lockFileHeld = true;
              // The lock being created is a definitive start to a Mercurial action/arc build.
              // Block the effects from any dirstate change, which is a fuzzier signal.
              _this._shouldUseDirstate = false;
              _this._delayedEventManager.setCanAcceptEvents(false);
              _this._delayedEventManager.cancelAllEvents();
            } else {
              _this._lockFileHeld = false;
              _this._delayedEventManager.setCanAcceptEvents(true);
              // The lock being deleted is a definitive end to a Mercurial action/arc build.
              // Block the effects from any dirstate change, which is a fuzzier signal.
              _this._shouldUseDirstate = false;
            }
            _this._hgLockDidChange(lockfile.exists);
          } else if (update.subscription === WATCHMAN_SUBSCRIPTION_NAME_HGDIRSTATE) {
            // We don't know whether the change to the dirstate is at the middle or end
            // of a Mercurial action. But we would rather have false positives (ignore
            // some user-generated events that occur near a Mercurial event) than false
            // negatives (register irrelevant Mercurial events).
            // Each time this watchman update fires, we will make the LocalHgService
            // ignore events for a certain grace period.

            // A lock file is a more reliable signal, so defer to it.
            if (_this._lockFileHeld) {
              return;
            }

            _this._shouldUseDirstate = true;
            _this._delayedEventManager.setCanAcceptEvents(false);
            _this._delayedEventManager.cancelAllEvents();
            if (!_this._allowEventsAgain) {
              _this._allowEventsAgain = debounce(function () {
                if (_this._shouldUseDirstate) {
                  _this._delayedEventManager.setCanAcceptEvents(true);
                  _this._hgDirstateDidChange();
                }
              }, EVENT_DELAY_IN_MS);
            }
            _this._allowEventsAgain();
          } else if (update.subscription === WATCHMAN_SUBSCRIPTION_NAME_HGBOOKMARK) {
            _this._hgBookmarkDidChange();
          }
        });
      });
    })
  }, {
    key: '_cleanUpWatchman',
    value: function _cleanUpWatchman() {
      if (this._watchmanClient) {
        this._watchmanClient.command(['unsubscribe', this.getWorkingDirectory(), WATCHMAN_SUBSCRIPTION_NAME_PRIMARY]);
        this._watchmanClient.command(['unsubscribe', this.getWorkingDirectory(), WATCHMAN_SUBSCRIPTION_NAME_HGIGNORE]);
        this._watchmanClient.command(['unsubscribe', this.getWorkingDirectory(), WATCHMAN_SUBSCRIPTION_NAME_HGLOCK]);
        this._watchmanClient.command(['unsubscribe', this.getWorkingDirectory(), WATCHMAN_SUBSCRIPTION_NAME_HGDIRSTATE]);
        this._watchmanClient.command(['unsubscribe', this.getWorkingDirectory(), WATCHMAN_SUBSCRIPTION_NAME_HGBOOKMARK]);
        this._watchmanClient.end();
      }
    }

    /**
     * @param update The latest watchman update.
     */
  }, {
    key: '_filesDidChange',
    value: function _filesDidChange(update) {
      var workingDirectory = this.getWorkingDirectory();
      var changedFiles = update.files.map(function (file) {
        return path.join(workingDirectory, file.name);
      });
      this._emitter.emit('files-changed', changedFiles);
    }
  }, {
    key: '_hgIgnoreFileDidChange',
    value: function _hgIgnoreFileDidChange() {
      this._emitter.emit('hg-ignore-changed');
    }
  }, {
    key: '_hgLockDidChange',
    value: function _hgLockDidChange(lockExists) {
      if (!lockExists) {
        this._emitHgRepoStateChanged();
      }
    }
  }, {
    key: '_hgDirstateDidChange',
    value: function _hgDirstateDidChange() {
      this._emitHgRepoStateChanged();
    }
  }, {
    key: '_emitHgRepoStateChanged',
    value: function _emitHgRepoStateChanged() {
      // Currently there is no use case for alerting clients of the beginning of
      // the state change, so this event only alerts them of the end.
      this._emitter.emit('hg-repo-state-changed');
    }
  }, {
    key: '_hgBookmarkDidChange',
    value: function _hgBookmarkDidChange() {
      this._emitter.emit('hg-bookmark-changed');
    }
  }]);

  return LocalHgService;
})(LocalHgServiceBase);

module.exports = LocalHgService;
//# sourceMappingURL=data:application/json;base64,
