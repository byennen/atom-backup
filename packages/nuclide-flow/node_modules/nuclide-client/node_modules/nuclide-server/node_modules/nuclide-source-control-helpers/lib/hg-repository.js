
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var path = require('path');

/**
 * This function returns HgRepositoryDescription filled with a repoPath and
 * originURL iff it finds that the given directory is within an Hg repository.
 */
function findHgRepository(directoryPath) {
  var fs = require('fs-plus');
  var workingDirectoryPath = directoryPath;
  var repoPath = null;
  var originURL = null;
  /*eslint-disable no-constant-condition */
  while (true) {
    var dirToTest = path.join(workingDirectoryPath, '.hg');
    if (fs.isDirectorySync(dirToTest) && fs.isFileSync(path.join(dirToTest, 'hgrc'))) {
      var ini = require('ini');
      // I'm not quite sure why this header is required, but I copied this
      // from the npm page to make things work: https://www.npmjs.com/package/ini.
      var header = 'scope = global\n';
      var config = ini.parse(header + fs.readFileSync(path.join(dirToTest, 'hgrc')));
      if (typeof config.paths['default'] === 'string') {
        repoPath = dirToTest;
        originURL = config.paths['default'];
        break;
      }
    }

    if (isRootDir(workingDirectoryPath)) {
      break;
    } else {
      workingDirectoryPath = getParentDir(workingDirectoryPath);
    }
  }
  /*eslint-enable no-constant-condition */
  return { repoPath: repoPath, originURL: originURL, workingDirectoryPath: workingDirectoryPath };
}

function isRootDir(directoryPath) {
  var isRoot = require('nuclide-commons').fsPromise.isRoot;

  return isRoot(directoryPath);
}

function getParentDir(directoryPath) {
  return path.resolve(directoryPath, '..');
}

module.exports = findHgRepository;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXNvdXJjZS1jb250cm9sLWhlbHBlcnMvbGliL2hnLXJlcG9zaXRvcnkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxDQUFDOzs7Ozs7Ozs7O0FBV1osSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDOzs7Ozs7QUFZM0IsU0FBUyxnQkFBZ0IsQ0FBQyxhQUFxQixFQUEyQjtBQUN4RSxNQUFJLEVBQUUsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDNUIsTUFBSSxvQkFBb0IsR0FBRyxhQUFhLENBQUM7QUFDekMsTUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDO0FBQ3BCLE1BQUksU0FBUyxHQUFHLElBQUksQ0FBQzs7QUFFckIsU0FBTyxJQUFJLEVBQUU7QUFDWCxRQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3ZELFFBQUksRUFBRSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsSUFDN0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQyxFQUFFO0FBQy9DLFVBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQzs7O0FBR3pCLFVBQUksTUFBTSxHQUFHLGtCQUFrQixDQUFDO0FBQ2hDLFVBQUksTUFBTSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUN6QixFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNuRCxVQUFJLE9BQU8sTUFBTSxDQUFDLEtBQUssV0FBUSxLQUFLLFFBQVEsRUFBRTtBQUM1QyxnQkFBUSxHQUFHLFNBQVMsQ0FBQztBQUNyQixpQkFBUyxHQUFHLE1BQU0sQ0FBQyxLQUFLLFdBQVEsQ0FBQztBQUNqQyxjQUFNO09BQ1A7S0FDRjs7QUFFRCxRQUFJLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFO0FBQ25DLFlBQU07S0FDUCxNQUFNO0FBQ0wsMEJBQW9CLEdBQUcsWUFBWSxDQUFDLG9CQUFvQixDQUFDLENBQUM7S0FDM0Q7R0FDRjs7QUFFRCxTQUFPLEVBQUMsUUFBUSxFQUFSLFFBQVEsRUFBRSxTQUFTLEVBQVQsU0FBUyxFQUFFLG9CQUFvQixFQUFwQixvQkFBb0IsRUFBQyxDQUFDO0NBQ3BEOztBQUVELFNBQVMsU0FBUyxDQUFDLGFBQXFCLEVBQVc7TUFDNUMsTUFBTSxHQUFJLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLFNBQVMsQ0FBOUMsTUFBTTs7QUFDWCxTQUFPLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztDQUM5Qjs7QUFFRCxTQUFTLFlBQVksQ0FBQyxhQUFxQixFQUFVO0FBQ25ELFNBQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQUM7Q0FDMUM7O0FBRUQsTUFBTSxDQUFDLE9BQU8sR0FBRyxnQkFBZ0IsQ0FBQyIsImZpbGUiOiIvdmFyL2ZvbGRlcnMveGYvcnNwaDRfYzU3MzE1cnM1N3h4c2Rza3J4bnYzNnQwL1QvdG1wZW1tMkh1cHVibGlzaF9wYWNrYWdlcy9ucG0vbnVjbGlkZS1zb3VyY2UtY29udHJvbC1oZWxwZXJzL2xpYi9oZy1yZXBvc2l0b3J5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCc7XG4vKiBAZmxvdyAqL1xuXG4vKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpblxuICogdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxudmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5cbnR5cGUgSGdSZXBvc2l0b3J5RGVzY3JpcHRpb24gPSB7XG4gIHJlcG9QYXRoOiA/c3RyaW5nO1xuICBvcmlnaW5VUkw6ID9zdHJpbmc7XG4gIHdvcmtpbmdEaXJlY3RvcnlQYXRoOiBzdHJpbmc7XG59O1xuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBIZ1JlcG9zaXRvcnlEZXNjcmlwdGlvbiBmaWxsZWQgd2l0aCBhIHJlcG9QYXRoIGFuZFxuICogb3JpZ2luVVJMIGlmZiBpdCBmaW5kcyB0aGF0IHRoZSBnaXZlbiBkaXJlY3RvcnkgaXMgd2l0aGluIGFuIEhnIHJlcG9zaXRvcnkuXG4gKi9cbmZ1bmN0aW9uIGZpbmRIZ1JlcG9zaXRvcnkoZGlyZWN0b3J5UGF0aDogc3RyaW5nKTogSGdSZXBvc2l0b3J5RGVzY3JpcHRpb24ge1xuICB2YXIgZnMgPSByZXF1aXJlKCdmcy1wbHVzJyk7XG4gIHZhciB3b3JraW5nRGlyZWN0b3J5UGF0aCA9IGRpcmVjdG9yeVBhdGg7XG4gIHZhciByZXBvUGF0aCA9IG51bGw7XG4gIHZhciBvcmlnaW5VUkwgPSBudWxsO1xuICAvKmVzbGludC1kaXNhYmxlIG5vLWNvbnN0YW50LWNvbmRpdGlvbiAqL1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIHZhciBkaXJUb1Rlc3QgPSBwYXRoLmpvaW4od29ya2luZ0RpcmVjdG9yeVBhdGgsICcuaGcnKTtcbiAgICBpZiAoZnMuaXNEaXJlY3RvcnlTeW5jKGRpclRvVGVzdCkgJiZcbiAgICAgICAgZnMuaXNGaWxlU3luYyhwYXRoLmpvaW4oZGlyVG9UZXN0LCAnaGdyYycpKSkge1xuICAgICAgdmFyIGluaSA9IHJlcXVpcmUoJ2luaScpO1xuICAgICAgLy8gSSdtIG5vdCBxdWl0ZSBzdXJlIHdoeSB0aGlzIGhlYWRlciBpcyByZXF1aXJlZCwgYnV0IEkgY29waWVkIHRoaXNcbiAgICAgIC8vIGZyb20gdGhlIG5wbSBwYWdlIHRvIG1ha2UgdGhpbmdzIHdvcms6IGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2luaS5cbiAgICAgIHZhciBoZWFkZXIgPSAnc2NvcGUgPSBnbG9iYWxcXG4nO1xuICAgICAgdmFyIGNvbmZpZyA9IGluaS5wYXJzZShoZWFkZXIgK1xuICAgICAgICAgIGZzLnJlYWRGaWxlU3luYyhwYXRoLmpvaW4oZGlyVG9UZXN0LCAnaGdyYycpKSk7XG4gICAgICBpZiAodHlwZW9mIGNvbmZpZy5wYXRocy5kZWZhdWx0ID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXBvUGF0aCA9IGRpclRvVGVzdDtcbiAgICAgICAgb3JpZ2luVVJMID0gY29uZmlnLnBhdGhzLmRlZmF1bHQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc1Jvb3REaXIod29ya2luZ0RpcmVjdG9yeVBhdGgpKSB7XG4gICAgICBicmVhaztcbiAgICB9IGVsc2Uge1xuICAgICAgd29ya2luZ0RpcmVjdG9yeVBhdGggPSBnZXRQYXJlbnREaXIod29ya2luZ0RpcmVjdG9yeVBhdGgpO1xuICAgIH1cbiAgfVxuICAvKmVzbGludC1lbmFibGUgbm8tY29uc3RhbnQtY29uZGl0aW9uICovXG4gIHJldHVybiB7cmVwb1BhdGgsIG9yaWdpblVSTCwgd29ya2luZ0RpcmVjdG9yeVBhdGh9O1xufVxuXG5mdW5jdGlvbiBpc1Jvb3REaXIoZGlyZWN0b3J5UGF0aDogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHZhciB7aXNSb290fSA9IHJlcXVpcmUoJ251Y2xpZGUtY29tbW9ucycpLmZzUHJvbWlzZTtcbiAgcmV0dXJuIGlzUm9vdChkaXJlY3RvcnlQYXRoKTtcbn1cblxuZnVuY3Rpb24gZ2V0UGFyZW50RGlyKGRpcmVjdG9yeVBhdGg6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBwYXRoLnJlc29sdmUoZGlyZWN0b3J5UGF0aCwgJy4uJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmluZEhnUmVwb3NpdG9yeTtcbiJdfQ==
