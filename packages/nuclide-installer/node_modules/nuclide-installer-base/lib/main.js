
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

/**
 * Installs the Atom packages specified in the config.
 * @return Promise that resolves if the installation succeeds.
 */

var installPackagesInConfig = _asyncToGenerator(function* (config) {
  var installedPackages = yield getInstalledPackages();
  var packagesToInstall = findPackagesToInstall(config, installedPackages);
  yield installApmPackages(packagesToInstall);
}

/**
 * Calls `apm ls --json`, parses the JSON written to stdout, and filters the value
 * of the `"user"` property of the JSON to produce a map of (name, version) pairs
 * that correspond to user-installed Atom packages.
 */
);

var getInstalledPackages = _asyncToGenerator(function* () {
  var _require = require('nuclide-commons');

  var asyncExecute = _require.asyncExecute;

  var apm = atom.packages.getApmPath();
  var json;
  try {
    var _ref = yield asyncExecute(apm, ['ls', '--json']);

    var stdout = _ref.stdout;

    json = stdout;
  } catch (e) {
    /*eslint-disable no-console*/
    // Write to the console because this make it easier for users to report errors.
    console.error('Could not get the list of Atom packages from ' + apm + ' ls --json.');
    /*eslint-enable no-console*/
    throw Error(apm + ' ls --json failed with exit code ' + e.exitCode);
  }

  var installedPackages = {};
  JSON.parse(json)['user'].forEach(function (pkg) {
    installedPackages[pkg['name']] = pkg['version'];
  });
  return installedPackages;
});

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

function findPackagesToInstall(config, installedPackages) {
  var packagesToInstall = [];
  config.packages.forEach(function (pkg) {
    var name = pkg.name;
    var version = pkg.version;

    if (!name) {
      throw Error('Entry without a name in ' + JSON.stringify(config, null, 2));
    }
    if (!version) {
      throw Error('Entry without a version in ' + JSON.stringify(config, null, 2));
    }
    if (installedPackages[name] !== version) {
      packagesToInstall.push(name + '@' + version);
    }
  });
  return packagesToInstall;
}

/**
 * Installs the list of Atom packages serially.
 */
function installApmPackages(packages) {
  var _require2 = require('nuclide-commons');

  var asyncExecute = _require2.asyncExecute;
  var PromiseQueue = _require2.PromiseQueue;

  var queue = new PromiseQueue();
  var apm = atom.packages.getApmPath();
  var promises = [];
  packages.forEach(function (pkg) {
    var executor = function executor(resolve, reject) {
      return asyncExecute(apm, ['install', pkg]).then(resolve, reject);
    };
    var promise = queue.submit(executor);
    promises.push(promise);
  });
  return Promise.all(promises);
}

module.exports = {
  installPackagesInConfig: installPackagesInConfig,
  __test__: {
    findPackagesToInstall: findPackagesToInstall
  }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWluc3RhbGxlci1iYXNlL2xpYi9tYWluLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFdBQVcsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7O0lBMkJHLHVCQUF1QixxQkFBdEMsV0FBdUMsTUFBcUIsRUFBVztBQUNyRSxNQUFJLGlCQUFpQixHQUFHLE1BQU0sb0JBQW9CLEVBQUUsQ0FBQztBQUNyRCxNQUFJLGlCQUFpQixHQUFHLHFCQUFxQixDQUFDLE1BQU0sRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0FBQ3pFLFFBQU0sa0JBQWtCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztDQUM3Qzs7Ozs7Ozs7O0lBT2Msb0JBQW9CLHFCQUFuQyxhQUFxRjtpQkFDOUQsT0FBTyxDQUFDLGlCQUFpQixDQUFDOztNQUExQyxZQUFZLFlBQVosWUFBWTs7QUFDakIsTUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsQ0FBQztBQUNyQyxNQUFJLElBQUksQ0FBQztBQUNULE1BQUk7ZUFDYSxNQUFNLFlBQVksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7O1FBQW5ELE1BQU0sUUFBTixNQUFNOztBQUNYLFFBQUksR0FBRyxNQUFNLENBQUM7R0FDZixDQUFDLE9BQU8sQ0FBQyxFQUFFOzs7QUFHVixXQUFPLENBQUMsS0FBSyxtREFBaUQsR0FBRyxpQkFBYyxDQUFDOztBQUVoRixVQUFNLEtBQUssQ0FBSSxHQUFHLHlDQUFvQyxDQUFDLENBQUMsUUFBUSxDQUFHLENBQUM7R0FDckU7O0FBRUQsTUFBSSxpQkFBaUIsR0FBRyxFQUFFLENBQUM7QUFDM0IsTUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxHQUFHLEVBQUk7QUFDdEMscUJBQWlCLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0dBQ2pELENBQUMsQ0FBQztBQUNILFNBQU8saUJBQWlCLENBQUM7Q0FDMUI7Ozs7QUFFRCxTQUFTLHFCQUFxQixDQUM1QixNQUFxQixFQUNyQixpQkFBdUQsRUFDdEM7QUFDakIsTUFBSSxpQkFBaUIsR0FBRyxFQUFFLENBQUM7QUFDM0IsUUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBQSxHQUFHLEVBQUk7UUFDeEIsSUFBSSxHQUFhLEdBQUcsQ0FBcEIsSUFBSTtRQUFFLE9BQU8sR0FBSSxHQUFHLENBQWQsT0FBTzs7QUFDbEIsUUFBSSxDQUFDLElBQUksRUFBRTtBQUNULFlBQU0sS0FBSyw4QkFBNEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFHLENBQUM7S0FDM0U7QUFDRCxRQUFJLENBQUMsT0FBTyxFQUFFO0FBQ1osWUFBTSxLQUFLLGlDQUErQixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUcsQ0FBQztLQUM5RTtBQUNELFFBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLEtBQUssT0FBTyxFQUFFO0FBQ3ZDLHVCQUFpQixDQUFDLElBQUksQ0FBSSxJQUFJLFNBQUksT0FBTyxDQUFHLENBQUM7S0FDOUM7R0FDRixDQUFDLENBQUM7QUFDSCxTQUFPLGlCQUFpQixDQUFDO0NBQzFCOzs7OztBQUtELFNBQVMsa0JBQWtCLENBQUMsUUFBdUIsRUFBVztrQkFDekIsT0FBTyxDQUFDLGlCQUFpQixDQUFDOztNQUF4RCxZQUFZLGFBQVosWUFBWTtNQUFFLFlBQVksYUFBWixZQUFZOztBQUMvQixNQUFJLEtBQUssR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0FBQy9CLE1BQUksR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLENBQUM7QUFDckMsTUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDO0FBQ2xCLFVBQVEsQ0FBQyxPQUFPLENBQUMsVUFBQSxHQUFHLEVBQUk7QUFDdEIsUUFBSSxRQUFRLEdBQUcsU0FBWCxRQUFRLENBQUksT0FBTyxFQUFFLE1BQU07YUFBSyxZQUFZLENBQUMsR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUM7S0FBQSxDQUFDO0FBQzlGLFFBQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDckMsWUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztHQUN4QixDQUFDLENBQUM7QUFDSCxTQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7Q0FDOUI7O0FBRUQsTUFBTSxDQUFDLE9BQU8sR0FBRztBQUNmLHlCQUF1QixFQUF2Qix1QkFBdUI7QUFDdkIsVUFBUSxFQUFFO0FBQ1IseUJBQXFCLEVBQXJCLHFCQUFxQjtHQUN0QjtDQUNGLENBQUMiLCJmaWxlIjoiL3Zhci9mb2xkZXJzL3hmL3JzcGg0X2M1NzMxNXJzNTd4eHNkc2tyeG52MzZ0MC9UL3RtcGVtbTJIdXB1Ymxpc2hfcGFja2FnZXMvbnBtL251Y2xpZGUtaW5zdGFsbGVyLWJhc2UvbGliL21haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG50eXBlIFBhY2thZ2VOYW1lID0gc3RyaW5nO1xudHlwZSBQYWNrYWdlVmVyc2lvbiA9IHN0cmluZztcblxudHlwZSBJbnN0YWxsQ29uZmlnRW50cnkgPSB7XG4gIG5hbWU6IFBhY2thZ2VOYW1lO1xuICB2ZXJzaW9uOiBQYWNrYWdlVmVyc2lvbjtcbn07XG5cbnR5cGUgSW5zdGFsbENvbmZpZyA9IHtcbiAgcGFja2FnZXM6IEFycmF5PEluc3RhbGxDb25maWdFbnRyeT47XG59O1xuXG4vKipcbiAqIEluc3RhbGxzIHRoZSBBdG9tIHBhY2thZ2VzIHNwZWNpZmllZCBpbiB0aGUgY29uZmlnLlxuICogQHJldHVybiBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgaWYgdGhlIGluc3RhbGxhdGlvbiBzdWNjZWVkcy5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gaW5zdGFsbFBhY2thZ2VzSW5Db25maWcoY29uZmlnOiBJbnN0YWxsQ29uZmlnKTogUHJvbWlzZSB7XG4gIHZhciBpbnN0YWxsZWRQYWNrYWdlcyA9IGF3YWl0IGdldEluc3RhbGxlZFBhY2thZ2VzKCk7XG4gIHZhciBwYWNrYWdlc1RvSW5zdGFsbCA9IGZpbmRQYWNrYWdlc1RvSW5zdGFsbChjb25maWcsIGluc3RhbGxlZFBhY2thZ2VzKTtcbiAgYXdhaXQgaW5zdGFsbEFwbVBhY2thZ2VzKHBhY2thZ2VzVG9JbnN0YWxsKTtcbn1cblxuLyoqXG4gKiBDYWxscyBgYXBtIGxzIC0tanNvbmAsIHBhcnNlcyB0aGUgSlNPTiB3cml0dGVuIHRvIHN0ZG91dCwgYW5kIGZpbHRlcnMgdGhlIHZhbHVlXG4gKiBvZiB0aGUgYFwidXNlclwiYCBwcm9wZXJ0eSBvZiB0aGUgSlNPTiB0byBwcm9kdWNlIGEgbWFwIG9mIChuYW1lLCB2ZXJzaW9uKSBwYWlyc1xuICogdGhhdCBjb3JyZXNwb25kIHRvIHVzZXItaW5zdGFsbGVkIEF0b20gcGFja2FnZXMuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGdldEluc3RhbGxlZFBhY2thZ2VzKCk6IFByb21pc2U8e1trZXk6IFBhY2thZ2VOYW1lXTogUGFja2FnZVZlcnNpb259PiB7XG4gIHZhciB7YXN5bmNFeGVjdXRlfSA9IHJlcXVpcmUoJ251Y2xpZGUtY29tbW9ucycpO1xuICB2YXIgYXBtID0gYXRvbS5wYWNrYWdlcy5nZXRBcG1QYXRoKCk7XG4gIHZhciBqc29uO1xuICB0cnkge1xuICAgIHZhciB7c3Rkb3V0fSA9IGF3YWl0IGFzeW5jRXhlY3V0ZShhcG0sIFsnbHMnLCAnLS1qc29uJ10pO1xuICAgIGpzb24gPSBzdGRvdXQ7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvKmVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUqL1xuICAgIC8vIFdyaXRlIHRvIHRoZSBjb25zb2xlIGJlY2F1c2UgdGhpcyBtYWtlIGl0IGVhc2llciBmb3IgdXNlcnMgdG8gcmVwb3J0IGVycm9ycy5cbiAgICBjb25zb2xlLmVycm9yKGBDb3VsZCBub3QgZ2V0IHRoZSBsaXN0IG9mIEF0b20gcGFja2FnZXMgZnJvbSAke2FwbX0gbHMgLS1qc29uLmApO1xuICAgIC8qZXNsaW50LWVuYWJsZSBuby1jb25zb2xlKi9cbiAgICB0aHJvdyBFcnJvcihgJHthcG19IGxzIC0tanNvbiBmYWlsZWQgd2l0aCBleGl0IGNvZGUgJHtlLmV4aXRDb2RlfWApO1xuICB9XG5cbiAgdmFyIGluc3RhbGxlZFBhY2thZ2VzID0ge307XG4gIEpTT04ucGFyc2UoanNvbilbJ3VzZXInXS5mb3JFYWNoKHBrZyA9PiB7XG4gICAgaW5zdGFsbGVkUGFja2FnZXNbcGtnWyduYW1lJ11dID0gcGtnWyd2ZXJzaW9uJ107XG4gIH0pO1xuICByZXR1cm4gaW5zdGFsbGVkUGFja2FnZXM7XG59XG5cbmZ1bmN0aW9uIGZpbmRQYWNrYWdlc1RvSW5zdGFsbChcbiAgY29uZmlnOiBJbnN0YWxsQ29uZmlnLFxuICBpbnN0YWxsZWRQYWNrYWdlczoge1trZXk6IFBhY2thZ2VOYW1lXTogUGFja2FnZVZlcnNpb259XG4gICk6IEFycmF5PHN0cmluZz4ge1xuICB2YXIgcGFja2FnZXNUb0luc3RhbGwgPSBbXTtcbiAgY29uZmlnLnBhY2thZ2VzLmZvckVhY2gocGtnID0+IHtcbiAgICB2YXIge25hbWUsIHZlcnNpb259ID0gcGtnO1xuICAgIGlmICghbmFtZSkge1xuICAgICAgdGhyb3cgRXJyb3IoYEVudHJ5IHdpdGhvdXQgYSBuYW1lIGluICR7SlNPTi5zdHJpbmdpZnkoY29uZmlnLCBudWxsLCAyKX1gKTtcbiAgICB9XG4gICAgaWYgKCF2ZXJzaW9uKSB7XG4gICAgICB0aHJvdyBFcnJvcihgRW50cnkgd2l0aG91dCBhIHZlcnNpb24gaW4gJHtKU09OLnN0cmluZ2lmeShjb25maWcsIG51bGwsIDIpfWApO1xuICAgIH1cbiAgICBpZiAoaW5zdGFsbGVkUGFja2FnZXNbbmFtZV0gIT09IHZlcnNpb24pIHtcbiAgICAgIHBhY2thZ2VzVG9JbnN0YWxsLnB1c2goYCR7bmFtZX1AJHt2ZXJzaW9ufWApO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBwYWNrYWdlc1RvSW5zdGFsbDtcbn1cblxuLyoqXG4gKiBJbnN0YWxscyB0aGUgbGlzdCBvZiBBdG9tIHBhY2thZ2VzIHNlcmlhbGx5LlxuICovXG5mdW5jdGlvbiBpbnN0YWxsQXBtUGFja2FnZXMocGFja2FnZXM6IEFycmF5PHN0cmluZz4pOiBQcm9taXNlIHtcbiAgdmFyIHthc3luY0V4ZWN1dGUsIFByb21pc2VRdWV1ZX0gPSByZXF1aXJlKCdudWNsaWRlLWNvbW1vbnMnKTtcbiAgdmFyIHF1ZXVlID0gbmV3IFByb21pc2VRdWV1ZSgpO1xuICB2YXIgYXBtID0gYXRvbS5wYWNrYWdlcy5nZXRBcG1QYXRoKCk7XG4gIHZhciBwcm9taXNlcyA9IFtdO1xuICBwYWNrYWdlcy5mb3JFYWNoKHBrZyA9PiB7XG4gICAgdmFyIGV4ZWN1dG9yID0gKHJlc29sdmUsIHJlamVjdCkgPT4gYXN5bmNFeGVjdXRlKGFwbSwgWydpbnN0YWxsJywgcGtnXSkudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgIHZhciBwcm9taXNlID0gcXVldWUuc3VibWl0KGV4ZWN1dG9yKTtcbiAgICBwcm9taXNlcy5wdXNoKHByb21pc2UpO1xuICB9KTtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGluc3RhbGxQYWNrYWdlc0luQ29uZmlnLFxuICBfX3Rlc3RfXzoge1xuICAgIGZpbmRQYWNrYWdlc1RvSW5zdGFsbCxcbiAgfSxcbn07XG4iXX0=
