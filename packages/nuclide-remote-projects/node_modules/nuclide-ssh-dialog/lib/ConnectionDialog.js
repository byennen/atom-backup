
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var AtomInput = require('nuclide-ui-atom-input');
var RadioGroup = require('nuclide-ui-radiogroup');

var _require = require('atom');

var CompositeDisposable = _require.CompositeDisposable;

var React = require('react-for-atom');

var _require2 = require('nuclide-remote-connection');

var SshHandshake = _require2.SshHandshake;

var path = require('path');
var logger = require('nuclide-logging').getLogger();

var PropTypes = React.PropTypes;
var SupportedMethods = SshHandshake.SupportedMethods;

var authMethods = [SupportedMethods.PASSWORD, SupportedMethods.SSL_AGENT, SupportedMethods.PRIVATE_KEY];

/** Component to prompt the user for connection details. */
var ConnectionDetailsPrompt = React.createClass({
  displayName: 'ConnectionDetailsPrompt',

  propTypes: {
    initialUsername: PropTypes.string,
    initialServer: PropTypes.string,
    initialCwd: PropTypes.string,
    initialRemoteServerCommand: PropTypes.string,
    initialSshPort: PropTypes.string,
    initialPathToPrivateKey: PropTypes.string,
    initialAuthMethod: PropTypes.shape(Object.keys(SupportedMethods)),
    onConfirm: PropTypes.func.isRequired,
    onCancel: PropTypes.func.isRequired
  },

  getInitialState: function getInitialState() {
    return {
      username: this.props.initialUsername,
      server: this.props.initialServer,
      cwd: this.props.initialCwd,
      remoteServerCommand: this.props.initialRemoteServerCommand,
      sshPort: this.props.initialSshPort,
      pathToPrivateKey: this.props.initialPathToPrivateKey,
      selectedAuthMethodIndex: authMethods.indexOf(this.props.initialAuthMethod)
    };
  },

  handleAuthMethodChange: function handleAuthMethodChange(newIndex) {
    this.setState({
      selectedAuthMethodIndex: newIndex
    });
  },

  _onKeyUp: function _onKeyUp(e) {
    if (e.key === 'Enter') {
      this.props.onConfirm();
    }

    if (e.key === 'Escape') {
      this.props.onCancel();
    }
  },

  _handlePasswordInputClick: function _handlePasswordInputClick(event) {
    var _this = this;

    var passwordAuthMethodIndex = authMethods.indexOf(SupportedMethods.PASSWORD);
    this.setState({
      selectedAuthMethodIndex: passwordAuthMethodIndex
    }, function () {
      React.findDOMNode(_this.refs['password']).focus();
    });
  },

  _handleKeyFileInputClick: function _handleKeyFileInputClick(event) {
    var _this2 = this;

    var privateKeyAuthMethodIndex = authMethods.indexOf(SupportedMethods.PRIVATE_KEY);
    this.setState({
      selectedAuthMethodIndex: privateKeyAuthMethodIndex
    }, function () {
      // when setting this immediately, Atom will unset the focus...
      setTimeout(function () {
        React.findDOMNode(_this2.refs['pathToPrivateKey']).focus();
      }, 0);
    });
  },

  render: function render() {
    var activeAuthMethod = authMethods[this.state.selectedAuthMethodIndex];
    // We need native-key-bindings so that delete works and we need
    // _onKeyUp so that escape and enter work
    var passwordLabel = React.createElement(
      'div',
      { className: 'nuclide-auth-method' },
      React.createElement(
        'div',
        { className: 'nuclide-auth-method-label' },
        'Password:'
      ),
      React.createElement(
        'div',
        { className: 'nuclide-auth-method-input nuclide-auth-method-password' },
        React.createElement('input', { type: 'password',
          className: 'nuclide-password native-key-bindings',
          disabled: activeAuthMethod !== SupportedMethods.PASSWORD,
          ref: 'password',
          onClick: this._handlePasswordInputClick,
          onKeyUp: this._onKeyUp
        })
      )
    );
    var privateKeyLabel = React.createElement(
      'div',
      { className: 'nuclide-auth-method' },
      React.createElement(
        'div',
        { className: 'nuclide-auth-method-label' },
        'Private Key File:'
      ),
      React.createElement(
        'div',
        { className: 'nuclide-auth-method-input nuclide-auth-method-privatekey' },
        React.createElement(AtomInput, {
          ref: 'pathToPrivateKey',
          disabled: activeAuthMethod !== SupportedMethods.PRIVATE_KEY,
          onClick: this._handleKeyFileInputClick,
          placeholder: 'Path to private key',
          initialValue: this.state.pathToPrivateKey
        })
      )
    );
    var sshAgentLabel = React.createElement(
      'div',
      { className: 'nuclide-auth-method' },
      'Use ssh-agent'
    );
    return React.createElement(
      'div',
      { ref: 'root' },
      React.createElement(
        'div',
        { className: 'block' },
        'Username:',
        React.createElement(AtomInput, { ref: 'username', initialValue: this.state.username })
      ),
      React.createElement(
        'div',
        { className: 'block' },
        'Server:',
        React.createElement(AtomInput, { mini: true, ref: 'server', initialValue: this.state.server })
      ),
      React.createElement(
        'div',
        { className: 'block' },
        'Initial Directory:',
        React.createElement(AtomInput, { ref: 'cwd', initialValue: this.state.cwd })
      ),
      React.createElement(
        'div',
        { className: 'block' },
        'Authentication method:'
      ),
      React.createElement(
        'div',
        { className: 'nuclide-auth-selector' },
        React.createElement(RadioGroup, {
          optionLabels: [passwordLabel, sshAgentLabel, privateKeyLabel],
          onSelectedChange: this.handleAuthMethodChange,
          selectedIndex: this.state.selectedAuthMethodIndex
        })
      ),
      React.createElement(
        'div',
        { className: 'block' },
        'Advanced Settings'
      ),
      React.createElement(
        'div',
        { className: 'block' },
        'SSH Port:',
        React.createElement(AtomInput, { ref: 'sshPort', initialValue: this.state.sshPort })
      ),
      React.createElement(
        'div',
        { className: 'block' },
        'Remote Server Command:',
        React.createElement(AtomInput, { ref: 'remoteServerCommand', initialValue: this.state.remoteServerCommand })
      )
    );
  },

  componentDidMount: function componentDidMount() {
    var _this3 = this;

    this._disposables = new CompositeDisposable();
    var root = this.refs['root'].getDOMNode();

    // Hitting enter when this panel has focus should confirm the dialog.
    this._disposables.add(atom.commands.add(root, 'core:confirm', function (event) {
      return _this3.props.onConfirm();
    }));

    // Hitting escape when this panel has focus should cancel the dialog.
    this._disposables.add(atom.commands.add(root, 'core:cancel', function (event) {
      return _this3.props.onCancel();
    }));

    this.refs['username'].focus();
  },

  componentWillUnmount: function componentWillUnmount() {
    if (this._disposables) {
      this._disposables.dispose();
      this._disposables = null;
    }
  },

  getText: function getText(fieldName) {
    return this.refs[fieldName] && this.refs[fieldName].getText().trim() || '';
  },

  getAuthMethod: function getAuthMethod() {
    return authMethods[this.state.selectedAuthMethodIndex];
  },

  getAuthMethodIndex: function getAuthMethodIndex() {
    return this.state.selectedAuthMethodIndex;
  },

  getPassword: function getPassword() {
    return this.refs.password && React.findDOMNode(this.refs.password).value || '';
  }

});

/** Component to prompt the user for authentication information. */
var AuthenticationPrompt = React.createClass({
  displayName: 'AuthenticationPrompt',

  propTypes: {
    instructions: PropTypes.string.isRequired,
    onConfirm: PropTypes.func.isRequired,
    onCancel: PropTypes.func.isRequired
  },

  render: function render() {
    // Instructions may contain newlines that need to be converted to <br> tags.
    var safeHtml = this.props.instructions.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\n/g, '<br>');

    // We need native-key-bindings so that delete works and we need
    // _onKeyUp so that escape and enter work
    return React.createElement(
      'div',
      { ref: 'root', className: 'password-prompt-container' },
      React.createElement('div', { className: 'block',
        style: { whiteSpace: 'pre' },
        dangerouslySetInnerHTML: { __html: safeHtml }
      }),
      React.createElement('input', { type: 'password',
        className: 'nuclide-password native-key-bindings',
        ref: 'password',
        onKeyUp: this._onKeyUp })
    );
  },

  _onKeyUp: function _onKeyUp(e) {
    if (e.key === 'Enter') {
      this.props.onConfirm();
    }

    if (e.key === 'Escape') {
      this.props.onCancel();
    }
  },

  componentDidMount: function componentDidMount() {
    var _this4 = this;

    this._disposables = new CompositeDisposable();
    var root = this.refs['root'].getDOMNode();

    // Hitting enter when this panel has focus should confirm the dialog.
    this._disposables.add(atom.commands.add(root, 'core:confirm', function (event) {
      return _this4.props.onConfirm();
    }));

    // Hitting escape when this panel has focus should cancel the dialog.
    this._disposables.add(atom.commands.add(root, 'core:cancel', function (event) {
      return _this4.props.onCancel();
    }));

    React.findDOMNode(this.refs.password).focus();
  },

  componentWillUnmount: function componentWillUnmount() {
    if (this._disposables) {
      this._disposables.dispose();
      this._disposables = null;
    }
  },

  getPassword: function getPassword() {
    return React.findDOMNode(this.refs.password).value;
  }
});

/**
 * Component to entertain the user while he is waiting to hear back from the
 * server.
 */
var IndeterminateProgressBar = React.createClass({
  displayName: 'IndeterminateProgressBar',

  render: function render() {
    return React.createElement(
      'div',
      { className: 'block' },
      React.createElement('span', { className: 'loading loading-spinner-medium inline-block' })
    );
  }
});

var REQUEST_CONNECTION_DETAILS = 1;
var WAITING_FOR_CONNECTION = 2;
var REQUEST_AUTHENTICATION_DETAILS = 3;
var WAITING_FOR_AUTHENTICATION = 4;

/**
 * Component that manages the state transitions as the user connects to a
 * server.
 */
var ConnectionDialog = React.createClass({
  displayName: 'ConnectionDialog',

  propTypes: {
    initialUsername: PropTypes.string,
    initialServer: PropTypes.string,
    initialRemoteServerCommand: PropTypes.string,
    initialCwd: PropTypes.string,
    initialSshPort: PropTypes.string,
    initialPathToPrivateKey: PropTypes.string,
    onConnect: PropTypes.func.isRequired,
    onError: PropTypes.func.isRequired,
    onCancel: PropTypes.func.isRequired,
    onClosed: PropTypes.func
  },

  getInitialState: function getInitialState() {
    var _this5 = this;

    var sshHandshake = new SshHandshake({
      onKeyboardInteractive: function onKeyboardInteractive(name, instructions, instructionsLang, prompts, finish) {
        // TODO: Display all prompts, not just the first one.
        _this5.requestAuthentication(prompts[0], finish);
      },

      onConnect: function onConnect(connection, config) {
        _this5.close(); // Close the dialog.
        _this5.props.onConnect(connection, config);
      },

      onError: function onError(error, config) {
        _this5.close(); // Close the dialog.
        atom.notifications.addError(error.message, { dismissable: true });
        _this5.props.onError(error, config);
        logger.debug(error);
      }
    });

    return {
      mode: REQUEST_CONNECTION_DETAILS,
      instructions: '',
      sshHandshake: sshHandshake,
      finish: function finish(answers) {}
    };
  },

  _getMode: function _getMode() {
    return this.state['mode'];
  },

  render: function render() {
    var mode = this._getMode();
    var content;
    var isOkDisabled;
    if (mode === REQUEST_CONNECTION_DETAILS) {
      // Note React.__spread() is not available in the Atom React fork, so we
      // pass the props explicitly.
      content = React.createElement(ConnectionDetailsPrompt, {
        ref: 'connection-details',
        initialUsername: this.props.initialUsername,
        initialServer: this.props.initialServer,
        initialRemoteServerCommand: this.props.initialRemoteServerCommand,
        initialCwd: this.props.initialCwd,
        initialSshPort: this.props.initialSshPort,
        initialPathToPrivateKey: this.props.initialPathToPrivateKey,
        initialAuthMethod: this.props.initialAuthMethod,
        onConfirm: this.ok,
        onCancel: this.cancel
      });
      isOkDisabled = false;
    } else if (mode === WAITING_FOR_CONNECTION || mode === WAITING_FOR_AUTHENTICATION) {
      content = React.createElement(IndeterminateProgressBar, null);
      isOkDisabled = true;
    } else {
      content = React.createElement(AuthenticationPrompt, { ref: 'authentication',
        instructions: this.state['instructions'],
        onConfirm: this.ok,
        onCancel: this.cancel
      });
      isOkDisabled = false;
    }

    // The root element cannot have a 'key' property, so we use a dummy
    // <div> as the root. Ideally, the <atom-panel> would be the root.
    return React.createElement(
      'div',
      null,
      React.createElement(
        'atom-panel',
        { className: 'modal from-top', key: 'connect-dialog' },
        content,
        React.createElement(
          'div',
          { className: 'block nuclide-ok-cancel' },
          React.createElement(
            'button',
            { className: 'btn', onClick: this.cancel },
            'Cancel'
          ),
          React.createElement(
            'button',
            { className: 'btn btn-primary', onClick: this.ok, disabled: isOkDisabled },
            'OK'
          )
        )
      )
    );
  },

  cancel: function cancel() {
    var mode = this._getMode();

    // It is safe to call cancel even if no connection is started
    this.state.sshHandshake.cancel();

    if (mode === WAITING_FOR_CONNECTION) {
      // TODO(mikeo): Tell delegate to cancel the connection request.
      this.setState({ mode: REQUEST_CONNECTION_DETAILS });
    } else {
      // TODO(mikeo): Also cancel connection request, as appropriate for mode?
      this.props.onCancel();
      this.close();
    }
  },

  close: function close() {
    if (this.props.onClosed) {
      this.props.onClosed();
    }
    var domNode = React.findDOMNode(this);
    if (domNode) {
      React.unmountComponentAtNode(domNode.parentNode);
    }
  },

  ok: function ok() {
    var mode = this._getMode();

    if (mode === REQUEST_CONNECTION_DETAILS) {
      // User is trying to submit connection details.
      var connectionDetailsPrompt = this.refs['connection-details'];
      var pathToPrivateKey = connectionDetailsPrompt.getText('pathToPrivateKey');
      var username = connectionDetailsPrompt.getText('username');
      var server = connectionDetailsPrompt.getText('server');
      var cwd = connectionDetailsPrompt.getText('cwd');
      var sshPort = connectionDetailsPrompt.getText('sshPort');
      var remoteServerCommand = connectionDetailsPrompt.getText('remoteServerCommand');
      var authMethod = connectionDetailsPrompt.getAuthMethod();
      var password = connectionDetailsPrompt.getPassword();
      if (username && server && cwd && remoteServerCommand) {
        this.setState({ mode: WAITING_FOR_CONNECTION });
        this.state.sshHandshake.connect({
          host: server,
          sshPort: sshPort,
          username: username,
          pathToPrivateKey: pathToPrivateKey,
          authMethod: authMethod,
          cwd: cwd,
          remoteServerCommand: remoteServerCommand,
          password: password
        });
      } else {
        // TODO(mbolin): Tell user to fill out all of the fields.
      }
    } else if (mode === REQUEST_AUTHENTICATION_DETAILS) {
        var authenticationPrompt = this.refs['authentication'];
        var password = authenticationPrompt.getPassword();

        this.state.finish([password]);

        this.setState({ mode: WAITING_FOR_AUTHENTICATION });
      }
  },

  requestAuthentication: function requestAuthentication(instructions, finish) {
    this.setState({
      mode: REQUEST_AUTHENTICATION_DETAILS,
      instructions: instructions.prompt,
      finish: finish
    });
  }
});

module.exports = ConnectionDialog;
//# sourceMappingURL=data:application/json;base64,
