
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

var url = require('url');
var path = require('path');
var defaultConfig = null;

var dialogPromiseQueue = null;

function openConnectionDialog(props) {
  var _require = require('nuclide-commons');

  var extend = _require.extend;
  var PromiseQueue = _require.PromiseQueue;

  if (!dialogPromiseQueue) {
    dialogPromiseQueue = new PromiseQueue();
  }

  return dialogPromiseQueue.submit(function (resolve, reject) {
    var workspaceEl = atom.views.getView(atom.workspace);
    var hostEl = document.createElement('div');
    workspaceEl.appendChild(hostEl);

    var ConnectionDialog = require('./ConnectionDialog');

    var defaultConnectionSettings = getDefaultConfig().getConnectionDialogDefaultSettings();

    function saveConfig(config) {
      atom.config.set('nuclide.lastConnectionDetails', {
        config: config,
        // Save last official command to detect upgrade.
        lastOfficialRemoteServerCommand: defaultConnectionSettings.remoteServerCommand
      });
    }

    var lastConnectionDetails = atom.config.get('nuclide.lastConnectionDetails') || {};
    var lastConfig = lastConnectionDetails.config || {};
    var remoteServerCommand = defaultConnectionSettings.remoteServerCommand;
    // If there has not been any upgrade and there is a persisted remote server command, use it.
    if (lastConnectionDetails.lastOfficialRemoteServerCommand === defaultConnectionSettings.remoteServerCommand && lastConfig.remoteServerCommand) {
      remoteServerCommand = lastConfig.remoteServerCommand;
    }
    var rememberedDialogSettings = extend.immutableExtend(defaultConnectionSettings, lastConfig);

    var dialogProps = extend.immutableExtend({
      initialUsername: rememberedDialogSettings.username,
      initialServer: rememberedDialogSettings.host,
      initialRemoteServerCommand: remoteServerCommand,
      initialCwd: rememberedDialogSettings.cwd,
      initialSshPort: String(rememberedDialogSettings.sshPort),
      initialPathToPrivateKey: rememberedDialogSettings.pathToPrivateKey,
      initialAuthMethod: rememberedDialogSettings.authMethod,
      onConnect: _asyncToGenerator(function* (connection, config) {
        resolve(connection);
        saveConfig(config);
      }),
      onError: function onError(err, config) {
        resolve( /*connection*/null);
        saveConfig(config);
      },
      onCancel: function onCancel() {
        return resolve( /*connection*/null);
      }
    }, props);
    var React = require('react-for-atom');
    React.render(React.createElement(ConnectionDialog, dialogProps), hostEl);
  });
}

function getDefaultConfig() {
  if (defaultConfig) {
    return defaultConfig;
  }
  try {
    defaultConfig = require('./fb/config');
  } catch (e) {
    defaultConfig = require('./config');
  }
  return defaultConfig;
}

module.exports = { openConnectionDialog: openConnectionDialog };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXNzaC1kaWFsb2cvbGliL29wZW4tY29ubmVjdGlvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLENBQUM7Ozs7Ozs7Ozs7OztBQVdaLElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN6QixJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDM0IsSUFBSSxhQUFtQixHQUFHLElBQUksQ0FBQzs7QUFFL0IsSUFBSSxrQkFBaUMsR0FBRyxJQUFJLENBQUM7O0FBRTdDLFNBQVMsb0JBQW9CLENBQUMsS0FBSyxFQUE4QjtpQkFDbEMsT0FBTyxDQUFDLGlCQUFpQixDQUFDOztNQUFsRCxNQUFNLFlBQU4sTUFBTTtNQUFFLFlBQVksWUFBWixZQUFZOztBQUN6QixNQUFJLENBQUMsa0JBQWtCLEVBQUU7QUFDdkIsc0JBQWtCLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztHQUN6Qzs7QUFFRCxTQUFPLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxVQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUs7QUFDcEQsUUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3JELFFBQUksTUFBTSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDM0MsZUFBVyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQzs7QUFFaEMsUUFBSSxnQkFBZ0IsR0FBRyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQzs7QUFFckQsUUFBSSx5QkFBeUIsR0FBRyxnQkFBZ0IsRUFBRSxDQUFDLGtDQUFrQyxFQUFFLENBQUM7O0FBRXhGLGFBQVMsVUFBVSxDQUFDLE1BQWtDLEVBQUU7QUFDdEQsVUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsK0JBQStCLEVBQUU7QUFDL0MsY0FBTSxFQUFOLE1BQU07O0FBRU4sdUNBQStCLEVBQUUseUJBQXlCLENBQUMsbUJBQW1CO09BQy9FLENBQUMsQ0FBQztLQUNKOztBQUVELFFBQUkscUJBQXFCLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsK0JBQStCLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDbkYsUUFBSSxVQUFVLEdBQUcscUJBQXFCLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQztBQUNwRCxRQUFJLG1CQUFtQixHQUFHLHlCQUF5QixDQUFDLG1CQUFtQixDQUFDOztBQUV4RSxRQUFJLHFCQUFxQixDQUFDLCtCQUErQixLQUFLLHlCQUF5QixDQUFDLG1CQUFtQixJQUNwRyxVQUFVLENBQUMsbUJBQW1CLEVBQUU7QUFDbkMseUJBQW1CLEdBQUcsVUFBVSxDQUFDLG1CQUFtQixDQUFDO0tBQ3hEO0FBQ0QsUUFBSSx3QkFBd0IsR0FBRyxNQUFNLENBQUMsZUFBZSxDQUFDLHlCQUF5QixFQUFFLFVBQVUsQ0FBQyxDQUFDOztBQUU3RixRQUFJLFdBQVcsR0FBRyxNQUFNLENBQUMsZUFBZSxDQUFDO0FBQ3ZDLHFCQUFlLEVBQUUsd0JBQXdCLENBQUMsUUFBUTtBQUNsRCxtQkFBYSxFQUFFLHdCQUF3QixDQUFDLElBQUk7QUFDNUMsZ0NBQTBCLEVBQUUsbUJBQW1CO0FBQy9DLGdCQUFVLEVBQUUsd0JBQXdCLENBQUMsR0FBRztBQUN4QyxvQkFBYyxFQUFFLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxPQUFPLENBQUM7QUFDeEQsNkJBQXVCLEVBQUUsd0JBQXdCLENBQUMsZ0JBQWdCO0FBQ2xFLHVCQUFpQixFQUFFLHdCQUF3QixDQUFDLFVBQVU7QUFDdEQsZUFBUyxvQkFBRSxXQUFPLFVBQVUsRUFBRSxNQUFNLEVBQUs7QUFDdkMsZUFBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3BCLGtCQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7T0FDcEIsQ0FBQTtBQUNELGFBQU8sRUFBRSxpQkFBQyxHQUFHLEVBQUUsTUFBTSxFQUFLO0FBQ3hCLGVBQU8sZ0JBQWdCLElBQUksQ0FBQyxDQUFDO0FBQzdCLGtCQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7T0FDcEI7QUFDRCxjQUFRLEVBQUU7ZUFBTSxPQUFPLGdCQUFnQixJQUFJLENBQUM7T0FBQTtLQUM3QyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ1YsUUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDdEMsU0FBSyxDQUFDLE1BQU0sQ0FBQyxvQkFBQyxnQkFBZ0IsRUFBSyxXQUFXLENBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztHQUM3RCxDQUFDLENBQUM7Q0FDSjs7QUFFRCxTQUFTLGdCQUFnQixHQUFRO0FBQy9CLE1BQUksYUFBYSxFQUFFO0FBQ2pCLFdBQU8sYUFBYSxDQUFDO0dBQ3RCO0FBQ0QsTUFBSTtBQUNGLGlCQUFhLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0dBQ3hDLENBQUMsT0FBTyxDQUFDLEVBQUU7QUFDVixpQkFBYSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztHQUNyQztBQUNELFNBQU8sYUFBYSxDQUFDO0NBQ3RCOztBQUVELE1BQU0sQ0FBQyxPQUFPLEdBQUcsRUFBQyxvQkFBb0IsRUFBcEIsb0JBQW9CLEVBQUMsQ0FBQyIsImZpbGUiOiIvdmFyL2ZvbGRlcnMveGYvcnNwaDRfYzU3MzE1cnM1N3h4c2Rza3J4bnYzNnQwL1QvdG1wZW1tMkh1cHVibGlzaF9wYWNrYWdlcy9ucG0vbnVjbGlkZS1zc2gtZGlhbG9nL2xpYi9vcGVuLWNvbm5lY3Rpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG52YXIgdXJsID0gcmVxdWlyZSgndXJsJyk7XG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbnZhciBkZWZhdWx0Q29uZmlnOiA/YW55ID0gbnVsbDtcblxudmFyIGRpYWxvZ1Byb21pc2VRdWV1ZTogP1Byb21pc2VRdWV1ZSA9IG51bGw7XG5cbmZ1bmN0aW9uIG9wZW5Db25uZWN0aW9uRGlhbG9nKHByb3BzKTogUHJvbWlzZTw/UmVtb3RlQ29ubmVjdGlvbj4ge1xuICB2YXIge2V4dGVuZCwgUHJvbWlzZVF1ZXVlfSA9IHJlcXVpcmUoJ251Y2xpZGUtY29tbW9ucycpO1xuICBpZiAoIWRpYWxvZ1Byb21pc2VRdWV1ZSkge1xuICAgIGRpYWxvZ1Byb21pc2VRdWV1ZSA9IG5ldyBQcm9taXNlUXVldWUoKTtcbiAgfVxuXG4gIHJldHVybiBkaWFsb2dQcm9taXNlUXVldWUuc3VibWl0KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICB2YXIgd29ya3NwYWNlRWwgPSBhdG9tLnZpZXdzLmdldFZpZXcoYXRvbS53b3Jrc3BhY2UpO1xuICAgIHZhciBob3N0RWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB3b3Jrc3BhY2VFbC5hcHBlbmRDaGlsZChob3N0RWwpO1xuXG4gICAgdmFyIENvbm5lY3Rpb25EaWFsb2cgPSByZXF1aXJlKCcuL0Nvbm5lY3Rpb25EaWFsb2cnKTtcblxuICAgIHZhciBkZWZhdWx0Q29ubmVjdGlvblNldHRpbmdzID0gZ2V0RGVmYXVsdENvbmZpZygpLmdldENvbm5lY3Rpb25EaWFsb2dEZWZhdWx0U2V0dGluZ3MoKTtcblxuICAgIGZ1bmN0aW9uIHNhdmVDb25maWcoY29uZmlnOiBTc2hDb25uZWN0aW9uQ29uZmlndXJhdGlvbikge1xuICAgICAgYXRvbS5jb25maWcuc2V0KCdudWNsaWRlLmxhc3RDb25uZWN0aW9uRGV0YWlscycsIHtcbiAgICAgICAgY29uZmlnLFxuICAgICAgICAvLyBTYXZlIGxhc3Qgb2ZmaWNpYWwgY29tbWFuZCB0byBkZXRlY3QgdXBncmFkZS5cbiAgICAgICAgbGFzdE9mZmljaWFsUmVtb3RlU2VydmVyQ29tbWFuZDogZGVmYXVsdENvbm5lY3Rpb25TZXR0aW5ncy5yZW1vdGVTZXJ2ZXJDb21tYW5kLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIGxhc3RDb25uZWN0aW9uRGV0YWlscyA9IGF0b20uY29uZmlnLmdldCgnbnVjbGlkZS5sYXN0Q29ubmVjdGlvbkRldGFpbHMnKSB8fCB7fTtcbiAgICB2YXIgbGFzdENvbmZpZyA9IGxhc3RDb25uZWN0aW9uRGV0YWlscy5jb25maWcgfHwge307XG4gICAgdmFyIHJlbW90ZVNlcnZlckNvbW1hbmQgPSBkZWZhdWx0Q29ubmVjdGlvblNldHRpbmdzLnJlbW90ZVNlcnZlckNvbW1hbmQ7XG4gICAgLy8gSWYgdGhlcmUgaGFzIG5vdCBiZWVuIGFueSB1cGdyYWRlIGFuZCB0aGVyZSBpcyBhIHBlcnNpc3RlZCByZW1vdGUgc2VydmVyIGNvbW1hbmQsIHVzZSBpdC5cbiAgICBpZiAobGFzdENvbm5lY3Rpb25EZXRhaWxzLmxhc3RPZmZpY2lhbFJlbW90ZVNlcnZlckNvbW1hbmQgPT09IGRlZmF1bHRDb25uZWN0aW9uU2V0dGluZ3MucmVtb3RlU2VydmVyQ29tbWFuZFxuICAgICAgICAmJiBsYXN0Q29uZmlnLnJlbW90ZVNlcnZlckNvbW1hbmQpIHtcbiAgICAgICAgcmVtb3RlU2VydmVyQ29tbWFuZCA9IGxhc3RDb25maWcucmVtb3RlU2VydmVyQ29tbWFuZDtcbiAgICB9XG4gICAgdmFyIHJlbWVtYmVyZWREaWFsb2dTZXR0aW5ncyA9IGV4dGVuZC5pbW11dGFibGVFeHRlbmQoZGVmYXVsdENvbm5lY3Rpb25TZXR0aW5ncywgbGFzdENvbmZpZyk7XG5cbiAgICB2YXIgZGlhbG9nUHJvcHMgPSBleHRlbmQuaW1tdXRhYmxlRXh0ZW5kKHtcbiAgICAgIGluaXRpYWxVc2VybmFtZTogcmVtZW1iZXJlZERpYWxvZ1NldHRpbmdzLnVzZXJuYW1lLFxuICAgICAgaW5pdGlhbFNlcnZlcjogcmVtZW1iZXJlZERpYWxvZ1NldHRpbmdzLmhvc3QsXG4gICAgICBpbml0aWFsUmVtb3RlU2VydmVyQ29tbWFuZDogcmVtb3RlU2VydmVyQ29tbWFuZCxcbiAgICAgIGluaXRpYWxDd2Q6IHJlbWVtYmVyZWREaWFsb2dTZXR0aW5ncy5jd2QsXG4gICAgICBpbml0aWFsU3NoUG9ydDogU3RyaW5nKHJlbWVtYmVyZWREaWFsb2dTZXR0aW5ncy5zc2hQb3J0KSxcbiAgICAgIGluaXRpYWxQYXRoVG9Qcml2YXRlS2V5OiByZW1lbWJlcmVkRGlhbG9nU2V0dGluZ3MucGF0aFRvUHJpdmF0ZUtleSxcbiAgICAgIGluaXRpYWxBdXRoTWV0aG9kOiByZW1lbWJlcmVkRGlhbG9nU2V0dGluZ3MuYXV0aE1ldGhvZCxcbiAgICAgIG9uQ29ubmVjdDogYXN5bmMgKGNvbm5lY3Rpb24sIGNvbmZpZykgPT4ge1xuICAgICAgICByZXNvbHZlKGNvbm5lY3Rpb24pO1xuICAgICAgICBzYXZlQ29uZmlnKGNvbmZpZyk7XG4gICAgICB9LFxuICAgICAgb25FcnJvcjogKGVyciwgY29uZmlnKSA9PiB7XG4gICAgICAgIHJlc29sdmUoLypjb25uZWN0aW9uKi8gbnVsbCk7XG4gICAgICAgIHNhdmVDb25maWcoY29uZmlnKTtcbiAgICAgIH0sXG4gICAgICBvbkNhbmNlbDogKCkgPT4gcmVzb2x2ZSgvKmNvbm5lY3Rpb24qLyBudWxsKSxcbiAgICB9LCBwcm9wcyk7XG4gICAgdmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QtZm9yLWF0b20nKTtcbiAgICBSZWFjdC5yZW5kZXIoPENvbm5lY3Rpb25EaWFsb2cgey4uLmRpYWxvZ1Byb3BzfSAvPiwgaG9zdEVsKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRDb25maWcoKTogYW55IHtcbiAgaWYgKGRlZmF1bHRDb25maWcpIHtcbiAgICByZXR1cm4gZGVmYXVsdENvbmZpZztcbiAgfVxuICB0cnkge1xuICAgIGRlZmF1bHRDb25maWcgPSByZXF1aXJlKCcuL2ZiL2NvbmZpZycpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgZGVmYXVsdENvbmZpZyA9IHJlcXVpcmUoJy4vY29uZmlnJyk7XG4gIH1cbiAgcmV0dXJuIGRlZmF1bHRDb25maWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge29wZW5Db25uZWN0aW9uRGlhbG9nfTtcbiJdfQ==
