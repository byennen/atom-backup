
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var loadStyles = _asyncToGenerator(function* (stylesPath) {
  // TODO(jjiaa): If possible, check that `stylesPath` is also a directory.
  if (!(yield fsPromise.exists(stylesPath))) {
    return;
  }

  // TODO(jjiaa): Find a way to remove the stylesheets when they're unneeded.
  // Note: Disposing the values of the statement below removes the stylesheets.
  //
  // The stylesheets will be loaded asynchronously, so there might be a slight
  // visual glitch if the widget is drawn before the stylesheets are loaded.
  (yield fsPromise.readdir(stylesPath)).filter(function (filePath) {
    return filePath.endsWith('.less') || filePath.endsWith('.css');
  })
  // Styles should be loaded in alphabetical order according to
  // https://atom.io/docs/v0.186.0/creating-a-package
  .sort().map(function (filePath) {
    return atom.themes.requireStylesheet(path.join(stylesPath, filePath));
  });
}

/**
 * Load all of the grammars synchronously because the top-level load() function should be
 * synchronous so that it works as expected with require().
 */
);

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

var fs = require('fs-plus');
var path = require('path');

var _require = require('nuclide-commons');

var fsPromise = _require.fsPromise;
function loadGrammarsSync(packagePath) {
  var grammarsDir = path.join(packagePath, 'grammars');
  if (!fs.isDirectorySync(grammarsDir)) {
    return;
  }

  fs.traverseTreeSync(grammarsDir, function (file) {
    return atom.grammars.loadGrammarSync(file);
  }, function (directory) {
    return null;
  });
}

module.exports = {
  load: function load(libPath, mainFilename) {
    if (!atom.nuclide) {
      atom.nuclide = {};
    }

    if (!atom.nuclide[mainFilename]) {
      atom.nuclide[mainFilename] = require(path.join(libPath, mainFilename));

      var packagePath = path.dirname(libPath);
      loadStyles(path.join(packagePath, 'styles'));

      loadGrammarsSync(packagePath);
    }
    return atom.nuclide[mainFilename];
  }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWF0b20tbnBtL2xpYi9tYWluLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFdBQVcsQ0FBQzs7Ozs7Ozs7OztJQWVHLFVBQVUscUJBQXpCLFdBQTBCLFVBQWtCLEVBQVc7O0FBRXJELE1BQUksRUFBRSxNQUFNLFNBQVMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUEsQUFBQyxFQUFFO0FBQ3pDLFdBQU87R0FDUjs7Ozs7OztBQU9ELEdBQUMsTUFBTSxTQUFTLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFBLENBQy9CLE1BQU0sQ0FBQyxVQUFBLFFBQVE7V0FBSyxRQUFRLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLFFBQVEsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO0dBQUMsQ0FBQzs7O0dBRzdFLElBQUksRUFBRSxDQUNOLEdBQUcsQ0FBQyxVQUFBLFFBQVE7V0FBSSxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0dBQUEsQ0FBQyxDQUFDO0NBQ3RGOzs7Ozs7Ozs7O0FBckJELElBQUksRUFBRSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUM1QixJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7O2VBQ1QsT0FBTyxDQUFDLGlCQUFpQixDQUFDOztJQUF2QyxTQUFTLFlBQVQsU0FBUztBQXlCZCxTQUFTLGdCQUFnQixDQUFDLFdBQW1CLEVBQUU7QUFDN0MsTUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDckQsTUFBSSxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLEVBQUU7QUFDcEMsV0FBTztHQUNSOztBQUVELElBQUUsQ0FBQyxnQkFBZ0IsQ0FDakIsV0FBVyxFQUNYLFVBQUEsSUFBSTtXQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQztHQUFBLEVBQzNDLFVBQUEsU0FBUztXQUFJLElBQUk7R0FBQSxDQUNsQixDQUFDO0NBQ0g7O0FBRUQsTUFBTSxDQUFDLE9BQU8sR0FBRztBQUNmLE1BQUksRUFBQSxjQUFDLE9BQWUsRUFBRSxZQUFvQixFQUFPO0FBQy9DLFFBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO0FBQ2pCLFVBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO0tBQ25COztBQUVELFFBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxFQUFFO0FBQy9CLFVBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUM7O0FBRXZFLFVBQUksV0FBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDeEMsZ0JBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDOztBQUU3QyxzQkFBZ0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztLQUMvQjtBQUNELFdBQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztHQUNuQztDQUNGLENBQUMiLCJmaWxlIjoiL3Zhci9mb2xkZXJzL3hmL3JzcGg0X2M1NzMxNXJzNTd4eHNkc2tyeG52MzZ0MC9UL3RtcGVtbTJIdXB1Ymxpc2hfcGFja2FnZXMvbnBtL251Y2xpZGUtYXRvbS1ucG0vbGliL21haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG52YXIgZnMgPSByZXF1aXJlKCdmcy1wbHVzJyk7XG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbnZhciB7ZnNQcm9taXNlfSA9IHJlcXVpcmUoJ251Y2xpZGUtY29tbW9ucycpO1xuXG5hc3luYyBmdW5jdGlvbiBsb2FkU3R5bGVzKHN0eWxlc1BhdGg6IHN0cmluZyk6IFByb21pc2Uge1xuICAvLyBUT0RPKGpqaWFhKTogSWYgcG9zc2libGUsIGNoZWNrIHRoYXQgYHN0eWxlc1BhdGhgIGlzIGFsc28gYSBkaXJlY3RvcnkuXG4gIGlmICghKGF3YWl0IGZzUHJvbWlzZS5leGlzdHMoc3R5bGVzUGF0aCkpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gVE9ETyhqamlhYSk6IEZpbmQgYSB3YXkgdG8gcmVtb3ZlIHRoZSBzdHlsZXNoZWV0cyB3aGVuIHRoZXkncmUgdW5uZWVkZWQuXG4gIC8vIE5vdGU6IERpc3Bvc2luZyB0aGUgdmFsdWVzIG9mIHRoZSBzdGF0ZW1lbnQgYmVsb3cgcmVtb3ZlcyB0aGUgc3R5bGVzaGVldHMuXG4gIC8vXG4gIC8vIFRoZSBzdHlsZXNoZWV0cyB3aWxsIGJlIGxvYWRlZCBhc3luY2hyb25vdXNseSwgc28gdGhlcmUgbWlnaHQgYmUgYSBzbGlnaHRcbiAgLy8gdmlzdWFsIGdsaXRjaCBpZiB0aGUgd2lkZ2V0IGlzIGRyYXduIGJlZm9yZSB0aGUgc3R5bGVzaGVldHMgYXJlIGxvYWRlZC5cbiAgKGF3YWl0IGZzUHJvbWlzZS5yZWFkZGlyKHN0eWxlc1BhdGgpKVxuICAgICAgLmZpbHRlcihmaWxlUGF0aCA9PiAoZmlsZVBhdGguZW5kc1dpdGgoJy5sZXNzJykgfHwgZmlsZVBhdGguZW5kc1dpdGgoJy5jc3MnKSkpXG4gICAgICAvLyBTdHlsZXMgc2hvdWxkIGJlIGxvYWRlZCBpbiBhbHBoYWJldGljYWwgb3JkZXIgYWNjb3JkaW5nIHRvXG4gICAgICAvLyBodHRwczovL2F0b20uaW8vZG9jcy92MC4xODYuMC9jcmVhdGluZy1hLXBhY2thZ2VcbiAgICAgIC5zb3J0KClcbiAgICAgIC5tYXAoZmlsZVBhdGggPT4gYXRvbS50aGVtZXMucmVxdWlyZVN0eWxlc2hlZXQocGF0aC5qb2luKHN0eWxlc1BhdGgsIGZpbGVQYXRoKSkpO1xufVxuXG4vKipcbiAqIExvYWQgYWxsIG9mIHRoZSBncmFtbWFycyBzeW5jaHJvbm91c2x5IGJlY2F1c2UgdGhlIHRvcC1sZXZlbCBsb2FkKCkgZnVuY3Rpb24gc2hvdWxkIGJlXG4gKiBzeW5jaHJvbm91cyBzbyB0aGF0IGl0IHdvcmtzIGFzIGV4cGVjdGVkIHdpdGggcmVxdWlyZSgpLlxuICovXG5mdW5jdGlvbiBsb2FkR3JhbW1hcnNTeW5jKHBhY2thZ2VQYXRoOiBzdHJpbmcpIHtcbiAgdmFyIGdyYW1tYXJzRGlyID0gcGF0aC5qb2luKHBhY2thZ2VQYXRoLCAnZ3JhbW1hcnMnKTtcbiAgaWYgKCFmcy5pc0RpcmVjdG9yeVN5bmMoZ3JhbW1hcnNEaXIpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZnMudHJhdmVyc2VUcmVlU3luYyhcbiAgICBncmFtbWFyc0RpcixcbiAgICBmaWxlID0+IGF0b20uZ3JhbW1hcnMubG9hZEdyYW1tYXJTeW5jKGZpbGUpLFxuICAgIGRpcmVjdG9yeSA9PiBudWxsXG4gICk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBsb2FkKGxpYlBhdGg6IHN0cmluZywgbWFpbkZpbGVuYW1lOiBzdHJpbmcpOiBhbnkge1xuICAgIGlmICghYXRvbS5udWNsaWRlKSB7XG4gICAgICBhdG9tLm51Y2xpZGUgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoIWF0b20ubnVjbGlkZVttYWluRmlsZW5hbWVdKSB7XG4gICAgICBhdG9tLm51Y2xpZGVbbWFpbkZpbGVuYW1lXSA9IHJlcXVpcmUocGF0aC5qb2luKGxpYlBhdGgsIG1haW5GaWxlbmFtZSkpO1xuXG4gICAgICB2YXIgcGFja2FnZVBhdGggPSBwYXRoLmRpcm5hbWUobGliUGF0aCk7XG4gICAgICBsb2FkU3R5bGVzKHBhdGguam9pbihwYWNrYWdlUGF0aCwgJ3N0eWxlcycpKTtcblxuICAgICAgbG9hZEdyYW1tYXJzU3luYyhwYWNrYWdlUGF0aCk7XG4gICAgfVxuICAgIHJldHVybiBhdG9tLm51Y2xpZGVbbWFpbkZpbGVuYW1lXTtcbiAgfSxcbn07XG4iXX0=
