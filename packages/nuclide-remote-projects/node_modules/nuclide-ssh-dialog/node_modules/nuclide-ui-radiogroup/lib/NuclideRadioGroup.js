
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var React = require('react-for-atom');

var PropTypes = React.PropTypes;

// Globally unique ID used as the "name" attribute to group radio inputs.
var uid = 0;

/**
 * A managed radio group component. Accepts arbitrary react elements as labels.
 */
var NuclideRadioGroup = React.createClass({
  displayName: 'NuclideRadioGroup',

  propTypes: {
    optionLabels: PropTypes.arrayOf(PropTypes.node).isRequired,
    selectedIndex: React.PropTypes.number.isRequired,
    onSelectedChange: React.PropTypes.func.isRequired
  },

  getDefaultProps: function getDefaultProps() {
    return {
      optionLabels: [],
      onSelectedChange: function onSelectedChange() {},
      selectedIndex: 0
    };
  },

  getInitialState: function getInitialState() {
    return {
      uid: uid++
    };
  },

  render: function render() {
    var _this = this;

    var checkboxes = this.props.optionLabels.map(function (labelContent, i) {
      var id = 'nuclide-radiogroup-' + uid + '-' + i;
      return React.createElement(
        'div',
        { key: i },
        React.createElement('input', {
          type: 'radio',
          checked: i === _this.props.selectedIndex,
          name: 'radiogroup-' + _this.state.uid,
          id: id,
          onChange: _this.props.onSelectedChange.bind(_this, i)
        }),
        React.createElement(
          'label',
          {
            className: 'nuclide-ui-radiogroup-label',
            htmlFor: id },
          labelContent
        )
      );
    });
    return React.createElement(
      'div',
      null,
      checkboxes
    );
  }
});

module.exports = NuclideRadioGroup;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXVpLXJhZGlvZ3JvdXAvbGliL051Y2xpZGVSYWRpb0dyb3VwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFdBQVcsQ0FBQzs7Ozs7Ozs7OztBQVdaLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDOztJQUVqQyxTQUFTLEdBQUksS0FBSyxDQUFsQixTQUFTOzs7QUFHZCxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUM7Ozs7O0FBS1osSUFBSSxpQkFBaUIsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDOzs7QUFFeEMsV0FBUyxFQUFFO0FBQ1QsZ0JBQVksRUFBRSxTQUFTLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFVO0FBQzFELGlCQUFhLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsVUFBVTtBQUNoRCxvQkFBZ0IsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVO0dBQ2xEOztBQUVELGlCQUFlLEVBQUEsMkJBQVE7QUFDckIsV0FBTztBQUNMLGtCQUFZLEVBQUUsRUFBRTtBQUNoQixzQkFBZ0IsRUFBRSw0QkFBTSxFQUFFO0FBQzFCLG1CQUFhLEVBQUUsQ0FBQztLQUNqQixDQUFDO0dBQ0g7O0FBRUQsaUJBQWUsRUFBQSwyQkFBUTtBQUNyQixXQUFPO0FBQ0wsU0FBRyxFQUFFLEdBQUcsRUFBRTtLQUNYLENBQUM7R0FDSDs7QUFFRCxRQUFNLEVBQUUsa0JBQXlCOzs7QUFDL0IsUUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLFVBQUMsWUFBWSxFQUFFLENBQUMsRUFBSztBQUNoRSxVQUFJLEVBQUUsR0FBRyxxQkFBcUIsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztBQUMvQyxhQUNFOztVQUFLLEdBQUcsRUFBRSxDQUFDLEFBQUM7UUFDVjtBQUNFLGNBQUksRUFBQyxPQUFPO0FBQ1osaUJBQU8sRUFBRSxDQUFDLEtBQUssTUFBSyxLQUFLLENBQUMsYUFBYSxBQUFDO0FBQ3hDLGNBQUksRUFBRSxhQUFhLEdBQUcsTUFBSyxLQUFLLENBQUMsR0FBRyxBQUFDO0FBQ3JDLFlBQUUsRUFBRSxFQUFFLEFBQUM7QUFDUCxrQkFBUSxFQUFFLE1BQUssS0FBSyxDQUFDLGdCQUFnQixDQUFDLElBQUksUUFBTyxDQUFDLENBQUMsQUFBQztVQUNwRDtRQUNGOzs7QUFDRSxxQkFBUyxFQUFDLDZCQUE2QjtBQUN2QyxtQkFBTyxFQUFFLEVBQUUsQUFBQztVQUNYLFlBQVk7U0FDUDtPQUNKLENBQ047S0FDSCxDQUFDLENBQUM7QUFDSCxXQUNFOzs7TUFDRyxVQUFVO0tBQ1AsQ0FDTjtHQUNIO0NBQ0YsQ0FBQyxDQUFDOztBQUVILE1BQU0sQ0FBQyxPQUFPLEdBQUcsaUJBQWlCLENBQUMiLCJmaWxlIjoiL3Zhci9mb2xkZXJzL3hmL3JzcGg0X2M1NzMxNXJzNTd4eHNkc2tyeG52MzZ0MC9UL3RtcGVtbTJIdXB1Ymxpc2hfcGFja2FnZXMvbnBtL251Y2xpZGUtdWktcmFkaW9ncm91cC9saWIvTnVjbGlkZVJhZGlvR3JvdXAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdC1mb3ItYXRvbScpO1xuXG52YXIge1Byb3BUeXBlc30gPSBSZWFjdDtcblxuLy8gR2xvYmFsbHkgdW5pcXVlIElEIHVzZWQgYXMgdGhlIFwibmFtZVwiIGF0dHJpYnV0ZSB0byBncm91cCByYWRpbyBpbnB1dHMuXG52YXIgdWlkID0gMDtcblxuLyoqXG4gKiBBIG1hbmFnZWQgcmFkaW8gZ3JvdXAgY29tcG9uZW50LiBBY2NlcHRzIGFyYml0cmFyeSByZWFjdCBlbGVtZW50cyBhcyBsYWJlbHMuXG4gKi9cbnZhciBOdWNsaWRlUmFkaW9Hcm91cCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcblxuICBwcm9wVHlwZXM6IHtcbiAgICBvcHRpb25MYWJlbHM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5ub2RlKS5pc1JlcXVpcmVkLFxuICAgIHNlbGVjdGVkSW5kZXg6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgICBvblNlbGVjdGVkQ2hhbmdlOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wcygpOiBhbnkge1xuICAgIHJldHVybiB7XG4gICAgICBvcHRpb25MYWJlbHM6IFtdLFxuICAgICAgb25TZWxlY3RlZENoYW5nZTogKCkgPT4ge30sXG4gICAgICBzZWxlY3RlZEluZGV4OiAwLFxuICAgIH07XG4gIH0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlKCk6IGFueSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVpZDogdWlkKyssXG4gICAgfTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uKCk6IFJlYWN0RWxlbWVudCB7XG4gICAgdmFyIGNoZWNrYm94ZXMgPSB0aGlzLnByb3BzLm9wdGlvbkxhYmVscy5tYXAoKGxhYmVsQ29udGVudCwgaSkgPT4ge1xuICAgICAgdmFyIGlkID0gJ251Y2xpZGUtcmFkaW9ncm91cC0nICsgdWlkICsgJy0nICsgaTtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYga2V5PXtpfT5cbiAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIHR5cGU9XCJyYWRpb1wiXG4gICAgICAgICAgICBjaGVja2VkPXtpID09PSB0aGlzLnByb3BzLnNlbGVjdGVkSW5kZXh9XG4gICAgICAgICAgICBuYW1lPXsncmFkaW9ncm91cC0nICsgdGhpcy5zdGF0ZS51aWR9XG4gICAgICAgICAgICBpZD17aWR9XG4gICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5wcm9wcy5vblNlbGVjdGVkQ2hhbmdlLmJpbmQodGhpcywgaSl9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8bGFiZWxcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cIm51Y2xpZGUtdWktcmFkaW9ncm91cC1sYWJlbFwiXG4gICAgICAgICAgICBodG1sRm9yPXtpZH0+XG4gICAgICAgICAgICB7bGFiZWxDb250ZW50fVxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9KTtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAge2NoZWNrYm94ZXN9XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBOdWNsaWRlUmFkaW9Hcm91cDtcbiJdfQ==
