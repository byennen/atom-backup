
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

/* This file contains a set of custom matchers for jasmine testing, which can be used
 * to get more detailed / useful diffs on various reults.
 */

var chalk = require('chalk');
var diff = require('diff');

/**
 * Do a recursive diff of two JSON objects. This function should not be called
 * directly, but rather added as a Jasmine custom matcher.
 * @param The expected result from the test.
 * @this A JasmineMatcher object.
 * @returns True if the objects are identical.
 */
function diffJson(expected) {
  var parts = diff.diffJson(expected, this.actual);

  var _formatMessage = formatMessage(parts);

  var message = _formatMessage.message;
  var changes = _formatMessage.changes;

  this.message = function () {
    return message;
  };
  return changes === 0;
}

/**
 * Do a line by line diff of two strings. This function should not be called
 * directly, but rather added as a Jasmine custom matcher.
 * @param The expected result from the test.
 * @this A JasmineMatcher object.
 * @returns True if the strings are identical.
 */
function diffLines(expected) {
  var parts = diff.diffLines(expected, this.actual);

  var _formatMessage2 = formatMessage(parts);

  var message = _formatMessage2.message;
  var changes = _formatMessage2.changes;

  this.message = function () {
    return message;
  };
  return changes === 0;
}

/**
 * Helper function that counts changes in the output from JsDiff, as well as
 * generates a colored message that shows diff output.
 * @param The output from JsDiff.
 * @returns On object containing the number of changes (added or removed parts),
 *   and a string containing the colored diff output.
 */
function formatMessage(parts) {
  var changes = 0,
      message = '';
  for (var part of parts) {
    var color = 'gray';
    if (part.added || part.removed) {
      ++changes;
      color = part.added ? 'green' : 'red';
    }
    message += chalk[color](part.value);
  }
  return { changes: changes, message: message };
}

module.exports = { diffJson: diffJson, diffLines: diffLines };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXRlc3QtaGVscGVycy9saWIvbWF0Y2hlcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxDQUFDOzs7Ozs7Ozs7Ozs7OztBQWVaLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM3QixJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7Ozs7Ozs7OztBQWUzQixTQUFTLFFBQVEsQ0FBQyxRQUFnQixFQUFXO0FBQzNDLE1BQUksS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzs7dUJBQ3hCLGFBQWEsQ0FBQyxLQUFLLENBQUM7O01BQXhDLE9BQU8sa0JBQVAsT0FBTztNQUFFLE9BQU8sa0JBQVAsT0FBTzs7QUFDckIsTUFBSSxDQUFDLE9BQU8sR0FBRztXQUFNLE9BQU87R0FBQSxDQUFDO0FBQzdCLFNBQU8sT0FBTyxLQUFLLENBQUMsQ0FBQztDQUN0Qjs7Ozs7Ozs7O0FBU0QsU0FBUyxTQUFTLENBQUMsUUFBZ0IsRUFBVztBQUM1QyxNQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7O3dCQUN6QixhQUFhLENBQUMsS0FBSyxDQUFDOztNQUF4QyxPQUFPLG1CQUFQLE9BQU87TUFBRSxPQUFPLG1CQUFQLE9BQU87O0FBQ3JCLE1BQUksQ0FBQyxPQUFPLEdBQUc7V0FBTSxPQUFPO0dBQUEsQ0FBQztBQUM3QixTQUFPLE9BQU8sS0FBSyxDQUFDLENBQUM7Q0FDdEI7Ozs7Ozs7OztBQVNELFNBQVMsYUFBYSxDQUFDLEtBQW9CLEVBQXNDO0FBQy9FLE1BQUksT0FBTyxHQUFHLENBQUM7TUFBRSxPQUFPLEdBQUcsRUFBRSxDQUFDO0FBQzlCLE9BQUssSUFBSSxJQUFJLElBQUksS0FBSyxFQUFFO0FBQ3RCLFFBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQztBQUNuQixRQUFJLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtBQUM5QixRQUFFLE9BQU8sQ0FBQztBQUNWLFdBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUM7S0FDdEM7QUFDRCxXQUFPLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUNyQztBQUNELFNBQU8sRUFBQyxPQUFPLEVBQVAsT0FBTyxFQUFFLE9BQU8sRUFBUCxPQUFPLEVBQUMsQ0FBQztDQUMzQjs7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHLEVBQUMsUUFBUSxFQUFSLFFBQVEsRUFBRSxTQUFTLEVBQVQsU0FBUyxFQUFDLENBQUMiLCJmaWxlIjoiL3Zhci9mb2xkZXJzL3hmL3JzcGg0X2M1NzMxNXJzNTd4eHNkc2tyeG52MzZ0MC9UL3RtcGVtbTJIdXB1Ymxpc2hfcGFja2FnZXMvbnBtL251Y2xpZGUtdGVzdC1oZWxwZXJzL2xpYi9tYXRjaGVycy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qIFRoaXMgZmlsZSBjb250YWlucyBhIHNldCBvZiBjdXN0b20gbWF0Y2hlcnMgZm9yIGphc21pbmUgdGVzdGluZywgd2hpY2ggY2FuIGJlIHVzZWRcbiAqIHRvIGdldCBtb3JlIGRldGFpbGVkIC8gdXNlZnVsIGRpZmZzIG9uIHZhcmlvdXMgcmV1bHRzLlxuICovXG5cbnZhciBjaGFsayA9IHJlcXVpcmUoJ2NoYWxrJyk7XG52YXIgZGlmZiA9IHJlcXVpcmUoJ2RpZmYnKTtcblxudHlwZSBDaGFuZ2UgPSB7XG4gIHZhbHVlOiBzdHJpbmc7XG4gIHJlbW92ZWQ/OiBib29sZWFuO1xuICBhZGRlZD86IGJvb2xlYW47XG59O1xuXG4vKipcbiAqIERvIGEgcmVjdXJzaXZlIGRpZmYgb2YgdHdvIEpTT04gb2JqZWN0cy4gVGhpcyBmdW5jdGlvbiBzaG91bGQgbm90IGJlIGNhbGxlZFxuICogZGlyZWN0bHksIGJ1dCByYXRoZXIgYWRkZWQgYXMgYSBKYXNtaW5lIGN1c3RvbSBtYXRjaGVyLlxuICogQHBhcmFtIFRoZSBleHBlY3RlZCByZXN1bHQgZnJvbSB0aGUgdGVzdC5cbiAqIEB0aGlzIEEgSmFzbWluZU1hdGNoZXIgb2JqZWN0LlxuICogQHJldHVybnMgVHJ1ZSBpZiB0aGUgb2JqZWN0cyBhcmUgaWRlbnRpY2FsLlxuICovXG5mdW5jdGlvbiBkaWZmSnNvbihleHBlY3RlZDogT2JqZWN0KTogYm9vbGVhbiB7XG4gIHZhciBwYXJ0cyA9IGRpZmYuZGlmZkpzb24oZXhwZWN0ZWQsIHRoaXMuYWN0dWFsKTtcbiAgdmFyIHttZXNzYWdlLCBjaGFuZ2VzfSA9IGZvcm1hdE1lc3NhZ2UocGFydHMpO1xuICB0aGlzLm1lc3NhZ2UgPSAoKSA9PiBtZXNzYWdlO1xuICByZXR1cm4gY2hhbmdlcyA9PT0gMDtcbn1cblxuLyoqXG4gKiBEbyBhIGxpbmUgYnkgbGluZSBkaWZmIG9mIHR3byBzdHJpbmdzLiBUaGlzIGZ1bmN0aW9uIHNob3VsZCBub3QgYmUgY2FsbGVkXG4gKiBkaXJlY3RseSwgYnV0IHJhdGhlciBhZGRlZCBhcyBhIEphc21pbmUgY3VzdG9tIG1hdGNoZXIuXG4gKiBAcGFyYW0gVGhlIGV4cGVjdGVkIHJlc3VsdCBmcm9tIHRoZSB0ZXN0LlxuICogQHRoaXMgQSBKYXNtaW5lTWF0Y2hlciBvYmplY3QuXG4gKiBAcmV0dXJucyBUcnVlIGlmIHRoZSBzdHJpbmdzIGFyZSBpZGVudGljYWwuXG4gKi9cbmZ1bmN0aW9uIGRpZmZMaW5lcyhleHBlY3RlZDogT2JqZWN0KTogYm9vbGVhbiB7XG4gIHZhciBwYXJ0cyA9IGRpZmYuZGlmZkxpbmVzKGV4cGVjdGVkLCB0aGlzLmFjdHVhbCk7XG4gIHZhciB7bWVzc2FnZSwgY2hhbmdlc30gPSBmb3JtYXRNZXNzYWdlKHBhcnRzKTtcbiAgdGhpcy5tZXNzYWdlID0gKCkgPT4gbWVzc2FnZTtcbiAgcmV0dXJuIGNoYW5nZXMgPT09IDA7XG59XG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRoYXQgY291bnRzIGNoYW5nZXMgaW4gdGhlIG91dHB1dCBmcm9tIEpzRGlmZiwgYXMgd2VsbCBhc1xuICogZ2VuZXJhdGVzIGEgY29sb3JlZCBtZXNzYWdlIHRoYXQgc2hvd3MgZGlmZiBvdXRwdXQuXG4gKiBAcGFyYW0gVGhlIG91dHB1dCBmcm9tIEpzRGlmZi5cbiAqIEByZXR1cm5zIE9uIG9iamVjdCBjb250YWluaW5nIHRoZSBudW1iZXIgb2YgY2hhbmdlcyAoYWRkZWQgb3IgcmVtb3ZlZCBwYXJ0cyksXG4gKiAgIGFuZCBhIHN0cmluZyBjb250YWluaW5nIHRoZSBjb2xvcmVkIGRpZmYgb3V0cHV0LlxuICovXG5mdW5jdGlvbiBmb3JtYXRNZXNzYWdlKHBhcnRzOiBBcnJheTxDaGFuZ2U+KToge2NoYW5nZXM6IG51bWJlciwgbWVzc2FnZTogc3RyaW5nfSB7XG4gIHZhciBjaGFuZ2VzID0gMCwgbWVzc2FnZSA9ICcnO1xuICBmb3IgKHZhciBwYXJ0IG9mIHBhcnRzKSB7XG4gICAgdmFyIGNvbG9yID0gJ2dyYXknO1xuICAgIGlmIChwYXJ0LmFkZGVkIHx8IHBhcnQucmVtb3ZlZCkge1xuICAgICAgKytjaGFuZ2VzO1xuICAgICAgY29sb3IgPSBwYXJ0LmFkZGVkID8gJ2dyZWVuJyA6ICdyZWQnO1xuICAgIH1cbiAgICBtZXNzYWdlICs9IGNoYWxrW2NvbG9yXShwYXJ0LnZhbHVlKTtcbiAgfVxuICByZXR1cm4ge2NoYW5nZXMsIG1lc3NhZ2V9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtkaWZmSnNvbiwgZGlmZkxpbmVzfTtcbiJdfQ==
