
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var path = require('path');

var _require = require('child_process');

var spawnSync = _require.spawnSync;

function getApmNodePath() {
  var apmDir = path.dirname(atom.packages.getApmPath());
  return path.normalize(path.join(apmDir, 'node'));
}

function getApmNodeModulesPath() {
  var apmDir = path.dirname(atom.packages.getApmPath());
  return path.normalize(path.join(apmDir, '..', 'node_modules'));
}

function runScriptInApmNode(script) {
  var args = ['-e', script];
  var options = { env: { NODE_PATH: getApmNodeModulesPath() } };
  var output = spawnSync(getApmNodePath(), args, options);
  return output.stdout.toString();
}

function getPassword(service, account) {
  var script = '\n    var keytar = require(\'keytar\');\n    var service = ' + JSON.stringify(service) + ';\n    var account = ' + JSON.stringify(account) + ';\n    var password = keytar.getPassword(service, account);\n    console.log(JSON.stringify(password));\n  ';
  return JSON.parse(runScriptInApmNode(script));
}

function replacePassword(service, account, password) {
  var script = '\n    var keytar = require(\'keytar\');\n    var service = ' + JSON.stringify(service) + ';\n    var account = ' + JSON.stringify(account) + ';\n    var password = ' + JSON.stringify(password) + ';\n    var result = keytar.replacePassword(service, account, password);\n    console.log(JSON.stringify(result));\n  ';
  return JSON.parse(runScriptInApmNode(script));
}

module.exports = {
  getPassword: getPassword,
  replacePassword: replacePassword,
  __test__: {
    runScriptInApmNode: runScriptInApmNode,
    getApmNodePath: getApmNodePath,
    getApmNodeModulesPath: getApmNodeModulesPath
  }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWtleXRhci13cmFwcGVyL2xpYi9tYWluLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFdBQVcsQ0FBQzs7Ozs7Ozs7OztBQVdaLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQzs7ZUFDVCxPQUFPLENBQUMsZUFBZSxDQUFDOztJQUFyQyxTQUFTLFlBQVQsU0FBUzs7QUFFZCxTQUFTLGNBQWMsR0FBRztBQUN4QixNQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztBQUN0RCxTQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztDQUNsRDs7QUFFRCxTQUFTLHFCQUFxQixHQUFHO0FBQy9CLE1BQUksTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0FBQ3RELFNBQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQztDQUNoRTs7QUFFRCxTQUFTLGtCQUFrQixDQUFDLE1BQWMsRUFBRTtBQUMxQyxNQUFJLElBQUksR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztBQUMxQixNQUFJLE9BQU8sR0FBRyxFQUFDLEdBQUcsRUFBRSxFQUFDLFNBQVMsRUFBRSxxQkFBcUIsRUFBRSxFQUFDLEVBQUMsQ0FBQztBQUMxRCxNQUFJLE1BQU0sR0FBRyxTQUFTLENBQUMsY0FBYyxFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3hELFNBQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztDQUNqQzs7QUFFRCxTQUFTLFdBQVcsQ0FBQyxPQUFlLEVBQUUsT0FBZSxFQUFXO0FBQzlELE1BQUksTUFBTSxtRUFFUSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyw2QkFDdkIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsZ0hBR3hDLENBQUM7QUFDRixTQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztDQUMvQzs7QUFFRCxTQUFTLGVBQWUsQ0FDcEIsT0FBZSxFQUNmLE9BQWUsRUFDZixRQUFnQixFQUFZO0FBQzlCLE1BQUksTUFBTSxtRUFFUSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyw2QkFDdkIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsOEJBQ3RCLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLDBIQUcxQyxDQUFDO0FBQ0YsU0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7Q0FDL0M7O0FBRUQsTUFBTSxDQUFDLE9BQU8sR0FBRztBQUNmLGFBQVcsRUFBWCxXQUFXO0FBQ1gsaUJBQWUsRUFBZixlQUFlO0FBQ2YsVUFBUSxFQUFFO0FBQ1Isc0JBQWtCLEVBQWxCLGtCQUFrQjtBQUNsQixrQkFBYyxFQUFkLGNBQWM7QUFDZCx5QkFBcUIsRUFBckIscUJBQXFCO0dBQ3RCO0NBQ0YsQ0FBQyIsImZpbGUiOiIvdmFyL2ZvbGRlcnMveGYvcnNwaDRfYzU3MzE1cnM1N3h4c2Rza3J4bnYzNnQwL1QvdG1wZW1tMkh1cHVibGlzaF9wYWNrYWdlcy9ucG0vbnVjbGlkZS1rZXl0YXItd3JhcHBlci9saWIvbWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xudmFyIHtzcGF3blN5bmN9ID0gcmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpO1xuXG5mdW5jdGlvbiBnZXRBcG1Ob2RlUGF0aCgpIHtcbiAgdmFyIGFwbURpciA9IHBhdGguZGlybmFtZShhdG9tLnBhY2thZ2VzLmdldEFwbVBhdGgoKSk7XG4gIHJldHVybiBwYXRoLm5vcm1hbGl6ZShwYXRoLmpvaW4oYXBtRGlyLCAnbm9kZScpKTtcbn1cblxuZnVuY3Rpb24gZ2V0QXBtTm9kZU1vZHVsZXNQYXRoKCkge1xuICB2YXIgYXBtRGlyID0gcGF0aC5kaXJuYW1lKGF0b20ucGFja2FnZXMuZ2V0QXBtUGF0aCgpKTtcbiAgcmV0dXJuIHBhdGgubm9ybWFsaXplKHBhdGguam9pbihhcG1EaXIsICcuLicsICdub2RlX21vZHVsZXMnKSk7XG59XG5cbmZ1bmN0aW9uIHJ1blNjcmlwdEluQXBtTm9kZShzY3JpcHQ6IHN0cmluZykge1xuICB2YXIgYXJncyA9IFsnLWUnLCBzY3JpcHRdO1xuICB2YXIgb3B0aW9ucyA9IHtlbnY6IHtOT0RFX1BBVEg6IGdldEFwbU5vZGVNb2R1bGVzUGF0aCgpfX07XG4gIHZhciBvdXRwdXQgPSBzcGF3blN5bmMoZ2V0QXBtTm9kZVBhdGgoKSwgYXJncywgb3B0aW9ucyk7XG4gIHJldHVybiBvdXRwdXQuc3Rkb3V0LnRvU3RyaW5nKCk7XG59XG5cbmZ1bmN0aW9uIGdldFBhc3N3b3JkKHNlcnZpY2U6IHN0cmluZywgYWNjb3VudDogc3RyaW5nKTogP3N0cmluZyB7XG4gIHZhciBzY3JpcHQgPSBgXG4gICAgdmFyIGtleXRhciA9IHJlcXVpcmUoJ2tleXRhcicpO1xuICAgIHZhciBzZXJ2aWNlID0gJHtKU09OLnN0cmluZ2lmeShzZXJ2aWNlKX07XG4gICAgdmFyIGFjY291bnQgPSAke0pTT04uc3RyaW5naWZ5KGFjY291bnQpfTtcbiAgICB2YXIgcGFzc3dvcmQgPSBrZXl0YXIuZ2V0UGFzc3dvcmQoc2VydmljZSwgYWNjb3VudCk7XG4gICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkocGFzc3dvcmQpKTtcbiAgYDtcbiAgcmV0dXJuIEpTT04ucGFyc2UocnVuU2NyaXB0SW5BcG1Ob2RlKHNjcmlwdCkpO1xufVxuXG5mdW5jdGlvbiByZXBsYWNlUGFzc3dvcmQoXG4gICAgc2VydmljZTogc3RyaW5nLFxuICAgIGFjY291bnQ6IHN0cmluZyxcbiAgICBwYXNzd29yZDogc3RyaW5nKTogP2Jvb2xlYW4ge1xuICB2YXIgc2NyaXB0ID0gYFxuICAgIHZhciBrZXl0YXIgPSByZXF1aXJlKCdrZXl0YXInKTtcbiAgICB2YXIgc2VydmljZSA9ICR7SlNPTi5zdHJpbmdpZnkoc2VydmljZSl9O1xuICAgIHZhciBhY2NvdW50ID0gJHtKU09OLnN0cmluZ2lmeShhY2NvdW50KX07XG4gICAgdmFyIHBhc3N3b3JkID0gJHtKU09OLnN0cmluZ2lmeShwYXNzd29yZCl9O1xuICAgIHZhciByZXN1bHQgPSBrZXl0YXIucmVwbGFjZVBhc3N3b3JkKHNlcnZpY2UsIGFjY291bnQsIHBhc3N3b3JkKTtcbiAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShyZXN1bHQpKTtcbiAgYDtcbiAgcmV0dXJuIEpTT04ucGFyc2UocnVuU2NyaXB0SW5BcG1Ob2RlKHNjcmlwdCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0UGFzc3dvcmQsXG4gIHJlcGxhY2VQYXNzd29yZCxcbiAgX190ZXN0X186IHtcbiAgICBydW5TY3JpcHRJbkFwbU5vZGUsXG4gICAgZ2V0QXBtTm9kZVBhdGgsXG4gICAgZ2V0QXBtTm9kZU1vZHVsZXNQYXRoLFxuICB9XG59O1xuIl19
