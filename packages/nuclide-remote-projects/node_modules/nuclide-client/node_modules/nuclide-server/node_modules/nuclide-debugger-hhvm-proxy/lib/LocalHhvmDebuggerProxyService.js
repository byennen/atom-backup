
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _require = require('./utils');

var log = _require.log;
var logError = _require.logError;

var _require2 = require('./connect');

var DbgpConnector = _require2.DbgpConnector;

// Connection states
var INITIAL = 'initial';
var CONNECTING = 'connecting';
var CONNECTED = 'connected';
var CLOSED = 'closed';
var ERROR = 'error';

var HhvmDebuggerProxyService = require('./HhvmDebuggerProxyService');

var NOTIFY_EVENT = 'notify';
var SESSION_END_EVENT = 'session-end';

/**
 * Proxy for converting between Chrome dev tools debugger
 * and HHVM Dbgp debuggee.
 *
 * Chrome Debugging protocol spec is here:
 * https://developer.chrome.com/devtools/docs/protocol/1.1/index
 *
 * Dbgp spec is here:
 * http://xdebug.org/docs-dbgp.php
 *
 * Usage:
 *    After construction, call onNotify() with a callback to receive Chrome
 *    Notifications.
 *    Call attach() to attach to the dbgp debuggee.
 *    After the promise returned by attach() is resolved, call sendCommand()
 *    to send Chrome Commands, and be prepared to receive notifications on the
 *    callback registered with onNotify().
 */

var LocalHhvmDebuggerProxyService = (function (_HhvmDebuggerProxyService) {
  _inherits(LocalHhvmDebuggerProxyService, _HhvmDebuggerProxyService);

  function LocalHhvmDebuggerProxyService() {
    _classCallCheck(this, LocalHhvmDebuggerProxyService);

    _get(Object.getPrototypeOf(LocalHhvmDebuggerProxyService.prototype), 'constructor', this).call(this);

    this._state = INITIAL;
    this._connector = null;
    this._translator = null;

    var _require3 = require("events");

    var EventEmitter = _require3.EventEmitter;

    this._emitter = new EventEmitter();
  }

  _createClass(LocalHhvmDebuggerProxyService, [{
    key: 'onNotify',
    value: function onNotify(callback) {
      return this._addListener(NOTIFY_EVENT, callback);
    }
  }, {
    key: 'onSessionEnd',
    value: function onSessionEnd(callback) {
      return this._addListener(SESSION_END_EVENT, callback);
    }
  }, {
    key: '_addListener',
    value: function _addListener(eventName, callback) {
      var _this = this;

      this._emitter.addListener(eventName, callback);
      return {
        dispose: function dispose() {
          return _this._emitter.removeListener(eventName, callback);
        }
      };
    }
  }, {
    key: 'attach',
    value: _asyncToGenerator(function* (config) {
      var _this2 = this;

      log('Connecting config: ' + JSON.stringify(config));

      this._setState(CONNECTING);

      var connector = new DbgpConnector(config);
      this._connector = connector;
      var socket = yield connector.attach();
      socket.on('end', this._onEnd.bind(this));
      socket.on('error', this._onError.bind(this));

      var _require4 = require('./MessageTranslator');

      var MessageTranslator = _require4.MessageTranslator;

      this._translator = new MessageTranslator(socket, function (message) {
        return _this2._emitter.emit(NOTIFY_EVENT, message);
      });
      this._translator.onSessionEnd(this._onEnd.bind(this));

      this._setState(CONNECTED);

      return 'HHVM connected';
    })
  }, {
    key: 'sendCommand',
    value: function sendCommand(message) {
      log('Recieved command: ' + message);
      if (this._translator) {
        this._translator.handleCommand(message);
      }
    }
  }, {
    key: '_onEnd',
    value: function _onEnd() {
      this._setState(CLOSED);
    }
  }, {
    key: '_onError',
    value: function _onError(error) {
      this._setState(ERROR);
      log('connection error ' + error.code);
    }
  }, {
    key: '_setState',
    value: function _setState(newState) {
      log('state change from ' + this._state + ' to ' + newState);
      // TODO: Consider logging socket info: remote ip, etc.
      this._state = newState;

      if (this._state === ERROR || this._state === CLOSED) {
        this.dispose();
      }
    }
  }, {
    key: 'dispose',
    value: function dispose() {
      log('Proxy: Ending session');
      this._emitter.emit(SESSION_END_EVENT);
      this._emitter.removeAllListeners(SESSION_END_EVENT);

      if (this._translator) {
        this._translator.dispose();
        this._translator = null;
      }
      if (this._connector) {
        this._connector.dispose();
        this._connector = null;
      }
    }
  }]);

  return LocalHhvmDebuggerProxyService;
})(HhvmDebuggerProxyService);

module.exports = LocalHhvmDebuggerProxyService;
//# sourceMappingURL=data:application/json;base64,
