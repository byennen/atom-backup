
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var keyMirror = require('nuclide-commons').object.keyMirror;

// Keep in sync with the clang Python binding.
// Maps clang's cursor types to the actual declaration types: for a full list see
// https://github.com/llvm-mirror/clang/blob/master/include/clang/Basic/DeclNodes.td
var ClangCursorToDeclarationTypes = {
  UNEXPOSED_DECL: null,
  STRUCT_DECL: 'Record',
  UNION_DECL: 'Record',
  CLASS_DECL: 'CXXRecord',
  ENUM_DECL: 'Enum',
  FIELD_DECL: 'Field',
  ENUM_CONSTANT_DECL: 'EnumConstant',
  FUNCTION_DECL: 'Function',
  VAR_DECL: 'Var',
  PARM_DECL: 'ParmVar',
  OBJC_INTERFACE_DECL: 'ObjCInterface',
  OBJC_CATEGORY_DECL: 'ObjCCategory',
  OBJC_PROTOCOL_DECL: 'ObjCProtocol',
  OBJC_PROPERTY_DECL: 'ObjCProperty',
  OBJC_IVAR_DECL: 'ObjCIVar',
  OBJC_INSTANCE_METHOD_DECL: 'ObjCMethod',
  OBJC_CLASS_METHOD_DECL: 'ObjCMethod',
  OBJC_IMPLEMENTATION_DECL: 'ObjCImplementation',
  OBJC_CATEGORY_IMPL_DECL: 'ObjCCategoryImpl',
  TYPEDEF_DECL: 'Typedef',
  CXX_METHOD: 'CXXMethod',
  NAMESPACE: 'Namespace',
  LINKAGE_SPEC: 'LinkageSpec',
  CONSTRUCTOR: 'CXXConstructor',
  DESTRUCTOR: 'CXXDestructor',
  CONVERSION_FUNCTION: 'CXXConversion',
  TEMPLATE_TYPE_PARAMETER: 'TemplateTypeParm',
  TEMPLATE_NON_TYPE_PARAMETER: 'NonTypeTemplateParm',
  TEMPLATE_TEMPLATE_PARAMETER: 'TemplateTemplateParm',
  FUNCTION_TEMPLATE: 'FunctionTemplate',
  CLASS_TEMPLATE: 'ClassTemplate',
  CLASS_TEMPLATE_PARTIAL_SPECIALIZATION: 'ClassTemplatePartialSpecialization',
  NAMESPACE_ALIAS: 'NamespaceAlias',
  USING_DIRECTIVE: 'UsingDirective',
  USING_DECLARATION: 'Using',
  TYPE_ALIAS_DECL: 'TypeAlias',
  OBJC_SYNTHESIZE_DECL: 'ObjCSynthesize',
  OBJC_DYNAMIC_DECL: 'ObjCDynamic',
  CXX_ACCESS_SPEC_DECL: 'AccessSpec'
};

var ClangCursorTypes = keyMirror(ClangCursorToDeclarationTypes);

module.exports = {
  ClangCursorToDeclarationTypes: ClangCursorToDeclarationTypes,
  ClangCursorTypes: ClangCursorTypes
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWNsYW5nL2xpYi9tYWluLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFdBQVcsQ0FBQzs7Ozs7Ozs7OztJQVdQLFNBQVMsR0FBSSxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxNQUFNLENBQTlDLFNBQVM7Ozs7O0FBS2QsSUFBSSw2QkFBNkIsR0FBRztBQUNsQyxnQkFBYyxFQUFFLElBQUk7QUFDcEIsYUFBVyxFQUFFLFFBQVE7QUFDckIsWUFBVSxFQUFFLFFBQVE7QUFDcEIsWUFBVSxFQUFFLFdBQVc7QUFDdkIsV0FBUyxFQUFFLE1BQU07QUFDakIsWUFBVSxFQUFFLE9BQU87QUFDbkIsb0JBQWtCLEVBQUUsY0FBYztBQUNsQyxlQUFhLEVBQUUsVUFBVTtBQUN6QixVQUFRLEVBQUUsS0FBSztBQUNmLFdBQVMsRUFBRSxTQUFTO0FBQ3BCLHFCQUFtQixFQUFFLGVBQWU7QUFDcEMsb0JBQWtCLEVBQUUsY0FBYztBQUNsQyxvQkFBa0IsRUFBRSxjQUFjO0FBQ2xDLG9CQUFrQixFQUFFLGNBQWM7QUFDbEMsZ0JBQWMsRUFBRSxVQUFVO0FBQzFCLDJCQUF5QixFQUFFLFlBQVk7QUFDdkMsd0JBQXNCLEVBQUUsWUFBWTtBQUNwQywwQkFBd0IsRUFBRSxvQkFBb0I7QUFDOUMseUJBQXVCLEVBQUUsa0JBQWtCO0FBQzNDLGNBQVksRUFBRSxTQUFTO0FBQ3ZCLFlBQVUsRUFBRSxXQUFXO0FBQ3ZCLFdBQVMsRUFBRSxXQUFXO0FBQ3RCLGNBQVksRUFBRSxhQUFhO0FBQzNCLGFBQVcsRUFBRSxnQkFBZ0I7QUFDN0IsWUFBVSxFQUFFLGVBQWU7QUFDM0IscUJBQW1CLEVBQUUsZUFBZTtBQUNwQyx5QkFBdUIsRUFBRSxrQkFBa0I7QUFDM0MsNkJBQTJCLEVBQUUscUJBQXFCO0FBQ2xELDZCQUEyQixFQUFFLHNCQUFzQjtBQUNuRCxtQkFBaUIsRUFBRSxrQkFBa0I7QUFDckMsZ0JBQWMsRUFBRSxlQUFlO0FBQy9CLHVDQUFxQyxFQUFFLG9DQUFvQztBQUMzRSxpQkFBZSxFQUFFLGdCQUFnQjtBQUNqQyxpQkFBZSxFQUFFLGdCQUFnQjtBQUNqQyxtQkFBaUIsRUFBRSxPQUFPO0FBQzFCLGlCQUFlLEVBQUUsV0FBVztBQUM1QixzQkFBb0IsRUFBRSxnQkFBZ0I7QUFDdEMsbUJBQWlCLEVBQUUsYUFBYTtBQUNoQyxzQkFBb0IsRUFBRSxZQUFZO0NBQ25DLENBQUM7O0FBRUYsSUFBSSxnQkFBZ0IsR0FBRyxTQUFTLENBQUMsNkJBQTZCLENBQUMsQ0FBQzs7QUFFaEUsTUFBTSxDQUFDLE9BQU8sR0FBRztBQUNmLCtCQUE2QixFQUE3Qiw2QkFBNkI7QUFDN0Isa0JBQWdCLEVBQWhCLGdCQUFnQjtDQUNqQixDQUFDIiwiZmlsZSI6Ii92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWNsYW5nL2xpYi9tYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCc7XG4vKiBAZmxvdyAqL1xuXG4vKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpblxuICogdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxudmFyIHtrZXlNaXJyb3J9ID0gcmVxdWlyZSgnbnVjbGlkZS1jb21tb25zJykub2JqZWN0O1xuXG4vLyBLZWVwIGluIHN5bmMgd2l0aCB0aGUgY2xhbmcgUHl0aG9uIGJpbmRpbmcuXG4vLyBNYXBzIGNsYW5nJ3MgY3Vyc29yIHR5cGVzIHRvIHRoZSBhY3R1YWwgZGVjbGFyYXRpb24gdHlwZXM6IGZvciBhIGZ1bGwgbGlzdCBzZWVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9sbHZtLW1pcnJvci9jbGFuZy9ibG9iL21hc3Rlci9pbmNsdWRlL2NsYW5nL0Jhc2ljL0RlY2xOb2Rlcy50ZFxudmFyIENsYW5nQ3Vyc29yVG9EZWNsYXJhdGlvblR5cGVzID0ge1xuICBVTkVYUE9TRURfREVDTDogbnVsbCxcbiAgU1RSVUNUX0RFQ0w6ICdSZWNvcmQnLFxuICBVTklPTl9ERUNMOiAnUmVjb3JkJyxcbiAgQ0xBU1NfREVDTDogJ0NYWFJlY29yZCcsXG4gIEVOVU1fREVDTDogJ0VudW0nLFxuICBGSUVMRF9ERUNMOiAnRmllbGQnLFxuICBFTlVNX0NPTlNUQU5UX0RFQ0w6ICdFbnVtQ29uc3RhbnQnLFxuICBGVU5DVElPTl9ERUNMOiAnRnVuY3Rpb24nLFxuICBWQVJfREVDTDogJ1ZhcicsXG4gIFBBUk1fREVDTDogJ1Bhcm1WYXInLFxuICBPQkpDX0lOVEVSRkFDRV9ERUNMOiAnT2JqQ0ludGVyZmFjZScsXG4gIE9CSkNfQ0FURUdPUllfREVDTDogJ09iakNDYXRlZ29yeScsXG4gIE9CSkNfUFJPVE9DT0xfREVDTDogJ09iakNQcm90b2NvbCcsXG4gIE9CSkNfUFJPUEVSVFlfREVDTDogJ09iakNQcm9wZXJ0eScsXG4gIE9CSkNfSVZBUl9ERUNMOiAnT2JqQ0lWYXInLFxuICBPQkpDX0lOU1RBTkNFX01FVEhPRF9ERUNMOiAnT2JqQ01ldGhvZCcsXG4gIE9CSkNfQ0xBU1NfTUVUSE9EX0RFQ0w6ICdPYmpDTWV0aG9kJyxcbiAgT0JKQ19JTVBMRU1FTlRBVElPTl9ERUNMOiAnT2JqQ0ltcGxlbWVudGF0aW9uJyxcbiAgT0JKQ19DQVRFR09SWV9JTVBMX0RFQ0w6ICdPYmpDQ2F0ZWdvcnlJbXBsJyxcbiAgVFlQRURFRl9ERUNMOiAnVHlwZWRlZicsXG4gIENYWF9NRVRIT0Q6ICdDWFhNZXRob2QnLFxuICBOQU1FU1BBQ0U6ICdOYW1lc3BhY2UnLFxuICBMSU5LQUdFX1NQRUM6ICdMaW5rYWdlU3BlYycsXG4gIENPTlNUUlVDVE9SOiAnQ1hYQ29uc3RydWN0b3InLFxuICBERVNUUlVDVE9SOiAnQ1hYRGVzdHJ1Y3RvcicsXG4gIENPTlZFUlNJT05fRlVOQ1RJT046ICdDWFhDb252ZXJzaW9uJyxcbiAgVEVNUExBVEVfVFlQRV9QQVJBTUVURVI6ICdUZW1wbGF0ZVR5cGVQYXJtJyxcbiAgVEVNUExBVEVfTk9OX1RZUEVfUEFSQU1FVEVSOiAnTm9uVHlwZVRlbXBsYXRlUGFybScsXG4gIFRFTVBMQVRFX1RFTVBMQVRFX1BBUkFNRVRFUjogJ1RlbXBsYXRlVGVtcGxhdGVQYXJtJyxcbiAgRlVOQ1RJT05fVEVNUExBVEU6ICdGdW5jdGlvblRlbXBsYXRlJyxcbiAgQ0xBU1NfVEVNUExBVEU6ICdDbGFzc1RlbXBsYXRlJyxcbiAgQ0xBU1NfVEVNUExBVEVfUEFSVElBTF9TUEVDSUFMSVpBVElPTjogJ0NsYXNzVGVtcGxhdGVQYXJ0aWFsU3BlY2lhbGl6YXRpb24nLFxuICBOQU1FU1BBQ0VfQUxJQVM6ICdOYW1lc3BhY2VBbGlhcycsXG4gIFVTSU5HX0RJUkVDVElWRTogJ1VzaW5nRGlyZWN0aXZlJyxcbiAgVVNJTkdfREVDTEFSQVRJT046ICdVc2luZycsXG4gIFRZUEVfQUxJQVNfREVDTDogJ1R5cGVBbGlhcycsXG4gIE9CSkNfU1lOVEhFU0laRV9ERUNMOiAnT2JqQ1N5bnRoZXNpemUnLFxuICBPQkpDX0RZTkFNSUNfREVDTDogJ09iakNEeW5hbWljJyxcbiAgQ1hYX0FDQ0VTU19TUEVDX0RFQ0w6ICdBY2Nlc3NTcGVjJyxcbn07XG5cbnZhciBDbGFuZ0N1cnNvclR5cGVzID0ga2V5TWlycm9yKENsYW5nQ3Vyc29yVG9EZWNsYXJhdGlvblR5cGVzKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIENsYW5nQ3Vyc29yVG9EZWNsYXJhdGlvblR5cGVzLFxuICBDbGFuZ0N1cnNvclR5cGVzLFxufTtcbiJdfQ==
