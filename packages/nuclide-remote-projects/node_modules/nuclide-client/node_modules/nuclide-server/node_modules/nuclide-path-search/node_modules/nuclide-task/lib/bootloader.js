
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _require = require('events');

var EventEmitter = _require.EventEmitter;

/**
 * Task creates and manages communication with another Node process. In addition
 * to executing ordinary .js files, the other Node process can also run .js files
 * under the Babel transpiler, so long as they have the `'use babel'` pragma
 * used in Atom.
 */

var Task = (function () {
  function Task() {
    var _this = this;

    _classCallCheck(this, Task);

    this._id = 0;
    this._emitter = new EventEmitter();
    var options = { silent: true }; // Needed so stdout/stderr are available.
    var child = this._child = require('child_process').fork(require('path').join(__dirname, '/bootstrap.js'), options);
    /*eslint-disable no-console*/
    var log = function log(buffer) {
      return console.log('TASK(' + child.pid + '): ' + buffer);
    };
    /*eslint-enable no-console*/
    child.stdout.on('data', log);
    child.stderr.on('data', log);
    // The Flow error on the following line is due to a bug in Flow:
    // https://github.com/facebook/flow/issues/428.
    child.on('message', function (response) {
      var id = response['id'];
      _this._emitter.emit(id, response);
    });
    child.on('error', log);
    child.send({
      action: 'bootstrap',
      transpiler: require.resolve('nuclide-node-transpiler')
    });
  }

  /**
   * Invokes a remote method that is specified as an export of a .js file.
   *
   * The absolute path to the .js file must be specified via the `file`
   * property. In practice, `require.resolve()` is helpful in producing this
   * path.
   *
   * If the .js file exports an object with multiple properties (rather than a
   * single function), the name of the property (that should correspond to a
   * function to invoke) must be specified via the `method` property.
   *
   * Any arguments to pass to the function must be specified via the `args`
   * property as an Array. (This property can be omitted if there are no args.)
   *
   * Note that both the args for the remote method, as well as the return type
   * of the remote method, must be JSON-serializable. (The return type of the
   * remote method can also be a Promise that resolves to a JSON-serializable
   * object.)
   *
   * @return Promise that resolves with the result of invoking the remote
   *     method. If an error is thrown, a rejected Promise will be returned
   *     instead.
   */

  _createClass(Task, [{
    key: 'invokeRemoteMethod',
    value: function invokeRemoteMethod(params) {
      var _this2 = this;

      var requestId = (++this._id).toString(16);
      var request = {
        id: requestId,
        action: 'request',
        file: params.file,
        method: params.method,
        args: params.args
      };

      return new Promise(function (resolve, reject) {
        // Ensure the response listener is set up before the request is sent.
        _this2._emitter.once(requestId, function (response) {
          var err = response['error'];
          if (!err) {
            resolve(response['result']);
          } else {
            // Need to synthesize an Error object from its JSON representation.
            var error = new Error();
            error.message = err.message;
            error.stack = err.stack;
            reject(error);
          }
        });
        _this2._child.send(request);
      });
    }
  }, {
    key: 'dispose',
    value: function dispose() {
      if (this._child.connected) {
        this._child.disconnect();
      }
      this._emitter.removeAllListeners();
    }
  }]);

  return Task;
})();

function createTask() {
  return new Task();
}

module.exports = {
  createTask: createTask
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXRhc2svbGliL2Jvb3Rsb2FkZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7ZUFXUyxPQUFPLENBQUMsUUFBUSxDQUFDOztJQUFqQyxZQUFZLFlBQVosWUFBWTs7Ozs7Ozs7O0lBY1gsSUFBSTtBQUNHLFdBRFAsSUFBSSxHQUNNOzs7MEJBRFYsSUFBSTs7QUFFTixRQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztBQUNiLFFBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztBQUNuQyxRQUFJLE9BQU8sR0FBRyxFQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUMsQ0FBQztBQUM3QixRQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FDN0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLGVBQWUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDOztBQUVyRSxRQUFJLEdBQUcsR0FBRyxTQUFOLEdBQUcsQ0FBRyxNQUFNO2FBQUksT0FBTyxDQUFDLEdBQUcsV0FBUyxLQUFLLENBQUMsR0FBRyxXQUFNLE1BQU0sQ0FBRztLQUFBLENBQUM7O0FBRWpFLFNBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztBQUM3QixTQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7OztBQUc3QixTQUFLLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxVQUFBLFFBQVEsRUFBSTtBQUM5QixVQUFJLEVBQUUsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDeEIsWUFBSyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztLQUNsQyxDQUFDLENBQUM7QUFDSCxTQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQztBQUN2QixTQUFLLENBQUMsSUFBSSxDQUFDO0FBQ1QsWUFBTSxFQUFFLFdBQVc7QUFDbkIsZ0JBQVUsRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLHlCQUF5QixDQUFDO0tBQ3ZELENBQUMsQ0FBQztHQUNKOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztlQXZCRyxJQUFJOztXQWdEVSw0QkFBQyxNQUFnQyxFQUFnQjs7O0FBQ2pFLFVBQUksU0FBUyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFBLENBQUUsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzFDLFVBQUksT0FBTyxHQUFHO0FBQ1osVUFBRSxFQUFFLFNBQVM7QUFDYixjQUFNLEVBQUUsU0FBUztBQUNqQixZQUFJLEVBQUUsTUFBTSxDQUFDLElBQUk7QUFDakIsY0FBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNO0FBQ3JCLFlBQUksRUFBRSxNQUFNLENBQUMsSUFBSTtPQUNsQixDQUFDOztBQUVGLGFBQU8sSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTSxFQUFLOztBQUV0QyxlQUFLLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFVBQUEsUUFBUSxFQUFJO0FBQ3hDLGNBQUksR0FBRyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM1QixjQUFJLENBQUMsR0FBRyxFQUFFO0FBQ1IsbUJBQU8sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztXQUM3QixNQUFNOztBQUVMLGdCQUFJLEtBQUssR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDO0FBQ3hCLGlCQUFLLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUM7QUFDNUIsaUJBQUssQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQztBQUN4QixrQkFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1dBQ2Y7U0FDRixDQUFDLENBQUM7QUFDSCxlQUFLLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7T0FDM0IsQ0FBQyxDQUFDO0tBQ0o7OztXQUVNLG1CQUFHO0FBQ1IsVUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRTtBQUN6QixZQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDO09BQzFCO0FBQ0QsVUFBSSxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0tBQ3BDOzs7U0FqRkcsSUFBSTs7O0FBb0ZWLFNBQVMsVUFBVSxHQUFTO0FBQzFCLFNBQU8sSUFBSSxJQUFJLEVBQUUsQ0FBQztDQUNuQjs7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHO0FBQ2YsWUFBVSxFQUFWLFVBQVU7Q0FDWCxDQUFDIiwiZmlsZSI6Ii92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXRhc2svbGliL2Jvb3Rsb2FkZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG52YXIge0V2ZW50RW1pdHRlcn0gPSByZXF1aXJlKCdldmVudHMnKTtcblxuZXhwb3J0IHR5cGUgSW52b2tlUmVtb3RlTWV0aG9kUGFyYW1zID0ge1xuICBmaWxlOiBzdHJpbmc7XG4gIG1ldGhvZDogP3N0cmluZztcbiAgYXJnczogP0FycmF5PGFueT47XG59O1xuXG4vKipcbiAqIFRhc2sgY3JlYXRlcyBhbmQgbWFuYWdlcyBjb21tdW5pY2F0aW9uIHdpdGggYW5vdGhlciBOb2RlIHByb2Nlc3MuIEluIGFkZGl0aW9uXG4gKiB0byBleGVjdXRpbmcgb3JkaW5hcnkgLmpzIGZpbGVzLCB0aGUgb3RoZXIgTm9kZSBwcm9jZXNzIGNhbiBhbHNvIHJ1biAuanMgZmlsZXNcbiAqIHVuZGVyIHRoZSBCYWJlbCB0cmFuc3BpbGVyLCBzbyBsb25nIGFzIHRoZXkgaGF2ZSB0aGUgYCd1c2UgYmFiZWwnYCBwcmFnbWFcbiAqIHVzZWQgaW4gQXRvbS5cbiAqL1xuY2xhc3MgVGFzayB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX2lkID0gMDtcbiAgICB0aGlzLl9lbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgIHZhciBvcHRpb25zID0ge3NpbGVudDogdHJ1ZX07IC8vIE5lZWRlZCBzbyBzdGRvdXQvc3RkZXJyIGFyZSBhdmFpbGFibGUuXG4gICAgdmFyIGNoaWxkID0gdGhpcy5fY2hpbGQgPSByZXF1aXJlKCdjaGlsZF9wcm9jZXNzJylcbiAgICAgICAgLmZvcmsocmVxdWlyZSgncGF0aCcpLmpvaW4oX19kaXJuYW1lLCAnL2Jvb3RzdHJhcC5qcycpLCBvcHRpb25zKTtcbiAgICAvKmVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUqL1xuICAgIHZhciBsb2cgPSBidWZmZXIgPT4gY29uc29sZS5sb2coYFRBU0soJHtjaGlsZC5waWR9KTogJHtidWZmZXJ9YCk7XG4gICAgLyplc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUqL1xuICAgIGNoaWxkLnN0ZG91dC5vbignZGF0YScsIGxvZyk7XG4gICAgY2hpbGQuc3RkZXJyLm9uKCdkYXRhJywgbG9nKTtcbiAgICAvLyBUaGUgRmxvdyBlcnJvciBvbiB0aGUgZm9sbG93aW5nIGxpbmUgaXMgZHVlIHRvIGEgYnVnIGluIEZsb3c6XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzQyOC5cbiAgICBjaGlsZC5vbignbWVzc2FnZScsIHJlc3BvbnNlID0+IHtcbiAgICAgIHZhciBpZCA9IHJlc3BvbnNlWydpZCddO1xuICAgICAgdGhpcy5fZW1pdHRlci5lbWl0KGlkLCByZXNwb25zZSk7XG4gICAgfSk7XG4gICAgY2hpbGQub24oJ2Vycm9yJywgbG9nKTtcbiAgICBjaGlsZC5zZW5kKHtcbiAgICAgIGFjdGlvbjogJ2Jvb3RzdHJhcCcsXG4gICAgICB0cmFuc3BpbGVyOiByZXF1aXJlLnJlc29sdmUoJ251Y2xpZGUtbm9kZS10cmFuc3BpbGVyJyksXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogSW52b2tlcyBhIHJlbW90ZSBtZXRob2QgdGhhdCBpcyBzcGVjaWZpZWQgYXMgYW4gZXhwb3J0IG9mIGEgLmpzIGZpbGUuXG4gICAqXG4gICAqIFRoZSBhYnNvbHV0ZSBwYXRoIHRvIHRoZSAuanMgZmlsZSBtdXN0IGJlIHNwZWNpZmllZCB2aWEgdGhlIGBmaWxlYFxuICAgKiBwcm9wZXJ0eS4gSW4gcHJhY3RpY2UsIGByZXF1aXJlLnJlc29sdmUoKWAgaXMgaGVscGZ1bCBpbiBwcm9kdWNpbmcgdGhpc1xuICAgKiBwYXRoLlxuICAgKlxuICAgKiBJZiB0aGUgLmpzIGZpbGUgZXhwb3J0cyBhbiBvYmplY3Qgd2l0aCBtdWx0aXBsZSBwcm9wZXJ0aWVzIChyYXRoZXIgdGhhbiBhXG4gICAqIHNpbmdsZSBmdW5jdGlvbiksIHRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSAodGhhdCBzaG91bGQgY29ycmVzcG9uZCB0byBhXG4gICAqIGZ1bmN0aW9uIHRvIGludm9rZSkgbXVzdCBiZSBzcGVjaWZpZWQgdmlhIHRoZSBgbWV0aG9kYCBwcm9wZXJ0eS5cbiAgICpcbiAgICogQW55IGFyZ3VtZW50cyB0byBwYXNzIHRvIHRoZSBmdW5jdGlvbiBtdXN0IGJlIHNwZWNpZmllZCB2aWEgdGhlIGBhcmdzYFxuICAgKiBwcm9wZXJ0eSBhcyBhbiBBcnJheS4gKFRoaXMgcHJvcGVydHkgY2FuIGJlIG9taXR0ZWQgaWYgdGhlcmUgYXJlIG5vIGFyZ3MuKVxuICAgKlxuICAgKiBOb3RlIHRoYXQgYm90aCB0aGUgYXJncyBmb3IgdGhlIHJlbW90ZSBtZXRob2QsIGFzIHdlbGwgYXMgdGhlIHJldHVybiB0eXBlXG4gICAqIG9mIHRoZSByZW1vdGUgbWV0aG9kLCBtdXN0IGJlIEpTT04tc2VyaWFsaXphYmxlLiAoVGhlIHJldHVybiB0eXBlIG9mIHRoZVxuICAgKiByZW1vdGUgbWV0aG9kIGNhbiBhbHNvIGJlIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGEgSlNPTi1zZXJpYWxpemFibGVcbiAgICogb2JqZWN0LilcbiAgICpcbiAgICogQHJldHVybiBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgcmVzdWx0IG9mIGludm9raW5nIHRoZSByZW1vdGVcbiAgICogICAgIG1ldGhvZC4gSWYgYW4gZXJyb3IgaXMgdGhyb3duLCBhIHJlamVjdGVkIFByb21pc2Ugd2lsbCBiZSByZXR1cm5lZFxuICAgKiAgICAgaW5zdGVhZC5cbiAgICovXG4gIGludm9rZVJlbW90ZU1ldGhvZChwYXJhbXM6IEludm9rZVJlbW90ZU1ldGhvZFBhcmFtcyk6IFByb21pc2U8YW55PiB7XG4gICAgdmFyIHJlcXVlc3RJZCA9ICgrK3RoaXMuX2lkKS50b1N0cmluZygxNik7XG4gICAgdmFyIHJlcXVlc3QgPSB7XG4gICAgICBpZDogcmVxdWVzdElkLFxuICAgICAgYWN0aW9uOiAncmVxdWVzdCcsXG4gICAgICBmaWxlOiBwYXJhbXMuZmlsZSxcbiAgICAgIG1ldGhvZDogcGFyYW1zLm1ldGhvZCxcbiAgICAgIGFyZ3M6IHBhcmFtcy5hcmdzLFxuICAgIH07XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgLy8gRW5zdXJlIHRoZSByZXNwb25zZSBsaXN0ZW5lciBpcyBzZXQgdXAgYmVmb3JlIHRoZSByZXF1ZXN0IGlzIHNlbnQuXG4gICAgICB0aGlzLl9lbWl0dGVyLm9uY2UocmVxdWVzdElkLCByZXNwb25zZSA9PiB7XG4gICAgICAgIHZhciBlcnIgPSByZXNwb25zZVsnZXJyb3InXTtcbiAgICAgICAgaWYgKCFlcnIpIHtcbiAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlWydyZXN1bHQnXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gTmVlZCB0byBzeW50aGVzaXplIGFuIEVycm9yIG9iamVjdCBmcm9tIGl0cyBKU09OIHJlcHJlc2VudGF0aW9uLlxuICAgICAgICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcigpO1xuICAgICAgICAgIGVycm9yLm1lc3NhZ2UgPSBlcnIubWVzc2FnZTtcbiAgICAgICAgICBlcnJvci5zdGFjayA9IGVyci5zdGFjaztcbiAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRoaXMuX2NoaWxkLnNlbmQocmVxdWVzdCk7XG4gICAgfSk7XG4gIH1cblxuICBkaXNwb3NlKCkge1xuICAgIGlmICh0aGlzLl9jaGlsZC5jb25uZWN0ZWQpIHtcbiAgICAgIHRoaXMuX2NoaWxkLmRpc2Nvbm5lY3QoKTtcbiAgICB9XG4gICAgdGhpcy5fZW1pdHRlci5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVUYXNrKCk6IFRhc2sge1xuICByZXR1cm4gbmV3IFRhc2soKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNyZWF0ZVRhc2ssXG59O1xuIl19
