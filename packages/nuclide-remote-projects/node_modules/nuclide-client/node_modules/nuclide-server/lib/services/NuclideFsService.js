var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

/**
 * If no file (or directory) at the specified path exists, creates the parent
 * directories (if necessary) and then writes an empty file at the specified
 * path.
 *
 * @return A boolean indicating whether the file was created.
 */

var newFile = _asyncToGenerator(function* (filePath) {
  var isExistingFile = yield fsPromise.exists(filePath);
  if (isExistingFile) {
    return false;
  }
  yield fsPromise.mkdirp(pathUtil.dirname(filePath));
  yield fsPromise.writeFile(filePath, '');
  return true;
}

/**
 * The readdir endpoint accepts the following query parameters:
 *
 *   path: path to the folder to list entries inside.
 *
 * Body contains a JSON encoded array of objects with file: and stats: entries.
 * file: has the file or directory name, stats: has the stats of the file/dir,
 * isSymbolicLink: true if the entry is a symlink to another filesystem location.
 */
);

var readdir = _asyncToGenerator(function* (path) {
  var files = yield fsPromise.readdir(path);
  var entries = yield Promise.all(files.map(_asyncToGenerator(function* (file) {
    var fullpath = pathUtil.join(path, file);
    var lstats = yield fsPromise.lstat(fullpath);
    if (!lstats.isSymbolicLink()) {
      return { file: file, stats: lstats, isSymbolicLink: false };
    } else {
      try {
        var stats = yield fsPromise.stat(fullpath);
        return { file: file, stats: stats, isSymbolicLink: true };
      } catch (error) {
        return { file: file, stats: undefined, isSymbolicLink: true, error: error };
      }
    }
  })));
  // TODO: Return entries directly and change client to handle error.
  return entries.filter(function (entry) {
    return entry.error === undefined;
  });
}

/**
 * Gets the real path of a file path.
 * It could be different than the given path if the file is a symlink
 * or exists in a symlinked directory.
 */
);

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

// TODO: Add ServerResponse type to flow

///////////////////
//
// Services
//
//////////////////

/**
 * Checks a certain path for existence and returns 'true'/'false' accordingly
 */
'use babel';

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

/**
 * This code implements the NuclideFs service.  It exports the FS on http via
 * the endpoint: http://your.server:your_port/fs/method where method is one of
 * readFile, writeFile, etc.
 */

var fs = require('fs');
var pathUtil = require('path');
var mv = require('mv');
var temp = require('temp');

var _require = require('nuclide-commons');

var fsPromise = _require.fsPromise;

var _require2 = require('../utils');

var deserializeArgs = _require2.deserializeArgs;
function exists(path) {
  return fsPromise.exists(path);
}

function findNearestFile(fileName, pathToDirectory) {
  return fsPromise.findNearestFile(fileName, pathToDirectory);
}

/**
 * The lstat endpoint is the same as the stat endpoint except it will return
 * the stat of a link instead of the file the link points to.
 */
function lstat(path) {
  return fsPromise.lstat(path);
}

/**
 * Creates a new directory with the given path.
 * Throws EEXIST error if the directory already exists.
 * Throws ENOENT if the path given is nested in a non-existing directory.
 */
function mkdir(path) {
  return fsPromise.mkdir(path);
}

/**
 * Runs the equivalent of `mkdir -p` with the given path.
 *
 * Like most implementations of mkdirp, if it fails, it is possible that
 * directories were created for some prefix of the given path.
 * @return true if the path was created; false if it already existed.
 */
function mkdirp(path) {
  return fsPromise.mkdirp(path);
}function realpath(path) {
  return fsPromise.realpath(path);
}

/**
 * Runs the equivalent of `mv sourcePath destinationPath`.
 */
function rename(sourcePath, destinationPath) {
  return new Promise(function (resolve, reject) {
    var fsPlus = require('fs-plus');
    fsPlus.move(sourcePath, destinationPath, function (error) {
      error ? reject(error) : resolve();
    });
  });
}

/**
 * Removes directories even if they are non-empty. Does not fail if the directory doesn't exist.
 */
function rmdir(path) {
  return fsPromise.rmdir(path);
}

/**
 * The stat endpoint accepts the following query parameters:
 *
 *   path: path to the file to read (that is it must be quoted)
 *
 * It returns a JSON encoded stats object that looks something like this:
 *
 * { dev: 2114,
 *  ino: 48064969,
 *  mode: 33188,
 *  nlink: 1,
 *  uid: 85,
 *  gid: 100,
 *  rdev: 0,
 *  size: 527,
 *  blksize: 4096,
 *  blocks: 8,
 *  atime: 'Mon, 10 Oct 2011 23:24:11 GMT',
 *  mtime: 'Mon, 10 Oct 2011 23:24:11 GMT',
 *  ctime: 'Mon, 10 Oct 2011 23:24:11 GMT',
 *  birthtime: 'Mon, 10 Oct 2011 23:24:11 GMT'
 * }
 *
 */
function stat(path) {
  return fsPromise.stat(path);
}

/**
 * Removes files. Does not fail if the file doesn't exist.
 */
function unlink(path) {
  return fsPromise.unlink(path)['catch'](function (error) {
    if (error.code !== 'ENOENT') {
      throw error;
    }
  });
}

///////////////////
//
// URL Handlers
//
//////////////////

/**
 * The readFile endpoint accepts the following query parameters:
 *
 *   path: the path to the file to read (it must be url encoded)
 *   options: JSON encoded + url encoded set of options that are passed to
 *            fs.createReadStream.
 *
 * It returns the contents of the file as binary in the body and sets
 * Content-Type to application/octet-stream.
 *
 * The readFile function takes a request and response  It has no return value.
 */
function readFile(request, response, next) {
  var _deserializeArgs = deserializeArgs(request.url);

  var _deserializeArgs2 = _slicedToArray(_deserializeArgs, 2);

  var path = _deserializeArgs2[0];
  var options = _deserializeArgs2[1];

  try {
    var fileStream = fs.createReadStream(path, options);

    fileStream.on('open', function (fd) {
      response.setHeader('Content-Type', 'application/octet-stream');
      fileStream.pipe(response);
    });

    fileStream.on('error', next);
  } catch (e) {
    next(new Error('NuclideFs.readFile for path ' + path + ' error: ' + e));
  }
}

/**
 * The writeFile endpoint accepts the following query parameters:
 *
 *   path: path to the file to read (it must be url encoded).
 *   options: JSON encoded + url encoded set of options that are passed to
 *            fs.createWriteStream.
 *
 * It expects the body of the request to be the binary contents you want written
 * to the file specified by the path query parameter.
 *
 * The writeFile function takes a request and response. It has no return value.
 */
function writeFile(request, response, next) {
  var _deserializeArgs3 = deserializeArgs(request.url);

  var _deserializeArgs32 = _slicedToArray(_deserializeArgs3, 2);

  var path = _deserializeArgs32[0];
  var options = _deserializeArgs32[1];

  temp.open('nuclide', function (error, info) {
    if (error) {
      next(error);
      return;
    }
    options = options || {};
    options.fd = info.fd;

    var failed = false;

    // While writing something goes wrong.
    var tempStream = request.pipe(fs.createWriteStream(path, options));

    var onError = function onError(streamError) {
      failed = true;
      tempStream.end();
      next(streamError);
    };

    request.on('error', onError);
    tempStream.on('error', onError);
    tempStream.on('close', _asyncToGenerator(function* () {
      if (failed) {
        // TODO(mikeo): Clean up temp file if failed.
        // next(streamError) has already been called, so nothing to do here.
        return;
      }

      // Ensure file still has original permissions:
      // https://github.com/facebook/nuclide/issues/157
      // We update the mode of the temp file rather than the destination file because
      // if we did the mv() then the chmod(), there would be a brief period between
      // those two operations where the destination file might have the wrong permissions.
      var permissions;
      try {
        var _ref = yield fsPromise.stat(path);

        var permissions = _ref.mode;
      } catch (e) {
        // If the file does not exist, then ENOENT will be thrown.
        if (e.code !== 'ENOENT') {
          throw error;
        }
      }
      var tempFilePath = info.path;
      if (permissions != null) {
        yield fsPromise.chmod(tempFilePath, permissions);
      }

      // TODO(mikeo): put renames into a queue so we don't write older save over new save.
      // Use mv as fs.rename doesn't work across partitions.
      mv(tempFilePath, path, { mkdirp: false }, _asyncToGenerator(function* (renameError) {
        if (renameError) {
          next(renameError);
        } else {
          response.end();
        }
      }));
    }));
  });
}

module.exports = {
  services: {
    '/fs/exists': { handler: exists },
    '/fs/findNearestFile': { handler: findNearestFile },
    '/fs/lstat': { handler: lstat },
    '/fs/mkdir': { handler: mkdir, method: 'post' },
    '/fs/mkdirp': { handler: mkdirp, method: 'post' },
    '/fs/newFile': { handler: newFile, method: 'post' },
    '/fs/readdir': { handler: readdir },
    '/fs/realpath': { handler: realpath, method: 'get', text: true },
    '/fs/rename': { handler: rename, method: 'post' },
    '/fs/rmdir': { handler: rmdir, method: 'post' },
    '/fs/stat': { handler: stat },
    '/fs/unlink': { handler: unlink, method: 'post' }
  },
  urlHandlers: {
    '/fs/readFile': { handler: readFile },
    '/fs/writeFile': { handler: writeFile, method: 'post' }
  }
};
//# sourceMappingURL=data:application/json;base64,
