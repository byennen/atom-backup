
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _require = require('./flow-annotation');

var isNuclideUriFlowTypeAnnotation = _require.isNuclideUriFlowTypeAnnotation;

var t = require('babel-core').types;

/**
 * Given the identifier, create following assignment expression:
 * `$identifier  = this._connection.getPathOfUri($identifier);`
 */
function _createGetPathOfUriAssignmentExpression(identifier) {
  var callExpression = t.callExpression(
  /* callee */t.memberExpression(t.memberExpression(t.thisExpression(), t.identifier('_connection')), t.identifier('getPathOfUri')),
  /* arguments */[identifier]);

  return t.expressionStatement(t.assignmentExpression(
  /* operator */'=',
  /* left */identifier,
  /* right */callExpression));
}

/**
 * Given the identifier, create following assignment expression:
 * `$identifier  = this._connection.getUriOfRemotePath($identifier);`
 */
function _createGetUriOfRemotePathAssignmentExpression(identifier) {
  var callExpression = t.callExpression(
  /* callee */t.memberExpression(t.memberExpression(t.thisExpression(), t.identifier('_connection')), t.identifier('getUriOfRemotePath')),
  /* arguments */[identifier]);

  return t.expressionStatement(t.assignmentExpression(
  /* operator */'=',
  /* left */identifier,
  /* right */callExpression));
}

/**
 * It creates a manipulation assigment expression for an identifier node, by comparing it's flow
 * type with typeNodeValidator.
 *
 * The key feature is that if the node is an Object or an Array, and the object's property or
 * the array's item matches given flow type according to node's flow type definition, the
 * creator could handle it and create correct assignment expression. As long as the flow type of
 * the node is a valid json object, this creator could create the expected assignment
 * expression.
 *
 * For example, say we are intersted in flow type `fooType` and we want to manipulate the
 * object with `fooType` by `object = bar(object)`. Following the expected result of created
 * assignmentExpression:
 *
 * `object: fooType` => `object = bar(object)`.
 *
 * `object: {a: fooType, b: number}` => `object.a = bar(object.a)`.
 *
 * `object: Array<fooType>` => 'object = object.map((arg) => {return bar(arg)})`.
 *
 */

var ManipulationAssignmentExpressionCreator = (function () {
  /**
   * Initialize the creator.
   * @param typeNodeValidator A function who take a FlowTypeNode as argument and return true
   *    if it is the type we want to manipulate.
   * @param identifierToAssignmentExpression A function who take an idnentifier as argument and
   *    create an manipulation assignment expression.
   */

  function ManipulationAssignmentExpressionCreator(typeNodeValidator, identifierToAssignmentExpression) {
    _classCallCheck(this, ManipulationAssignmentExpressionCreator);

    this._typeNodeValidator = typeNodeValidator;
    this._identifierToAssignmentExpression = identifierToAssignmentExpression;
  }

  /**
   * Create the manipulation assignment expression for the identifier if the flowTypeNode or the
   * flowTypeNode's nested node matches the typeNodeValidator. If nothing matches, just return
   * null.
   */

  _createClass(ManipulationAssignmentExpressionCreator, [{
    key: 'create',
    value: function create(flowTypeNode, identifier) {
      return this._visit(flowTypeNode, identifier);
    }
  }, {
    key: '_visit',
    value: function _visit(flowTypeNode, identifier) {
      if (this._typeNodeValidator(flowTypeNode)) {
        return this._identifierToAssignmentExpression(identifier);
      }

      if (flowTypeNode.type === 'GenericTypeAnnotation') {
        return this._visitGenericTypeAnnotationNode(flowTypeNode, identifier);
      } else if (flowTypeNode.type === 'ObjectTypeAnnotation') {
        return this._visitObjectTypeAnnotationNode(flowTypeNode, identifier);
      } else if (flowTypeNode.type === 'NullableTypeAnnotation') {
        return this._visitNullableTypeAnnotationNode(flowTypeNode, identifier);
      } else {
        return null;
      }
    }
  }, {
    key: '_visitGenericTypeAnnotationNode',
    value: function _visitGenericTypeAnnotationNode(flowTypeNode, identifier) {
      if (flowTypeNode.id && flowTypeNode.id.type === 'Identifier' && flowTypeNode.id.name === 'Array') {
        return this._visitArrayTypeAnnotationNode(flowTypeNode, identifier);
      } else {
        return null;
      }
    }

    /**
     * Visit the node typed as `Array<$nestedFlowType>` and create the manipulation
     * expression if nestedFlowType should be manipulate.
     *
     * For example, if the nestedFlowType should be manipuated,  the generated expression will be
     * in following form:
     * ```
     * identifier = identifier.map(arg0 => {
     *   arg0 = manipulation(arg0);
     *   return arg0;
     * });
     * ```
     */
  }, {
    key: '_visitArrayTypeAnnotationNode',
    value: function _visitArrayTypeAnnotationNode(flowTypeNode, identifier) {
      // Skip if there is either no nested flow type or more than one.
      if (!flowTypeNode.typeParameters || flowTypeNode.typeParameters.params.length !== 1) {
        return null;
      }

      var nestedFlowType = flowTypeNode.typeParameters.params[0];
      var arrowFunctionParam = t.identifier('item');
      var assignmentExpression = this._visit(nestedFlowType, arrowFunctionParam);

      if (!assignmentExpression) {
        return null;
      }

      var arrowFunction = t.arrowFunctionExpression(
      /* params */[arrowFunctionParam],
      /* body */t.blockStatement([assignmentExpression, t.returnStatement(arrowFunctionParam)]));

      var callArrayMapExpression = t.callExpression(
      /* callee */t.memberExpression(identifier, t.identifier('map')),
      /* arguments */[arrowFunction]);

      return t.expressionStatement(t.assignmentExpression(
      /* operator */'=',
      /* left */identifier,
      /* right */callArrayMapExpression));
    }

    /**
     * Visit the node typed as `{property0: flowType0, property1: flowtype1... }` and create the
     * manipulation expression if any of its properties should be manipulated.
     *
     * For example, if `identifier.property0` should be manipuated,  the generated expression will be
     * in following form:
     * ```
     * identifier = ((obj) => {
     *  obj = require('nuclide-commons').object.assign({}, obj);
     *  obj.property0 = manipulation(obj.property0);
     * }) (identifier);
     *
     * ```
     */
  }, {
    key: '_visitObjectTypeAnnotationNode',
    value: function _visitObjectTypeAnnotationNode(flowTypeNode, identifier) {
      var _this = this;

      var objectIdentifier = t.identifier('obj');
      var assignmentExpressions = [];

      flowTypeNode.properties.forEach(function (property) {
        var key = property.key;
        if (key.type !== 'Identifier') {
          return;
        }

        var propertyExpression = t.memberExpression(objectIdentifier, t.identifier(key.name));
        var assignmentExpression = _this._visit(property.value, propertyExpression);

        if (assignmentExpression) {
          assignmentExpressions.push(assignmentExpression);
        }
      });

      // Skip if the the properties don't need to be manipuated.
      if (assignmentExpressions.length === 0) {
        return null;
      }

      // Create expression of `obj = require('nuclide-commons').object.assign({}, obj);`.
      var shallowCopyExpression = t.expressionStatement(t.assignmentExpression(
      /* operator */'=',
      /* left */objectIdentifier,
      /* right */t.callExpression(
      /* callee */t.memberExpression(t.memberExpression(t.callExpression(
      /* callee */t.identifier('require'),
      /* arguments */[t.literal('nuclide-commons')]), t.identifier('object')), t.identifier('assign')),
      /* arguments */[t.objectExpression([]), objectIdentifier])));

      var arrowFunction = t.arrowFunctionExpression(
      /* params */[objectIdentifier],
      /* body */t.blockStatement([shallowCopyExpression].concat(assignmentExpressions, t.returnStatement(objectIdentifier))));

      var callArrowFunctionExpression = t.callExpression(
      /* callee */arrowFunction,
      /* arguments */[identifier]);

      return t.expressionStatement(t.assignmentExpression(
      /* operator */'=',
      /* left */identifier,
      /* right */callArrowFunctionExpression));
    }

    /**
     * Visit the node typed as `?$nestedFlowType` (nullable) and create the if statement
     * manipulation expression if the nested flow type should be manipulated.
     *
     * For example, if `identifier: ?$nestedFlowType` should be manipuated,  the generated expression will be
     * in following form:
     * ```
     * if (identifier !== null) {
     *   identifier = manipulation(identifier);
     * }
     * ```
     */
  }, {
    key: '_visitNullableTypeAnnotationNode',
    value: function _visitNullableTypeAnnotationNode(flowTypeNode, identifier) {
      if (!flowTypeNode.typeAnnotation) {
        return null;
      }

      var assignmentExpression = this._visit(flowTypeNode.typeAnnotation, identifier);

      if (!assignmentExpression) {
        return null;
      }

      return t.ifStatement(
      /* test */t.binaryExpression('!==', identifier, t.literal(null)),
      /* consequent */t.blockStatement([assignmentExpression]));
    }
  }]);

  return ManipulationAssignmentExpressionCreator;
})();

module.exports = {
  ManipulationAssignmentExpressionCreator: ManipulationAssignmentExpressionCreator,

  createGetPathOfUriAssignmentExpression: function createGetPathOfUriAssignmentExpression(flowTypeNode, identifier) {
    var creator = new ManipulationAssignmentExpressionCreator(isNuclideUriFlowTypeAnnotation, _createGetPathOfUriAssignmentExpression);
    return creator.create(flowTypeNode, identifier);
  },

  createGetUriOfRemotePathAssignmentExpression: function createGetUriOfRemotePathAssignmentExpression(flowTypeNode, identifier) {
    var creator = new ManipulationAssignmentExpressionCreator(isNuclideUriFlowTypeAnnotation, _createGetUriOfRemotePathAssignmentExpression);
    return creator.create(flowTypeNode, identifier);
  }
};
//# sourceMappingURL=data:application/json;base64,
