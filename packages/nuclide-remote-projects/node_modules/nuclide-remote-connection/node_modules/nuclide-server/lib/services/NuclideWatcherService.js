
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var watchFile = _asyncToGenerator(function* (filePath) {
  var exists = yield fsPromise.exists(filePath);
  if (!exists) {
    // Atom watcher behavior compatability.
    throw new Error('Can\'t watch a non-existing file! : ' + filePath);
  }
  var realPath = yield fsPromise.realpath(filePath);
  var watchEntry = watchedFiles[realPath];
  if (!watchEntry) {
    watchEntry = watchedFiles[realPath] = {
      eventEmitter: new EventEmitter(),
      subscriptionCount: 0,
      eventEmitterId: null
    };
  }
  watchEntry.subscriptionCount++;
  // A watch entry would have only a permanent eventEmitterId for all the future watch requests.
  watchEntry.eventEmitterId = watchEntry.eventEmitterId || this.registerEventEmitter(watchEntry.eventEmitter);
  return watchEntry.eventEmitterId;
});

var unwatchFile = _asyncToGenerator(function* (filePath) {
  var exists = yield fsPromise.exists(filePath);
  if (!exists) {
    return;
  }
  var realPath = yield fsPromise.realpath(filePath);
  var watchEntry = watchedFiles[realPath];
  if (watchEntry) {
    if (--watchEntry.subscriptionCount === 0) {
      delete watchedFiles[realPath];
    }
  }
});

var watchDirectory = _asyncToGenerator(function* (directoryPath) {
  var exists = yield fsPromise.exists(directoryPath);
  if (!exists) {
    return;
  }
  var realPath = yield fsPromise.realpath(directoryPath);
  var watchEntry = watchedDirectories[realPath];
  if (!watchEntry) {
    watchEntry = watchedDirectories[realPath] = {
      eventEmitter: new EventEmitter(),
      subscriptionCount: 0,
      eventEmitterId: null
    };
  }
  watchEntry.subscriptionCount++;
  // A watch entry would have only a permanent eventEmitterId for all the future watch requests.
  watchEntry.eventEmitterId = watchEntry.eventEmitterId || this.registerEventEmitter(watchEntry.eventEmitter);
  return watchEntry.eventEmitterId;
});

var unwatchDirectory = _asyncToGenerator(function* (directoryPath) {
  var exists = yield fsPromise.exists(directoryPath);
  if (!exists) {
    return;
  }
  var realPath = yield fsPromise.realpath(directoryPath);
  var watchEntry = watchedDirectories[realPath];
  if (watchEntry) {
    if (--watchEntry.subscriptionCount === 0) {
      delete watchedDirectories[realPath];
    }
  }
});

var watchDirectoryRecursive = _asyncToGenerator(function* (directoryPath, channel) {
  var _this = this;

  watchmanClient = watchmanClient || new WatchmanClient();
  if (watchmanClient.hasSubscription(directoryPath)) {
    return;
  }
  var watcher = yield watchmanClient.watchDirectoryRecursive(directoryPath);

  watcher.on('change', function (entries) {
    _this.publish(channel);

    var directoryChanges = {};

    for (var i = 0; i < entries.length; i++) {
      var entry = entries[i];
      var entryPath = path.join(watcher.root, entry.name);
      if (watchedFiles[entryPath]) {
        var fileWatcherEntry = watchedFiles[entryPath];
        // TODO(most): handle `rename`, if needed.
        if (!entry.exists) {
          fileWatcherEntry.eventEmitter.emit('delete');
        } else {
          fileWatcherEntry.eventEmitter.emit('change');
        }
      }
      // A file watch event can also be considered a directry change
      // for the parent directory if a file was created or deleted.
      if (entry['new'] || !entry.exists) {
        var entryDirectoryPath = path.join(entryPath, '..');
        if (watchedDirectories[entryDirectoryPath]) {
          directoryChanges[entryDirectoryPath] = (directoryChanges[entryDirectoryPath] || []).concat([entry]);
        }
      }
    }

    for (var watchedDirectoryPath in directoryChanges) {
      var changes = directoryChanges[watchedDirectoryPath];
      var directoryWatcherEntry = watchedDirectories[watchedDirectoryPath];
      directoryWatcherEntry.eventEmitter.emit('change', changes);
    }
  });
});

var unwatchDirectoryRecursive = _asyncToGenerator(function* (directoryPath) {
  watchmanClient = watchmanClient || new WatchmanClient();
  yield watchmanClient.unwatch(directoryPath);
});

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

var _require = require('nuclide-commons');

var fsPromise = _require.fsPromise;

var path = require('path');

var _require2 = require('events');

var EventEmitter = _require2.EventEmitter;

var _require3 = require('nuclide-watchman-helpers');

var WatchmanClient = _require3.WatchmanClient;

var watchmanClient = null;

var watchedFiles = {};
var watchedDirectories = {};

module.exports = {
  services: {
    '/watcher/watchFile': { handler: watchFile, method: 'post' },
    '/watcher/unwatchFile': { handler: unwatchFile, method: 'post' },
    '/watcher/watchDirectory': { handler: watchDirectory, method: 'post' },
    '/watcher/unwatchDirectory': { handler: unwatchDirectory, method: 'post' },
    '/watcher/watchDirectoryRecursive': { handler: watchDirectoryRecursive, method: 'post' },
    '/watcher/unwatchDirectoryRecursive': { handler: unwatchDirectoryRecursive, method: 'post' }
  }
};
//# sourceMappingURL=data:application/json;base64,
