
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _require = require('./utils');

var log = _require.log;
var parseDbgpMessages = _require.parseDbgpMessages;
var uriToPath = _require.uriToPath;

/**
 * xdebugPort is the port to listen for dbgp connections on.
 *
 * If present scriptRegex must be a valid RegExp. Only dbgp connections whose script
 * path matches scriptRegex will be accepted. Dbgp connections which do not match
 * the scriptRegex will be ignored.
 *
 * Similarly, the idekeyRegex filters incoming dbgp connections by idekey,
 * and pid filters connections by process id (appid in the dbgp terminology).
 * Note that 0 pid also does not filter on process id.
 */

/**
 * Connect to requested dbgp debuggee on given port.
 *
 * Starts listening for socket connections on the given port.
 * Waits for dbgp init connection message for each connection.
 * If the connection matches the given pid/ideky/path then
 * resolve with the connection and stop listening for new
 * connections.
 * If the connection does not match the given pid/idekey/path
 * then close the connection and continue waiting for a match.
 *
 * TODO: Add timeout or cancel callback.
 */

var DbgpConnector = (function () {
  function DbgpConnector(config) {
    _classCallCheck(this, DbgpConnector);

    this._config = config;
    this._server = null;
    this._connected = false;
  }

  _createClass(DbgpConnector, [{
    key: 'attach',
    value: function attach() {
      var _this = this;

      var port = this._config.xdebugPort;

      log('Creating debug server on port ' + port);

      var server = require('net').createServer();
      this._server = server;
      server.on('close', function (socket) {
        return log('Closing port ' + port);
      });
      server.listen(port, function () {
        return log('Listening on port ' + port);
      });

      return new Promise(function (resolve, reject) {
        server.on('error', function (error) {
          return _this._onServerError(error, reject);
        });
        server.on('connection', function (socket) {
          return _this._onSocketConnection(socket, resolve);
        });
        server.on('close', function () {
          reject('Connection aborted.');
        });
      });
    }
  }, {
    key: '_onSocketConnection',
    value: function _onSocketConnection(socket, accept) {
      var _this2 = this;

      var port = this._config.xdebugPort;

      log('Connection on port ' + port);
      if (this._checkForExistingConnection(socket, 'Connection')) {
        return;
      }
      socket.once('data', function (data) {
        return _this2._onSocketData(socket, data, accept);
      });
    }
  }, {
    key: '_onServerError',
    value: function _onServerError(error, reject) {
      var port = this._config.xdebugPort;

      if (error.code === 'EADDRINUSE') {
        log('Port in use ' + port);
      } else {
        log('Unknown socket error ' + error.code);
      }
      this._server.close();
      reject(error);
    }
  }, {
    key: '_onSocketData',
    value: function _onSocketData(socket, data, accept) {
      if (this._checkForExistingConnection(socket, 'Data')) {
        return;
      }

      function failConnection(errorMessage) {
        log(errorMessage);
        socket.end();
        socket.destroy();
      }

      var messages;
      try {
        messages = parseDbgpMessages(data.toString());
      } catch (error) {
        failConnection('Non XML connection string: ' + data.toString() + '. Discarding connection.');
        return;
      }

      if (messages.length !== 1) {
        failConnection('Expected a single connection message. Got ' + messages.length);
        return;
      }

      var message = messages[0];
      if (this._isCorrectConnection(message)) {
        this._connected = true;
        accept(socket);

        this._server.close();
        this._server = null;
      } else {
        failConnection('Discarding connection ' + JSON.stringify(message));
      }
    }

    /**
     * Checks if a connection already exists. If it does, then close the new socket.
     */
  }, {
    key: '_checkForExistingConnection',
    value: function _checkForExistingConnection(socket, message) {
      var port = this._config.xdebugPort;

      if (this._connected) {
        log('Ignoring ' + message + ' on port ' + port + ' after successful connection.');
        socket.end();
        socket.destroy();
      }
      return this._connected;
    }
  }, {
    key: '_isCorrectConnection',
    value: function _isCorrectConnection(message) {
      var _config = this._config;
      var pid = _config.pid;
      var idekeyRegex = _config.idekeyRegex;
      var scriptRegex = _config.scriptRegex;

      if (!message || !message.init || !message.init.$) {
        log('Incorrect init');
        return false;
      }

      var init = message.init;
      if (!init.engine || !init.engine || !init.engine[0] || init.engine[0]._ !== 'xdebug') {
        log('Incorrect engine');
        return false;
      }

      var attributes = init.$;
      if (attributes.xmlns !== 'urn:debugger_protocol_v1' || attributes['xmlns:xdebug'] !== 'http://xdebug.org/dbgp/xdebug' || attributes.language !== 'PHP') {
        log('Incorrect attributes');
        return false;
      }

      return (!pid || attributes.appid === String(pid)) && (!idekeyRegex || new RegExp(idekeyRegex).test(attributes.idekey)) && (!scriptRegex || new RegExp(scriptRegex).test(uriToPath(attributes.fileuri)));
    }
  }, {
    key: 'dispose',
    value: function dispose() {
      if (this._server) {
        this._server.close();
      }
    }
  }]);

  return DbgpConnector;
})();

module.exports = { DbgpConnector: DbgpConnector };
//# sourceMappingURL=data:application/json;base64,
