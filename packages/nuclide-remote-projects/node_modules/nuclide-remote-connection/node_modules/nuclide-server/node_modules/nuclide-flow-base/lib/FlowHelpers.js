
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var isFlowInstalled = _asyncToGenerator(function* () {
  var os = require('os');
  var platform = os.platform();
  if (platform === 'linux' || platform === 'darwin') {
    var flowPath = yield getPathToFlow();
    try {
      yield asyncExecute('which', [flowPath]);
      return true;
    } catch (e) {
      return false;
    }
  } else {
    // Flow does not currently work in Windows.
    return false;
  }
});

/**
* If this returns null, then it is not safe to run flow.
*/

var getFlowExecOptions = _asyncToGenerator(function* (file) {
  var flowConfigDirectory = yield findNearestFile('.flowconfig', path.dirname(file));
  var installed = yield isFlowInstalled();
  if (flowConfigDirectory && installed) {
    return {
      cwd: flowConfigDirectory
    };
  } else {
    return null;
  }
});

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

var path = require('path');

var _require = require('nuclide-commons');

var asyncExecute = _require.asyncExecute;
var findNearestFile = _require.findNearestFile;
var getConfigValueAsync = _require.getConfigValueAsync;

function insertAutocompleteToken(contents, line, col) {
  var lines = contents.split('\n');
  var theLine = lines[line];
  theLine = theLine.substring(0, col) + 'AUTO332' + theLine.substring(col);
  lines[line] = theLine;
  return lines.join('\n');
}

function getPathToFlow() {
  if (global.atom) {
    return getConfigValueAsync('nuclide-flow.pathToFlow')();
  } else {
    return Promise.resolve('flow');
  }
}

module.exports = {
  insertAutocompleteToken: insertAutocompleteToken,
  isFlowInstalled: isFlowInstalled,
  getPathToFlow: getPathToFlow,
  getFlowExecOptions: getFlowExecOptions
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWZsb3ctYmFzZS9saWIvRmxvd0hlbHBlcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxDQUFDOzs7Ozs7Ozs7O0lBc0JHLGVBQWUscUJBQTlCLGFBQW1EO0FBQ2pELE1BQUksRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN2QixNQUFJLFFBQVEsR0FBRyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDN0IsTUFBSSxRQUFRLEtBQUssT0FBTyxJQUFJLFFBQVEsS0FBSyxRQUFRLEVBQUU7QUFDakQsUUFBSSxRQUFRLEdBQUcsTUFBTSxhQUFhLEVBQUUsQ0FBQztBQUNyQyxRQUFJO0FBQ0YsWUFBTSxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUN4QyxhQUFPLElBQUksQ0FBQztLQUNiLENBQUMsT0FBTyxDQUFDLEVBQUU7QUFDVixhQUFPLEtBQUssQ0FBQztLQUNkO0dBQ0YsTUFBTTs7QUFFTCxXQUFPLEtBQUssQ0FBQztHQUNkO0NBQ0Y7Ozs7OztJQWFjLGtCQUFrQixxQkFBakMsV0FBa0MsSUFBWSxFQUFvQjtBQUNoRSxNQUFJLG1CQUFtQixHQUFHLE1BQU0sZUFBZSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDbkYsTUFBSSxTQUFTLEdBQUcsTUFBTSxlQUFlLEVBQUUsQ0FBQztBQUN4QyxNQUFJLG1CQUFtQixJQUFJLFNBQVMsRUFBRTtBQUNwQyxXQUFPO0FBQ0wsU0FBRyxFQUFFLG1CQUFtQjtLQUN6QixDQUFDO0dBQ0gsTUFBTTtBQUNMLFdBQU8sSUFBSSxDQUFDO0dBQ2I7Q0FDRjs7OztBQWpERCxJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7O2VBQ2dDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQzs7SUFBaEYsWUFBWSxZQUFaLFlBQVk7SUFBRSxlQUFlLFlBQWYsZUFBZTtJQUFFLG1CQUFtQixZQUFuQixtQkFBbUI7O0FBRXZELFNBQVMsdUJBQXVCLENBQUMsUUFBZ0IsRUFBRSxJQUFZLEVBQUUsR0FBVyxFQUFVO0FBQ3BGLE1BQUksS0FBSyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakMsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzFCLFNBQU8sR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsR0FBRyxTQUFTLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN6RSxPQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDO0FBQ3RCLFNBQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUN6Qjs7QUFtQkQsU0FBUyxhQUFhLEdBQW9CO0FBQ3hDLE1BQUksTUFBTSxDQUFDLElBQUksRUFBRTtBQUNmLFdBQU8sbUJBQW1CLENBQUMseUJBQXlCLENBQUMsRUFBRSxDQUFDO0dBQ3pELE1BQU07QUFDTCxXQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7R0FDaEM7Q0FDRjs7QUFpQkQsTUFBTSxDQUFDLE9BQU8sR0FBRztBQUNmLHlCQUF1QixFQUF2Qix1QkFBdUI7QUFDdkIsaUJBQWUsRUFBZixlQUFlO0FBQ2YsZUFBYSxFQUFiLGFBQWE7QUFDYixvQkFBa0IsRUFBbEIsa0JBQWtCO0NBQ25CLENBQUMiLCJmaWxlIjoiL3Zhci9mb2xkZXJzL3hmL3JzcGg0X2M1NzMxNXJzNTd4eHNkc2tyeG52MzZ0MC9UL3RtcGVtbTJIdXB1Ymxpc2hfcGFja2FnZXMvbnBtL251Y2xpZGUtZmxvdy1iYXNlL2xpYi9GbG93SGVscGVycy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xudmFyIHthc3luY0V4ZWN1dGUsIGZpbmROZWFyZXN0RmlsZSwgZ2V0Q29uZmlnVmFsdWVBc3luY30gPSByZXF1aXJlKCdudWNsaWRlLWNvbW1vbnMnKTtcblxuZnVuY3Rpb24gaW5zZXJ0QXV0b2NvbXBsZXRlVG9rZW4oY29udGVudHM6IHN0cmluZywgbGluZTogbnVtYmVyLCBjb2w6IG51bWJlcik6IHN0cmluZyB7XG4gIHZhciBsaW5lcyA9IGNvbnRlbnRzLnNwbGl0KCdcXG4nKTtcbiAgdmFyIHRoZUxpbmUgPSBsaW5lc1tsaW5lXTtcbiAgdGhlTGluZSA9IHRoZUxpbmUuc3Vic3RyaW5nKDAsIGNvbCkgKyAnQVVUTzMzMicgKyB0aGVMaW5lLnN1YnN0cmluZyhjb2wpO1xuICBsaW5lc1tsaW5lXSA9IHRoZUxpbmU7XG4gIHJldHVybiBsaW5lcy5qb2luKCdcXG4nKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gaXNGbG93SW5zdGFsbGVkKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICB2YXIgb3MgPSByZXF1aXJlKCdvcycpO1xuICB2YXIgcGxhdGZvcm0gPSBvcy5wbGF0Zm9ybSgpO1xuICBpZiAocGxhdGZvcm0gPT09ICdsaW51eCcgfHwgcGxhdGZvcm0gPT09ICdkYXJ3aW4nKSB7XG4gICAgdmFyIGZsb3dQYXRoID0gYXdhaXQgZ2V0UGF0aFRvRmxvdygpO1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBhc3luY0V4ZWN1dGUoJ3doaWNoJywgW2Zsb3dQYXRoXSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEZsb3cgZG9lcyBub3QgY3VycmVudGx5IHdvcmsgaW4gV2luZG93cy5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0UGF0aFRvRmxvdygpOiBQcm9taXNlPHN0cmluZz4ge1xuICBpZiAoZ2xvYmFsLmF0b20pIHtcbiAgICByZXR1cm4gZ2V0Q29uZmlnVmFsdWVBc3luYygnbnVjbGlkZS1mbG93LnBhdGhUb0Zsb3cnKSgpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoJ2Zsb3cnKTtcbiAgfVxufVxuXG4vKipcbiogSWYgdGhpcyByZXR1cm5zIG51bGwsIHRoZW4gaXQgaXMgbm90IHNhZmUgdG8gcnVuIGZsb3cuXG4qL1xuYXN5bmMgZnVuY3Rpb24gZ2V0Rmxvd0V4ZWNPcHRpb25zKGZpbGU6IHN0cmluZyk6IFByb21pc2U8P09iamVjdD4ge1xuICB2YXIgZmxvd0NvbmZpZ0RpcmVjdG9yeSA9IGF3YWl0IGZpbmROZWFyZXN0RmlsZSgnLmZsb3djb25maWcnLCBwYXRoLmRpcm5hbWUoZmlsZSkpO1xuICB2YXIgaW5zdGFsbGVkID0gYXdhaXQgaXNGbG93SW5zdGFsbGVkKCk7XG4gIGlmIChmbG93Q29uZmlnRGlyZWN0b3J5ICYmIGluc3RhbGxlZCkge1xuICAgIHJldHVybiB7XG4gICAgICBjd2Q6IGZsb3dDb25maWdEaXJlY3RvcnksXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaW5zZXJ0QXV0b2NvbXBsZXRlVG9rZW4sXG4gIGlzRmxvd0luc3RhbGxlZCxcbiAgZ2V0UGF0aFRvRmxvdyxcbiAgZ2V0Rmxvd0V4ZWNPcHRpb25zLFxufTtcbiJdfQ==
