
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

/**
 * Handles registering files encountered during debugging with the Chrome debugger
 */

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var FileCache = (function () {
  function FileCache(callback) {
    _classCallCheck(this, FileCache);

    this._callback = callback;
    this._files = new Map();
  }

  _createClass(FileCache, [{
    key: 'registerFile',
    value: function registerFile(filepath) {
      if (!this._files.has(filepath)) {
        var File = require('./File');
        this._files.set(filepath, new File(filepath));
        this._callback.sendMethod('Debugger.scriptParsed', {
          'scriptId': filepath,
          'url': 'file://' + filepath,
          'startLine': 0,
          'startColumn': 0,
          'endLine': 0,
          'endColumn': 0
        });
      }
      return this._files.get(filepath);
    }
  }, {
    key: 'getFileSource',
    value: function getFileSource(filepath) {
      return this.registerFile(filepath).getSource();
    }
  }]);

  return FileCache;
})();

module.exports = FileCache;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWRlYnVnZ2VyLWhodm0tcHJveHkvbGliL0ZpbGVDYWNoZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQWVOLFNBQVM7QUFJRixXQUpQLFNBQVMsQ0FJRCxRQUF3QixFQUFFOzBCQUpsQyxTQUFTOztBQUtYLFFBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO0FBQzFCLFFBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztHQUN6Qjs7ZUFQRyxTQUFTOztXQVNELHNCQUFDLFFBQWdCLEVBQVE7QUFDbkMsVUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFO0FBQzlCLFlBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM3QixZQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUM5QyxZQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FDdkIsdUJBQXVCLEVBQ3ZCO0FBQ0Usb0JBQVUsRUFBRSxRQUFRO0FBQ3BCLGVBQUssRUFBRSxTQUFTLEdBQUcsUUFBUTtBQUMzQixxQkFBVyxFQUFFLENBQUM7QUFDZCx1QkFBYSxFQUFFLENBQUM7QUFDaEIsbUJBQVMsRUFBRSxDQUFDO0FBQ1oscUJBQVcsRUFBRSxDQUFDO1NBQ2YsQ0FBQyxDQUFDO09BQ047QUFDRCxhQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ2xDOzs7V0FFWSx1QkFBQyxRQUFnQixFQUFtQjtBQUMvQyxhQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7S0FDaEQ7OztTQTdCRyxTQUFTOzs7QUFnQ2YsTUFBTSxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUMiLCJmaWxlIjoiL3Zhci9mb2xkZXJzL3hmL3JzcGg0X2M1NzMxNXJzNTd4eHNkc2tyeG52MzZ0MC9UL3RtcGVtbTJIdXB1Ymxpc2hfcGFja2FnZXMvbnBtL251Y2xpZGUtZGVidWdnZXItaGh2bS1wcm94eS9saWIvRmlsZUNhY2hlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCc7XG4vKiBAZmxvdyAqL1xuXG4vKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpblxuICogdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuXG4vKipcbiAqIEhhbmRsZXMgcmVnaXN0ZXJpbmcgZmlsZXMgZW5jb3VudGVyZWQgZHVyaW5nIGRlYnVnZ2luZyB3aXRoIHRoZSBDaHJvbWUgZGVidWdnZXJcbiAqL1xuY2xhc3MgRmlsZUNhY2hlIHtcbiAgX2NhbGxiYWNrOiBDaHJvbWVDYWxsYmFjaztcbiAgX2ZpbGVzOiBNYXA8c3RyaW5nLCBGaWxlPjtcblxuICBjb25zdHJ1Y3RvcihjYWxsYmFjazogQ2hyb21lQ2FsbGJhY2spIHtcbiAgICB0aGlzLl9jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIHRoaXMuX2ZpbGVzID0gbmV3IE1hcCgpO1xuICB9XG5cbiAgcmVnaXN0ZXJGaWxlKGZpbGVwYXRoOiBzdHJpbmcpOiBGaWxlIHtcbiAgICBpZiAoIXRoaXMuX2ZpbGVzLmhhcyhmaWxlcGF0aCkpIHtcbiAgICAgIHZhciBGaWxlID0gcmVxdWlyZSgnLi9GaWxlJyk7XG4gICAgICB0aGlzLl9maWxlcy5zZXQoZmlsZXBhdGgsIG5ldyBGaWxlKGZpbGVwYXRoKSk7XG4gICAgICB0aGlzLl9jYWxsYmFjay5zZW5kTWV0aG9kKFxuICAgICAgICAnRGVidWdnZXIuc2NyaXB0UGFyc2VkJyxcbiAgICAgICAge1xuICAgICAgICAgICdzY3JpcHRJZCc6IGZpbGVwYXRoLFxuICAgICAgICAgICd1cmwnOiAnZmlsZTovLycgKyBmaWxlcGF0aCxcbiAgICAgICAgICAnc3RhcnRMaW5lJzogMCxcbiAgICAgICAgICAnc3RhcnRDb2x1bW4nOiAwLFxuICAgICAgICAgICdlbmRMaW5lJzogMCxcbiAgICAgICAgICAnZW5kQ29sdW1uJzogMCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9maWxlcy5nZXQoZmlsZXBhdGgpO1xuICB9XG5cbiAgZ2V0RmlsZVNvdXJjZShmaWxlcGF0aDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm4gdGhpcy5yZWdpc3RlckZpbGUoZmlsZXBhdGgpLmdldFNvdXJjZSgpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRmlsZUNhY2hlO1xuIl19
