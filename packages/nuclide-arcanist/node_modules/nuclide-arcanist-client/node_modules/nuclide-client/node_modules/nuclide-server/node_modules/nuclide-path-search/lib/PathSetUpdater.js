
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var path = require('path');

/**
 * This class keeps the PathSets passed to it up to date by using file system
 * watchers to observe when relevant file additions and deletions occur.
 * This class currently relies on the Nuclide WatchmanClient, which requires fb-watchman.
 */
// TODO (t7298196) Investigate falling back to Node watchers.

var PathSetUpdater = (function () {
  function PathSetUpdater() {
    _classCallCheck(this, PathSetUpdater);

    this._pathSetToSubscription = new Map();
  }

  _createClass(PathSetUpdater, [{
    key: 'dispose',
    value: function dispose() {
      if (this._watchmanClient) {
        this._watchmanClient.dispose();
      }
    }

    // Section: Add/Remove PathSets

    /**
     * @param pathSet The PathSet to keep updated.
     * @param localDirectory The directory for which we are interested in file
     * changes. This is likely to the be the same as the directory the PathSet
     * was created from.
     * @return Disposable that can be disposed to stop updating the PathSet.
     */
  }, {
    key: 'startUpdatingPathSet',
    value: _asyncToGenerator(function* (pathSet, localDirectory) {
      var _this = this;

      var subscription = yield this._addWatchmanSubscription(localDirectory);
      this._pathSetToSubscription.set(pathSet, subscription);

      subscription.on('change', function (files) {
        return _this._processWatchmanUpdate(subscription.pathFromSubscriptionRootToSubscriptionPath, pathSet, files);
      });

      var _require = require('event-kit');

      var Disposable = _require.Disposable;

      return new Disposable(function () {
        return _this._stopUpdatingPathSet(pathSet);
      });
    })
  }, {
    key: '_stopUpdatingPathSet',
    value: function _stopUpdatingPathSet(pathSet) {
      var subscription = this._pathSetToSubscription.get(pathSet);
      if (subscription) {
        this._pathSetToSubscription['delete'](pathSet);
        this._removeWatchmanSubscription(subscription);
      }
    }

    // Section: Watchman Subscriptions

  }, {
    key: '_setupWatcherService',
    value: function _setupWatcherService() {
      if (this._watchmanClient) {
        return;
      }

      var _require2 = require('nuclide-watchman-helpers');

      var WatchmanClient = _require2.WatchmanClient;

      this._watchmanClient = new WatchmanClient();
    }
  }, {
    key: '_addWatchmanSubscription',
    value: _asyncToGenerator(function* (localDirectory) {
      if (!this._watchmanClient) {
        this._setupWatcherService();
      }

      var subscription = yield this._watchmanClient.watchDirectoryRecursive(localDirectory);
      return subscription;
    })
  }, {
    key: '_removeWatchmanSubscription',
    value: function _removeWatchmanSubscription(subscription) {
      if (!this._watchmanClient) {
        return;
      }
      this._watchmanClient.unwatch(subscription.path);
    }

    // Section: PathSet Updating

    /**
     * Adds or removes paths from the pathSet based on the files in the update.
     * This method assumes the pathSet should be populated with file paths that
     * are *RELATIVE* to the localDirectory passed into PathSetUpdater::startUpdatingPathSet.
     * @param pathFromSubscriptionRootToDir The path from the watched
     *   root directory (what watchman actually watches) to the directory of interest
     *   (i.e. the localDirectory passed to PathSetUpdater::startUpdatingPathSet).
     *   For example, this string should be '' if those are the same.
     * @param pathSet The PathSet that should be updated by this watchman update.
     * @param files The `files` field of an fb-watchman update. Each file in the
     *   update is expected to contain fields for `name`, `new`, and `exists`.
     */
  }, {
    key: '_processWatchmanUpdate',
    value: function _processWatchmanUpdate(pathFromSubscriptionRootToDir, pathSet, files) {
      var newPaths = [];
      var deletedPaths = [];

      files.forEach(function (file) {
        var fileName = file.name;
        // Watchman returns paths relative to the subscription root, which may be
        // different from (i.e. a parent directory of) the localDirectory passed into
        // PathSetUpdater::startUpdatingPathSet. But the PathSet expects paths
        // relative to the localDirectory. Thus we need to do this adjustment.
        var adjustedPath = pathFromSubscriptionRootToDir ? fileName.slice(pathFromSubscriptionRootToDir.length + 1) : fileName;
        if (file['new']) {
          newPaths.push(adjustedPath);
        } else if (!file.exists) {
          deletedPaths.push(adjustedPath);
        }
      });

      if (newPaths.length) {
        pathSet.addPaths(newPaths);
      }
      if (deletedPaths.length) {
        pathSet.removePaths(deletedPaths);
      }
    }
  }]);

  return PathSetUpdater;
})();

module.exports = PathSetUpdater;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBlbW0ySHVwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXBhdGgtc2VhcmNoL2xpYi9QYXRoU2V0VXBkYXRlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7QUFXWixJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7Ozs7Ozs7OztJQVFyQixjQUFjO0FBQ1AsV0FEUCxjQUFjLEdBQ0o7MEJBRFYsY0FBYzs7QUFFaEIsUUFBSSxDQUFDLHNCQUFzQixHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7R0FDekM7O2VBSEcsY0FBYzs7V0FLWCxtQkFBRztBQUNSLFVBQUksSUFBSSxDQUFDLGVBQWUsRUFBRTtBQUN4QixZQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxDQUFDO09BQ2hDO0tBQ0Y7Ozs7Ozs7Ozs7Ozs7NkJBWXlCLFdBQUMsT0FBZ0IsRUFBRSxjQUFzQixFQUF1Qjs7O0FBQ3hGLFVBQUksWUFBWSxHQUFHLE1BQU0sSUFBSSxDQUFDLHdCQUF3QixDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ3ZFLFVBQUksQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDOztBQUV2RCxrQkFBWSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQ3BCLFVBQUMsS0FBSztlQUFLLE1BQUssc0JBQXNCLENBQUMsWUFBWSxDQUFDLDBDQUEwQyxFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUM7T0FBQSxDQUFDLENBQUM7O3FCQUVsRyxPQUFPLENBQUMsV0FBVyxDQUFDOztVQUFsQyxVQUFVLFlBQVYsVUFBVTs7QUFDZixhQUFPLElBQUksVUFBVSxDQUFDO2VBQU0sTUFBSyxvQkFBb0IsQ0FBQyxPQUFPLENBQUM7T0FBQSxDQUFDLENBQUM7S0FDakU7OztXQUVtQiw4QkFBQyxPQUFnQixFQUFFO0FBQ3JDLFVBQUksWUFBWSxHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDNUQsVUFBSSxZQUFZLEVBQUU7QUFDaEIsWUFBSSxDQUFDLHNCQUFzQixVQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDNUMsWUFBSSxDQUFDLDJCQUEyQixDQUFDLFlBQVksQ0FBQyxDQUFDO09BQ2hEO0tBQ0Y7Ozs7OztXQUttQixnQ0FBRztBQUNyQixVQUFJLElBQUksQ0FBQyxlQUFlLEVBQUU7QUFDeEIsZUFBTztPQUNSOztzQkFDc0IsT0FBTyxDQUFDLDBCQUEwQixDQUFDOztVQUFyRCxjQUFjLGFBQWQsY0FBYzs7QUFDbkIsVUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLGNBQWMsRUFBRSxDQUFDO0tBQzdDOzs7NkJBRTZCLFdBQUMsY0FBc0IsRUFBaUM7QUFDcEYsVUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUU7QUFDekIsWUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7T0FDN0I7O0FBRUQsVUFBSSxZQUFZLEdBQUcsTUFBTSxJQUFJLENBQUMsZUFBZSxDQUFDLHVCQUF1QixDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ3RGLGFBQU8sWUFBWSxDQUFDO0tBQ3JCOzs7V0FFMEIscUNBQUMsWUFBa0MsRUFBRTtBQUM5RCxVQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRTtBQUN6QixlQUFPO09BQ1I7QUFDRCxVQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDakQ7Ozs7Ozs7Ozs7Ozs7Ozs7OztXQWlCcUIsZ0NBQUMsNkJBQXNDLEVBQUUsT0FBZ0IsRUFBRSxLQUFVLEVBQVE7QUFDakcsVUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDO0FBQ2xCLFVBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQzs7QUFFdEIsV0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFBLElBQUksRUFBSTtBQUNwQixZQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDOzs7OztBQUt6QixZQUFJLFlBQVksR0FBRyw2QkFBNkIsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLDZCQUE2QixDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUM7QUFDdkgsWUFBSSxJQUFJLE9BQUksRUFBRTtBQUNaLGtCQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQzdCLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7QUFDdkIsc0JBQVksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDakM7T0FDRixDQUFDLENBQUM7O0FBRUgsVUFBSSxRQUFRLENBQUMsTUFBTSxFQUFFO0FBQ25CLGVBQU8sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7T0FDNUI7QUFDRCxVQUFJLFlBQVksQ0FBQyxNQUFNLEVBQUU7QUFDdkIsZUFBTyxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztPQUNuQztLQUNGOzs7U0ExR0csY0FBYzs7O0FBOEdwQixNQUFNLENBQUMsT0FBTyxHQUFHLGNBQWMsQ0FBQyIsImZpbGUiOiIvdmFyL2ZvbGRlcnMveGYvcnNwaDRfYzU3MzE1cnM1N3h4c2Rza3J4bnYzNnQwL1QvdG1wZW1tMkh1cHVibGlzaF9wYWNrYWdlcy9ucG0vbnVjbGlkZS1wYXRoLXNlYXJjaC9saWIvUGF0aFNldFVwZGF0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxuLyoqXG4gKiBUaGlzIGNsYXNzIGtlZXBzIHRoZSBQYXRoU2V0cyBwYXNzZWQgdG8gaXQgdXAgdG8gZGF0ZSBieSB1c2luZyBmaWxlIHN5c3RlbVxuICogd2F0Y2hlcnMgdG8gb2JzZXJ2ZSB3aGVuIHJlbGV2YW50IGZpbGUgYWRkaXRpb25zIGFuZCBkZWxldGlvbnMgb2NjdXIuXG4gKiBUaGlzIGNsYXNzIGN1cnJlbnRseSByZWxpZXMgb24gdGhlIE51Y2xpZGUgV2F0Y2htYW5DbGllbnQsIHdoaWNoIHJlcXVpcmVzIGZiLXdhdGNobWFuLlxuICovXG4vLyBUT0RPICh0NzI5ODE5NikgSW52ZXN0aWdhdGUgZmFsbGluZyBiYWNrIHRvIE5vZGUgd2F0Y2hlcnMuXG5jbGFzcyBQYXRoU2V0VXBkYXRlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3BhdGhTZXRUb1N1YnNjcmlwdGlvbiA9IG5ldyBNYXAoKTtcbiAgfVxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgaWYgKHRoaXMuX3dhdGNobWFuQ2xpZW50KSB7XG4gICAgICB0aGlzLl93YXRjaG1hbkNsaWVudC5kaXNwb3NlKCk7XG4gICAgfVxuICB9XG5cblxuICAvLyBTZWN0aW9uOiBBZGQvUmVtb3ZlIFBhdGhTZXRzXG5cbiAgLyoqXG4gICAqIEBwYXJhbSBwYXRoU2V0IFRoZSBQYXRoU2V0IHRvIGtlZXAgdXBkYXRlZC5cbiAgICogQHBhcmFtIGxvY2FsRGlyZWN0b3J5IFRoZSBkaXJlY3RvcnkgZm9yIHdoaWNoIHdlIGFyZSBpbnRlcmVzdGVkIGluIGZpbGVcbiAgICogY2hhbmdlcy4gVGhpcyBpcyBsaWtlbHkgdG8gdGhlIGJlIHRoZSBzYW1lIGFzIHRoZSBkaXJlY3RvcnkgdGhlIFBhdGhTZXRcbiAgICogd2FzIGNyZWF0ZWQgZnJvbS5cbiAgICogQHJldHVybiBEaXNwb3NhYmxlIHRoYXQgY2FuIGJlIGRpc3Bvc2VkIHRvIHN0b3AgdXBkYXRpbmcgdGhlIFBhdGhTZXQuXG4gICAqL1xuICBhc3luYyBzdGFydFVwZGF0aW5nUGF0aFNldChwYXRoU2V0OiBQYXRoU2V0LCBsb2NhbERpcmVjdG9yeTogc3RyaW5nKTogUHJvbWlzZTxEaXNwb3NhYmxlPiB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IGF3YWl0IHRoaXMuX2FkZFdhdGNobWFuU3Vic2NyaXB0aW9uKGxvY2FsRGlyZWN0b3J5KTtcbiAgICB0aGlzLl9wYXRoU2V0VG9TdWJzY3JpcHRpb24uc2V0KHBhdGhTZXQsIHN1YnNjcmlwdGlvbik7XG5cbiAgICBzdWJzY3JpcHRpb24ub24oJ2NoYW5nZScsXG4gICAgICAgIChmaWxlcykgPT4gdGhpcy5fcHJvY2Vzc1dhdGNobWFuVXBkYXRlKHN1YnNjcmlwdGlvbi5wYXRoRnJvbVN1YnNjcmlwdGlvblJvb3RUb1N1YnNjcmlwdGlvblBhdGgsIHBhdGhTZXQsIGZpbGVzKSk7XG5cbiAgICB2YXIge0Rpc3Bvc2FibGV9ID0gcmVxdWlyZSgnZXZlbnQta2l0Jyk7XG4gICAgcmV0dXJuIG5ldyBEaXNwb3NhYmxlKCgpID0+IHRoaXMuX3N0b3BVcGRhdGluZ1BhdGhTZXQocGF0aFNldCkpO1xuICB9XG5cbiAgX3N0b3BVcGRhdGluZ1BhdGhTZXQocGF0aFNldDogUGF0aFNldCkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9wYXRoU2V0VG9TdWJzY3JpcHRpb24uZ2V0KHBhdGhTZXQpO1xuICAgIGlmIChzdWJzY3JpcHRpb24pIHtcbiAgICAgIHRoaXMuX3BhdGhTZXRUb1N1YnNjcmlwdGlvbi5kZWxldGUocGF0aFNldCk7XG4gICAgICB0aGlzLl9yZW1vdmVXYXRjaG1hblN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgIH1cbiAgfVxuXG5cbiAgLy8gU2VjdGlvbjogV2F0Y2htYW4gU3Vic2NyaXB0aW9uc1xuXG4gIF9zZXR1cFdhdGNoZXJTZXJ2aWNlKCkge1xuICAgIGlmICh0aGlzLl93YXRjaG1hbkNsaWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIge1dhdGNobWFuQ2xpZW50fSA9IHJlcXVpcmUoJ251Y2xpZGUtd2F0Y2htYW4taGVscGVycycpO1xuICAgIHRoaXMuX3dhdGNobWFuQ2xpZW50ID0gbmV3IFdhdGNobWFuQ2xpZW50KCk7XG4gIH1cblxuICBhc3luYyBfYWRkV2F0Y2htYW5TdWJzY3JpcHRpb24obG9jYWxEaXJlY3Rvcnk6IHN0cmluZyk6IFByb21pc2U8V2F0Y2htYW5TdWJzY3JpcHRpb24+IHtcbiAgICBpZiAoIXRoaXMuX3dhdGNobWFuQ2xpZW50KSB7XG4gICAgICB0aGlzLl9zZXR1cFdhdGNoZXJTZXJ2aWNlKCk7XG4gICAgfVxuXG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IGF3YWl0IHRoaXMuX3dhdGNobWFuQ2xpZW50LndhdGNoRGlyZWN0b3J5UmVjdXJzaXZlKGxvY2FsRGlyZWN0b3J5KTtcbiAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICB9XG5cbiAgX3JlbW92ZVdhdGNobWFuU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbjogV2F0Y2htYW5TdWJzY3JpcHRpb24pIHtcbiAgICBpZiAoIXRoaXMuX3dhdGNobWFuQ2xpZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX3dhdGNobWFuQ2xpZW50LnVud2F0Y2goc3Vic2NyaXB0aW9uLnBhdGgpO1xuICB9XG5cblxuICAvLyBTZWN0aW9uOiBQYXRoU2V0IFVwZGF0aW5nXG5cbiAgLyoqXG4gICAqIEFkZHMgb3IgcmVtb3ZlcyBwYXRocyBmcm9tIHRoZSBwYXRoU2V0IGJhc2VkIG9uIHRoZSBmaWxlcyBpbiB0aGUgdXBkYXRlLlxuICAgKiBUaGlzIG1ldGhvZCBhc3N1bWVzIHRoZSBwYXRoU2V0IHNob3VsZCBiZSBwb3B1bGF0ZWQgd2l0aCBmaWxlIHBhdGhzIHRoYXRcbiAgICogYXJlICpSRUxBVElWRSogdG8gdGhlIGxvY2FsRGlyZWN0b3J5IHBhc3NlZCBpbnRvIFBhdGhTZXRVcGRhdGVyOjpzdGFydFVwZGF0aW5nUGF0aFNldC5cbiAgICogQHBhcmFtIHBhdGhGcm9tU3Vic2NyaXB0aW9uUm9vdFRvRGlyIFRoZSBwYXRoIGZyb20gdGhlIHdhdGNoZWRcbiAgICogICByb290IGRpcmVjdG9yeSAod2hhdCB3YXRjaG1hbiBhY3R1YWxseSB3YXRjaGVzKSB0byB0aGUgZGlyZWN0b3J5IG9mIGludGVyZXN0XG4gICAqICAgKGkuZS4gdGhlIGxvY2FsRGlyZWN0b3J5IHBhc3NlZCB0byBQYXRoU2V0VXBkYXRlcjo6c3RhcnRVcGRhdGluZ1BhdGhTZXQpLlxuICAgKiAgIEZvciBleGFtcGxlLCB0aGlzIHN0cmluZyBzaG91bGQgYmUgJycgaWYgdGhvc2UgYXJlIHRoZSBzYW1lLlxuICAgKiBAcGFyYW0gcGF0aFNldCBUaGUgUGF0aFNldCB0aGF0IHNob3VsZCBiZSB1cGRhdGVkIGJ5IHRoaXMgd2F0Y2htYW4gdXBkYXRlLlxuICAgKiBAcGFyYW0gZmlsZXMgVGhlIGBmaWxlc2AgZmllbGQgb2YgYW4gZmItd2F0Y2htYW4gdXBkYXRlLiBFYWNoIGZpbGUgaW4gdGhlXG4gICAqICAgdXBkYXRlIGlzIGV4cGVjdGVkIHRvIGNvbnRhaW4gZmllbGRzIGZvciBgbmFtZWAsIGBuZXdgLCBhbmQgYGV4aXN0c2AuXG4gICAqL1xuICBfcHJvY2Vzc1dhdGNobWFuVXBkYXRlKHBhdGhGcm9tU3Vic2NyaXB0aW9uUm9vdFRvRGlyOiA/c3RyaW5nLCBwYXRoU2V0OiBQYXRoU2V0LCBmaWxlczogYW55KTogdm9pZCB7XG4gICAgdmFyIG5ld1BhdGhzID0gW107XG4gICAgdmFyIGRlbGV0ZWRQYXRocyA9IFtdO1xuXG4gICAgZmlsZXMuZm9yRWFjaChmaWxlID0+IHtcbiAgICAgIHZhciBmaWxlTmFtZSA9IGZpbGUubmFtZTtcbiAgICAgIC8vIFdhdGNobWFuIHJldHVybnMgcGF0aHMgcmVsYXRpdmUgdG8gdGhlIHN1YnNjcmlwdGlvbiByb290LCB3aGljaCBtYXkgYmVcbiAgICAgIC8vIGRpZmZlcmVudCBmcm9tIChpLmUuIGEgcGFyZW50IGRpcmVjdG9yeSBvZikgdGhlIGxvY2FsRGlyZWN0b3J5IHBhc3NlZCBpbnRvXG4gICAgICAvLyBQYXRoU2V0VXBkYXRlcjo6c3RhcnRVcGRhdGluZ1BhdGhTZXQuIEJ1dCB0aGUgUGF0aFNldCBleHBlY3RzIHBhdGhzXG4gICAgICAvLyByZWxhdGl2ZSB0byB0aGUgbG9jYWxEaXJlY3RvcnkuIFRodXMgd2UgbmVlZCB0byBkbyB0aGlzIGFkanVzdG1lbnQuXG4gICAgICB2YXIgYWRqdXN0ZWRQYXRoID0gcGF0aEZyb21TdWJzY3JpcHRpb25Sb290VG9EaXIgPyBmaWxlTmFtZS5zbGljZShwYXRoRnJvbVN1YnNjcmlwdGlvblJvb3RUb0Rpci5sZW5ndGggKyAxKSA6IGZpbGVOYW1lO1xuICAgICAgaWYgKGZpbGUubmV3KSB7XG4gICAgICAgIG5ld1BhdGhzLnB1c2goYWRqdXN0ZWRQYXRoKTtcbiAgICAgIH0gZWxzZSBpZiAoIWZpbGUuZXhpc3RzKSB7XG4gICAgICAgIGRlbGV0ZWRQYXRocy5wdXNoKGFkanVzdGVkUGF0aCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAobmV3UGF0aHMubGVuZ3RoKSB7XG4gICAgICBwYXRoU2V0LmFkZFBhdGhzKG5ld1BhdGhzKTtcbiAgICB9XG4gICAgaWYgKGRlbGV0ZWRQYXRocy5sZW5ndGgpIHtcbiAgICAgIHBhdGhTZXQucmVtb3ZlUGF0aHMoZGVsZXRlZFBhdGhzKTtcbiAgICB9XG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFBhdGhTZXRVcGRhdGVyO1xuIl19
